{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as _ from 'lodash';\nimport * as EventUtils from '../utils/EventUtils';\nimport * as setCustomFormatter from './setCustomFormatter';\n\nfunction setRotatePolarAxis(chart, axisItem, coord, data) {\n  var polarLabel = _.get(axisItem, 'polarLabel');\n\n  var rotate = _.get(axisItem, 'polarLabel.rotate');\n\n  if (!rotate) {\n    return;\n  }\n\n  var tickStyle = {};\n\n  if (rotate === 'parallel') {\n    tickStyle = {\n      rotate: coord.startAngle,\n      textAlign: 'center'\n    };\n  } else if (rotate === 'normal') {\n    tickStyle = {\n      rotate: coord.startAngle + 90,\n      textAlign: 'right'\n    };\n  }\n\n  var offsetX = _.get(axisItem, 'polarLabel.offsetX');\n\n  var offsetY = _.get(axisItem, 'polarLabel.offsetY');\n\n  data.forEach(function (res, i) {\n    chart.guide().text(__assign({\n      position: [i, 0],\n      content: data[i][axisItem.dataKey],\n      style: __assign({\n        polarLabel: polarLabel\n      }, tickStyle)\n    }, offsetX, offsetY));\n  });\n}\n\nexport var process = function (chart, config) {\n  var cAxis = _.cloneDeep(config.axis);\n\n  var isArr = _.isArray(cAxis);\n\n  if (_.isNil(cAxis) || cAxis === false || isArr && cAxis.length === 0) {\n    return chart.axis(false);\n  }\n\n  if (cAxis === true) {\n    return chart.axis();\n  }\n\n  var arrAxis = isArr ? cAxis : [cAxis];\n  var coord = config.coord,\n      data = config.data;\n\n  var _loop_1 = function (res) {\n    if (coord && coord.type === 'polar' && coord.direction === 'rotate') {\n      setRotatePolarAxis(chart, res, coord, data);\n    }\n\n    if (res.label) {\n      res.label = setCustomFormatter.supportD3Formatter(res.label);\n    }\n\n    for (var item in res) {\n      if (res.hasOwnProperty(item)) {\n        var name_1 = item === 'tickLine' ? 'ticks' : item;\n        EventUtils.setSEvent(chart, 'axis', name_1, res[item]);\n      }\n    }\n\n    if (res.dataKey) {\n      if (res.show === false) {\n        chart.axis(res.dataKey, false);\n      } else {\n        var options = _.omit(res, ['show', 'dataKey']);\n\n        var label = options.label;\n\n        if (label && _.isNumber(label.density) && 0 < label.density && label.density < 1 && _.isFunction(label.formatter)) {\n          var gap_1 = Math.floor(1 / label.density);\n          var formatter_1 = label.formatter;\n\n          options.label.formatter = function (val, item, i) {\n            if (i % gap_1) {\n              return ' ';\n            } else {\n              return formatter_1(val, item, i);\n            }\n          };\n        }\n\n        chart.axis(res.dataKey, options);\n      }\n    } else {\n      chart.axis(res);\n    }\n  };\n\n  for (var _i = 0, arrAxis_1 = arrAxis; _i < arrAxis_1.length; _i++) {\n    var res = arrAxis_1[_i];\n\n    _loop_1(res);\n  }\n\n  return chart;\n};","map":null,"metadata":{},"sourceType":"module"}