{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Icons = require('../../fonts/ploticon');\n\nvar Parser = new DOMParser();\n/**\n * UI controller for interactive plots\n * @Class\n * @Param {object} opts\n * @Param {object} opts.buttons    nested arrays of grouped buttons config objects\n * @Param {object} opts.container  container div to append modeBar\n * @Param {object} opts.graphInfo  primary plot object containing data and layout\n */\n\nfunction ModeBar(opts) {\n  this.container = opts.container;\n  this.element = document.createElement('div');\n  this.update(opts.graphInfo, opts.buttons);\n  this.container.appendChild(this.element);\n}\n\nvar proto = ModeBar.prototype;\n/**\n * Update modeBar (buttons and logo)\n *\n * @param {object} graphInfo  primary plot object containing data and layout\n * @param {array of arrays} buttons nested arrays of grouped buttons to initialize\n *\n */\n\nproto.update = function (graphInfo, buttons) {\n  this.graphInfo = graphInfo;\n  var context = this.graphInfo._context;\n  var fullLayout = this.graphInfo._fullLayout;\n  var modeBarId = 'modebar-' + fullLayout._uid;\n  this.element.setAttribute('id', modeBarId);\n  this._uid = modeBarId;\n  this.element.className = 'modebar';\n  if (context.displayModeBar === 'hover') this.element.className += ' modebar--hover ease-bg';\n\n  if (fullLayout.modebar.orientation === 'v') {\n    this.element.className += ' vertical';\n    buttons = buttons.reverse();\n  }\n\n  var style = fullLayout.modebar;\n  var bgSelector = context.displayModeBar === 'hover' ? '.js-plotly-plot .plotly:hover ' : '';\n  Lib.deleteRelatedStyleRule(modeBarId);\n  Lib.addRelatedStyleRule(modeBarId, bgSelector + '#' + modeBarId + ' .modebar-group', 'background-color: ' + style.bgcolor);\n  Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn .icon path', 'fill: ' + style.color);\n  Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn:hover .icon path', 'fill: ' + style.activecolor);\n  Lib.addRelatedStyleRule(modeBarId, '#' + modeBarId + ' .modebar-btn.active .icon path', 'fill: ' + style.activecolor); // if buttons or logo have changed, redraw modebar interior\n\n  var needsNewButtons = !this.hasButtons(buttons);\n  var needsNewLogo = this.hasLogo !== context.displaylogo;\n  var needsNewLocale = this.locale !== context.locale;\n  this.locale = context.locale;\n\n  if (needsNewButtons || needsNewLogo || needsNewLocale) {\n    this.removeAllButtons();\n    this.updateButtons(buttons);\n\n    if (context.watermark || context.displaylogo) {\n      var logoGroup = this.getLogo();\n\n      if (context.watermark) {\n        logoGroup.className = logoGroup.className + ' watermark';\n      }\n\n      if (fullLayout.modebar.orientation === 'v') {\n        this.element.insertBefore(logoGroup, this.element.childNodes[0]);\n      } else {\n        this.element.appendChild(logoGroup);\n      }\n\n      this.hasLogo = true;\n    }\n  }\n\n  this.updateActiveButton();\n};\n\nproto.updateButtons = function (buttons) {\n  var _this = this;\n\n  this.buttons = buttons;\n  this.buttonElements = [];\n  this.buttonsNames = [];\n  this.buttons.forEach(function (buttonGroup) {\n    var group = _this.createGroup();\n\n    buttonGroup.forEach(function (buttonConfig) {\n      var buttonName = buttonConfig.name;\n\n      if (!buttonName) {\n        throw new Error('must provide button \\'name\\' in button config');\n      }\n\n      if (_this.buttonsNames.indexOf(buttonName) !== -1) {\n        throw new Error('button name \\'' + buttonName + '\\' is taken');\n      }\n\n      _this.buttonsNames.push(buttonName);\n\n      var button = _this.createButton(buttonConfig);\n\n      _this.buttonElements.push(button);\n\n      group.appendChild(button);\n    });\n\n    _this.element.appendChild(group);\n  });\n};\n/**\n * Empty div for containing a group of buttons\n * @Return {HTMLelement}\n */\n\n\nproto.createGroup = function () {\n  var group = document.createElement('div');\n  group.className = 'modebar-group';\n  return group;\n};\n/**\n * Create a new button div and set constant and configurable attributes\n * @Param {object} config (see ./buttons.js for more info)\n * @Return {HTMLelement}\n */\n\n\nproto.createButton = function (config) {\n  var _this = this;\n\n  var button = document.createElement('a');\n  button.setAttribute('rel', 'tooltip');\n  button.className = 'modebar-btn';\n  var title = config.title;\n  if (title === undefined) title = config.name; // for localization: allow title to be a callable that takes gd as arg\n  else if (typeof title === 'function') title = title(this.graphInfo);\n  if (title || title === 0) button.setAttribute('data-title', title);\n  if (config.attr !== undefined) button.setAttribute('data-attr', config.attr);\n  var val = config.val;\n\n  if (val !== undefined) {\n    if (typeof val === 'function') val = val(this.graphInfo);\n    button.setAttribute('data-val', val);\n  }\n\n  var click = config.click;\n\n  if (typeof click !== 'function') {\n    throw new Error('must provide button \\'click\\' function in button config');\n  } else {\n    button.addEventListener('click', function (ev) {\n      config.click(_this.graphInfo, ev); // only needed for 'hoverClosestGeo' which does not call relayout\n\n      _this.updateActiveButton(ev.currentTarget);\n    });\n  }\n\n  button.setAttribute('data-toggle', config.toggle || false);\n  if (config.toggle) d3.select(button).classed('active', true);\n  var icon = config.icon;\n\n  if (typeof icon === 'function') {\n    button.appendChild(icon());\n  } else {\n    button.appendChild(this.createIcon(icon || Icons.question));\n  }\n\n  button.setAttribute('data-gravity', config.gravity || 'n');\n  return button;\n};\n/**\n * Add an icon to a button\n * @Param {object} thisIcon\n * @Param {number} thisIcon.width\n * @Param {string} thisIcon.path\n * @Param {string} thisIcon.color\n * @Return {HTMLelement}\n */\n\n\nproto.createIcon = function (thisIcon) {\n  var iconHeight = isNumeric(thisIcon.height) ? Number(thisIcon.height) : thisIcon.ascent - thisIcon.descent;\n  var svgNS = 'http://www.w3.org/2000/svg';\n  var icon;\n\n  if (thisIcon.path) {\n    icon = document.createElementNS(svgNS, 'svg');\n    icon.setAttribute('viewBox', [0, 0, thisIcon.width, iconHeight].join(' '));\n    icon.setAttribute('class', 'icon');\n    var path = document.createElementNS(svgNS, 'path');\n    path.setAttribute('d', thisIcon.path);\n\n    if (thisIcon.transform) {\n      path.setAttribute('transform', thisIcon.transform);\n    } else if (thisIcon.ascent !== undefined) {\n      // Legacy icon transform calculation\n      path.setAttribute('transform', 'matrix(1 0 0 -1 0 ' + thisIcon.ascent + ')');\n    }\n\n    icon.appendChild(path);\n  }\n\n  if (thisIcon.svg) {\n    var svgDoc = Parser.parseFromString(thisIcon.svg, 'application/xml');\n    icon = svgDoc.childNodes[0];\n  }\n\n  icon.setAttribute('height', '1em');\n  icon.setAttribute('width', '1em');\n  return icon;\n};\n/**\n * Updates active button with attribute specified in layout\n * @Param {object} graphInfo plot object containing data and layout\n * @Return {HTMLelement}\n */\n\n\nproto.updateActiveButton = function (buttonClicked) {\n  var fullLayout = this.graphInfo._fullLayout;\n  var dataAttrClicked = buttonClicked !== undefined ? buttonClicked.getAttribute('data-attr') : null;\n  this.buttonElements.forEach(function (button) {\n    var thisval = button.getAttribute('data-val') || true;\n    var dataAttr = button.getAttribute('data-attr');\n    var isToggleButton = button.getAttribute('data-toggle') === 'true';\n    var button3 = d3.select(button); // Use 'data-toggle' and 'buttonClicked' to toggle buttons\n    // that have no one-to-one equivalent in fullLayout\n\n    if (isToggleButton) {\n      if (dataAttr === dataAttrClicked) {\n        button3.classed('active', !button3.classed('active'));\n      }\n    } else {\n      var val = dataAttr === null ? dataAttr : Lib.nestedProperty(fullLayout, dataAttr).get();\n      button3.classed('active', val === thisval);\n    }\n  });\n};\n/**\n * Check if modeBar is configured as button configuration argument\n *\n * @Param {object} buttons 2d array of grouped button config objects\n * @Return {boolean}\n */\n\n\nproto.hasButtons = function (buttons) {\n  var currentButtons = this.buttons;\n  if (!currentButtons) return false;\n  if (buttons.length !== currentButtons.length) return false;\n\n  for (var i = 0; i < buttons.length; ++i) {\n    if (buttons[i].length !== currentButtons[i].length) return false;\n\n    for (var j = 0; j < buttons[i].length; j++) {\n      if (buttons[i][j].name !== currentButtons[i][j].name) return false;\n    }\n  }\n\n  return true;\n};\n/**\n * @return {HTMLDivElement} The logo image wrapped in a group\n */\n\n\nproto.getLogo = function () {\n  var group = this.createGroup();\n  var a = document.createElement('a');\n  a.href = 'https://plot.ly/';\n  a.target = '_blank';\n  a.setAttribute('data-title', Lib._(this.graphInfo, 'Produced with Plotly'));\n  a.className = 'modebar-btn plotlyjsicon modebar-btn--logo';\n  a.appendChild(this.createIcon(Icons.newplotlylogo));\n  group.appendChild(a);\n  return group;\n};\n\nproto.removeAllButtons = function () {\n  while (this.element.firstChild) {\n    this.element.removeChild(this.element.firstChild);\n  }\n\n  this.hasLogo = false;\n};\n\nproto.destroy = function () {\n  Lib.removeElement(this.container.querySelector('.modebar'));\n  Lib.deleteRelatedStyleRule(this._uid);\n};\n\nfunction createModeBar(gd, buttons) {\n  var fullLayout = gd._fullLayout;\n  var modeBar = new ModeBar({\n    graphInfo: gd,\n    container: fullLayout._modebardiv.node(),\n    buttons: buttons\n  });\n\n  if (fullLayout._privateplot) {\n    d3.select(modeBar.element).append('span').classed('badge-private float--left', true).text('PRIVATE');\n  }\n\n  return modeBar;\n}\n\nmodule.exports = createModeBar;","map":null,"metadata":{},"sourceType":"script"}