{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"Slider\"] = factory();else root[\"Slider\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var Slider = __webpack_require__(1);\n\n      if (window && !window.G2) {\n        console.err('Please load the G2 script first!');\n      }\n\n      module.exports = Slider;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * @fileOverview G2's plugin for datazoom.\n       * @author sima.zhang\n       */\n      var Range = __webpack_require__(2);\n\n      var G2 = window && window.G2;\n      var Chart = G2.Chart,\n          Util = G2.Util,\n          G = G2.G,\n          Global = G2.Global;\n      var Canvas = G.Canvas;\n      var DomUtil = Util.DomUtil;\n\n      var isNumber = function isNumber(val) {\n        return typeof val === 'number';\n      };\n\n      var Slider =\n      /*#__PURE__*/\n      function () {\n        var _proto = Slider.prototype;\n\n        _proto._initProps = function _initProps() {\n          this.height = 26;\n          this.width = 'auto'; // 默认自适应\n\n          this.padding = Global.plotCfg.padding;\n          this.container = null;\n          this.xAxis = null;\n          this.yAxis = null; // 选中区域的样式\n\n          this.fillerStyle = {\n            fill: '#BDCCED',\n            fillOpacity: 0.3\n          }; // 滑动条背景样式\n\n          this.backgroundStyle = {\n            stroke: '#CCD6EC',\n            fill: '#CCD6EC',\n            fillOpacity: 0.3,\n            lineWidth: 1\n          };\n          this.range = [0, 100];\n          this.layout = 'horizontal'; // 文本颜色\n\n          this.textStyle = {\n            fill: '#545454'\n          }; // 滑块的样式\n\n          this.handleStyle = {\n            img: 'https://gw.alipayobjects.com/zos/rmsportal/QXtfhORGlDuRvLXFzpsQ.png',\n            width: 5\n          }; // 背景图表的配置，如果为 false 则表示不渲染\n\n          this.backgroundChart = {\n            type: ['area'],\n            // 图表的类型，可以是字符串也可是是数组\n            color: '#CCD6EC'\n          };\n        };\n\n        function Slider(cfg) {\n          this._initProps();\n\n          Util.deepMix(this, cfg);\n          var container = this.container;\n\n          if (!container) {\n            throw new Error('Please specify the container for the Slider!');\n          }\n\n          if (Util.isString(container)) {\n            this.domContainer = document.getElementById(container);\n          } else {\n            this.domContainer = container;\n          }\n\n          this.handleStyle = Util.mix({\n            width: this.height,\n            height: this.height\n          }, this.handleStyle);\n\n          if (this.width === 'auto') {\n            // 宽度自适应\n            window.addEventListener('resize', Util.wrapBehavior(this, '_initForceFitEvent'));\n          }\n        }\n\n        _proto._initForceFitEvent = function _initForceFitEvent() {\n          var timer = setTimeout(Util.wrapBehavior(this, 'forceFit'), 200);\n          clearTimeout(this.resizeTimer);\n          this.resizeTimer = timer;\n        };\n\n        _proto.forceFit = function forceFit() {\n          if (!this || this.destroyed) {\n            return;\n          }\n\n          var width = DomUtil.getWidth(this.domContainer);\n          var height = this.height;\n\n          if (width !== this.domWidth) {\n            var canvas = this.canvas;\n            canvas.changeSize(width, height); // 改变画布尺寸\n\n            this.bgChart && this.bgChart.changeWidth(width);\n            canvas.clear();\n\n            this._initWidth();\n\n            this._initSlider(); // 初始化滑动条\n\n\n            this._bindEvent();\n\n            canvas.draw();\n          }\n        };\n\n        _proto._initWidth = function _initWidth() {\n          var width;\n\n          if (this.width === 'auto') {\n            width = DomUtil.getWidth(this.domContainer);\n          } else {\n            width = this.width;\n          }\n\n          this.domWidth = width;\n          var padding = Util.toAllPadding(this.padding);\n\n          if (this.layout === 'horizontal') {\n            this.plotWidth = width - padding[1] - padding[3];\n            this.plotPadding = padding[3];\n            this.plotHeight = this.height;\n          } else if (this.layout === 'vertical') {\n            this.plotWidth = this.width;\n            this.plotHeight = this.height - padding[0] - padding[2];\n            this.plotPadding = padding[0];\n          }\n        };\n\n        _proto.render = function render() {\n          this._initWidth();\n\n          this._initCanvas(); // 初始化 canvas\n\n\n          this._initBackground(); // 初始化背景图表\n\n\n          this._initSlider(); // 初始化滑动条\n\n\n          this._bindEvent();\n\n          this.canvas.draw();\n        };\n\n        _proto.changeData = function changeData(data) {\n          this.data = data;\n          this.repaint();\n        };\n\n        _proto.destroy = function destroy() {\n          clearTimeout(this.resizeTimer);\n          var rangeElement = this.rangeElement;\n          rangeElement.off('sliderchange');\n          this.bgChart && this.bgChart.destroy();\n          this.canvas.destroy();\n          var container = this.domContainer;\n\n          while (container.hasChildNodes()) {\n            container.removeChild(container.firstChild);\n          }\n\n          window.removeEventListener('resize', Util.getWrapBehavior(this, '_initForceFitEvent'));\n          this.destroyed = true;\n        };\n\n        _proto.clear = function clear() {\n          this.canvas.clear();\n          this.bgChart && this.bgChart.destroy();\n          this.bgChart = null;\n          this.scale = null;\n          this.canvas.draw();\n        };\n\n        _proto.repaint = function repaint() {\n          this.clear();\n          this.render();\n        };\n\n        _proto._initCanvas = function _initCanvas() {\n          var width = this.domWidth;\n          var height = this.height;\n          var canvas = new Canvas({\n            width: width,\n            height: height,\n            containerDOM: this.domContainer,\n            capture: false\n          });\n          var node = canvas.get('el');\n          node.style.position = 'absolute';\n          node.style.top = 0;\n          node.style.left = 0;\n          node.style.zIndex = 3;\n          this.canvas = canvas;\n        };\n\n        _proto._initBackground = function _initBackground() {\n          var _Util$deepMix;\n\n          var data = this.data;\n          var xAxis = this.xAxis;\n          var yAxis = this.yAxis;\n          var scales = Util.deepMix((_Util$deepMix = {}, _Util$deepMix[\"\" + xAxis] = {\n            range: [0, 1]\n          }, _Util$deepMix), this.scales); // 用户列定义\n\n          if (!data) {\n            // 没有数据，则不创建\n            throw new Error('Please specify the data!');\n          }\n\n          if (!xAxis) {\n            throw new Error('Please specify the xAxis!');\n          }\n\n          if (!yAxis) {\n            throw new Error('Please specify the yAxis!');\n          }\n\n          var backgroundChart = this.backgroundChart;\n          var type = backgroundChart.type;\n          var color = backgroundChart.color;\n\n          if (!Util.isArray(type)) {\n            type = [type];\n          }\n\n          var padding = Util.toAllPadding(this.padding);\n          var bgChart = new Chart({\n            container: this.container,\n            width: this.domWidth,\n            height: this.height,\n            padding: [0, padding[1], 0, padding[3]],\n            animate: false\n          });\n          bgChart.source(data);\n          bgChart.scale(scales);\n          bgChart.axis(false);\n          bgChart.tooltip(false);\n          bgChart.legend(false);\n          Util.each(type, function (eachType) {\n            bgChart[eachType]().position(xAxis + '*' + yAxis).color(color).opacity(1);\n          });\n          bgChart.render();\n          this.bgChart = bgChart;\n          this.scale = this.layout === 'horizontal' ? bgChart.getXScale() : bgChart.getYScales()[0];\n\n          if (this.layout === 'vertical') {\n            bgChart.destroy();\n          }\n        };\n\n        _proto._initRange = function _initRange() {\n          var startRadio = this.startRadio;\n          var endRadio = this.endRadio;\n          var start = this.start;\n          var end = this.end;\n          var scale = this.scale;\n          var min = 0;\n          var max = 1; // startRadio 优先级高于 start\n\n          if (isNumber(startRadio)) {\n            min = startRadio;\n          } else if (start) {\n            min = scale.scale(scale.translate(start));\n          } // endRadio 优先级高于 end\n\n\n          if (isNumber(endRadio)) {\n            max = endRadio;\n          } else if (end) {\n            max = scale.scale(scale.translate(end));\n          }\n\n          var minSpan = this.minSpan,\n              maxSpan = this.maxSpan;\n          var totalSpan = 0;\n\n          if (scale.type === 'time' || scale.type === 'timeCat') {\n            // 时间类型已排序\n            var values = scale.values;\n            var firstValue = values[0];\n            var lastValue = values[values.length - 1];\n            totalSpan = lastValue - firstValue;\n          } else if (scale.isLinear) {\n            totalSpan = scale.max - scale.min;\n          }\n\n          if (totalSpan && minSpan) {\n            this.minRange = minSpan / totalSpan * 100;\n          }\n\n          if (totalSpan && maxSpan) {\n            this.maxRange = maxSpan / totalSpan * 100;\n          }\n\n          var range = [min * 100, max * 100];\n          this.range = range;\n          return range;\n        };\n\n        _proto._getHandleValue = function _getHandleValue(type) {\n          var value;\n          var range = this.range;\n          var min = range[0] / 100;\n          var max = range[1] / 100;\n          var scale = this.scale;\n\n          if (type === 'min') {\n            value = this.start ? this.start : scale.invert(min);\n          } else {\n            value = this.end ? this.end : scale.invert(max);\n          }\n\n          return value;\n        };\n\n        _proto._initSlider = function _initSlider() {\n          var canvas = this.canvas;\n\n          var range = this._initRange();\n\n          var scale = this.scale;\n          var rangeElement = canvas.addGroup(Range, {\n            middleAttr: this.fillerStyle,\n            range: range,\n            minRange: this.minRange,\n            maxRange: this.maxRange,\n            layout: this.layout,\n            width: this.plotWidth,\n            height: this.plotHeight,\n            backgroundStyle: this.backgroundStyle,\n            textStyle: this.textStyle,\n            handleStyle: this.handleStyle,\n            minText: scale.getText(this._getHandleValue('min')),\n            maxText: scale.getText(this._getHandleValue('max'))\n          });\n\n          if (this.layout === 'horizontal') {\n            rangeElement.translate(this.plotPadding, 0);\n          } else if (this.layout === 'vertical') {\n            rangeElement.translate(0, this.plotPadding);\n          }\n\n          this.rangeElement = rangeElement;\n        };\n\n        _proto._bindEvent = function _bindEvent() {\n          var self = this;\n          var rangeElement = self.rangeElement;\n          rangeElement.on('sliderchange', function (ev) {\n            var range = ev.range;\n            var minRatio = range[0] / 100;\n            var maxRatio = range[1] / 100;\n\n            self._updateElement(minRatio, maxRatio);\n          });\n        };\n\n        _proto._updateElement = function _updateElement(minRatio, maxRatio) {\n          var scale = this.scale;\n          var rangeElement = this.rangeElement;\n          var minTextElement = rangeElement.get('minTextElement');\n          var maxTextElement = rangeElement.get('maxTextElement');\n          var min = scale.invert(minRatio);\n          var max = scale.invert(maxRatio);\n          var minText = scale.getText(min);\n          var maxText = scale.getText(max);\n          minTextElement.attr('text', minText);\n          maxTextElement.attr('text', maxText);\n          this.start = min;\n          this.end = max;\n\n          if (this.onChange) {\n            this.onChange({\n              startText: minText,\n              endText: maxText,\n              startValue: min,\n              endValue: max,\n              startRadio: minRatio,\n              endRadio: maxRatio\n            });\n          }\n        };\n\n        return Slider;\n      }();\n\n      module.exports = Slider;\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports) {\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n        subClass.__proto__ = superClass;\n      }\n      /**\n       * @fileOverview The class of slider\n       * @author sima.zhang\n       */\n\n\n      var G2 = window && window.G2;\n      var Util = G2.Util,\n          G = G2.G;\n      var Group = G.Group;\n      var DomUtil = Util.DomUtil;\n      var OFFSET = 5;\n\n      var Range =\n      /*#__PURE__*/\n      function (_Group) {\n        _inheritsLoose(Range, _Group);\n\n        function Range() {\n          return _Group.apply(this, arguments) || this;\n        }\n\n        var _proto = Range.prototype;\n\n        _proto.getDefaultCfg = function getDefaultCfg() {\n          return {\n            /**\n             * 范围\n             * @type {Array}\n             */\n            range: null,\n\n            /**\n             * 中滑块属性\n             * @type {ATTRS}\n             */\n            middleAttr: null,\n\n            /**\n             * 背景\n             * @type {G-Element}\n             */\n            backgroundElement: null,\n\n            /**\n             * 下滑块\n             * @type {G-Element}\n             */\n            minHandleElement: null,\n\n            /**\n             * 上滑块\n             * @type {G-Element}\n             */\n            maxHandleElement: null,\n\n            /**\n             * 中块\n             * @type {G-Element}\n             */\n            middleHandleElement: null,\n\n            /**\n             * 当前的激活的元素\n             * @type {G-Element}\n             */\n            currentTarget: null,\n\n            /**\n             * 布局方式： horizontal，vertical\n             * @type {String}\n             */\n            layout: 'vertical',\n\n            /**\n             * 宽\n             * @type {Number}\n             */\n            width: null,\n\n            /**\n             * 高\n             * @type {Number}\n             */\n            height: null,\n\n            /**\n             * 当前的PageX\n             * @type {Number}\n             */\n            pageX: null,\n\n            /**\n             * 当前的PageY\n             * @type {Number}\n             */\n            pageY: null\n          };\n        };\n\n        _proto._initHandle = function _initHandle(type) {\n          var handle = this.addGroup();\n          var layout = this.get('layout');\n          var handleStyle = this.get('handleStyle');\n          var img = handleStyle.img;\n          var iconWidth = handleStyle.width;\n          var iconHeight = handleStyle.height;\n          var text;\n          var handleIcon;\n          var triggerCursor;\n\n          if (layout === 'horizontal') {\n            var _iconWidth = handleStyle.width;\n            triggerCursor = 'ew-resize';\n            handleIcon = handle.addShape('Image', {\n              attrs: {\n                x: -_iconWidth / 2,\n                y: 0,\n                width: _iconWidth,\n                height: iconHeight,\n                img: img,\n                cursor: triggerCursor\n              }\n            });\n            text = handle.addShape('Text', {\n              attrs: Util.mix({\n                x: type === 'min' ? -(_iconWidth / 2 + OFFSET) : _iconWidth / 2 + OFFSET,\n                y: iconHeight / 2,\n                textAlign: type === 'min' ? 'end' : 'start',\n                textBaseline: 'middle',\n                text: type === 'min' ? this.get('minText') : this.get('maxText'),\n                cursor: triggerCursor\n              }, this.get('textStyle'))\n            });\n          } else {\n            triggerCursor = 'ns-resize';\n            handleIcon = handle.addShape('Image', {\n              attrs: {\n                x: 0,\n                y: -iconHeight / 2,\n                width: iconWidth,\n                height: iconHeight,\n                img: img,\n                cursor: triggerCursor\n              }\n            });\n            text = handle.addShape('Text', {\n              attrs: Util.mix({\n                x: iconWidth / 2,\n                y: type === 'min' ? iconHeight / 2 + OFFSET : -(iconHeight / 2 + OFFSET),\n                textAlign: 'center',\n                textBaseline: 'middle',\n                text: type === 'min' ? this.get('minText') : this.get('maxText'),\n                cursor: triggerCursor\n              }, this.get('textStyle'))\n            });\n          }\n\n          this.set(type + 'TextElement', text);\n          this.set(type + 'IconElement', handleIcon);\n          return handle;\n        };\n\n        _proto._initSliderBackground = function _initSliderBackground() {\n          var backgroundElement = this.addGroup();\n          backgroundElement.initTransform();\n          backgroundElement.translate(0, 0);\n          backgroundElement.addShape('Rect', {\n            attrs: Util.mix({\n              x: 0,\n              y: 0,\n              width: this.get('width'),\n              height: this.get('height')\n            }, this.get('backgroundStyle'))\n          });\n          return backgroundElement;\n        };\n\n        _proto._beforeRenderUI = function _beforeRenderUI() {\n          var backgroundElement = this._initSliderBackground();\n\n          var minHandleElement = this._initHandle('min');\n\n          var maxHandleElement = this._initHandle('max');\n\n          var middleHandleElement = this.addShape('rect', {\n            attrs: this.get('middleAttr')\n          });\n          this.set('middleHandleElement', middleHandleElement);\n          this.set('minHandleElement', minHandleElement);\n          this.set('maxHandleElement', maxHandleElement);\n          this.set('backgroundElement', backgroundElement);\n          backgroundElement.set('zIndex', 0);\n          middleHandleElement.set('zIndex', 1);\n          minHandleElement.set('zIndex', 2);\n          maxHandleElement.set('zIndex', 2);\n          middleHandleElement.attr('cursor', 'move');\n          this.sort();\n        };\n\n        _proto._renderUI = function _renderUI() {\n          if (this.get('layout') === 'horizontal') {\n            this._renderHorizontal();\n          } else {\n            this._renderVertical();\n          }\n        };\n\n        _proto._transform = function _transform(layout) {\n          var range = this.get('range');\n          var minRatio = range[0] / 100;\n          var maxRatio = range[1] / 100;\n          var width = this.get('width');\n          var height = this.get('height');\n          var minHandleElement = this.get('minHandleElement');\n          var maxHandleElement = this.get('maxHandleElement');\n          var middleHandleElement = this.get('middleHandleElement');\n\n          if (minHandleElement.resetMatrix) {\n            minHandleElement.resetMatrix();\n            maxHandleElement.resetMatrix();\n          } else {\n            minHandleElement.initTransform();\n            maxHandleElement.initTransform();\n          }\n\n          if (layout === 'horizontal') {\n            middleHandleElement.attr({\n              x: width * minRatio,\n              y: 0,\n              width: (maxRatio - minRatio) * width,\n              height: height\n            });\n            minHandleElement.translate(minRatio * width, 0);\n            maxHandleElement.translate(maxRatio * width, 0);\n          } else {\n            middleHandleElement.attr({\n              x: 0,\n              y: height * (1 - maxRatio),\n              width: width,\n              height: (maxRatio - minRatio) * height\n            });\n            minHandleElement.translate(0, (1 - minRatio) * height);\n            maxHandleElement.translate(0, (1 - maxRatio) * height);\n          }\n        };\n\n        _proto._renderHorizontal = function _renderHorizontal() {\n          this._transform('horizontal');\n        };\n\n        _proto._renderVertical = function _renderVertical() {\n          this._transform('vertical');\n        };\n\n        _proto._bindUI = function _bindUI() {\n          this.on('mousedown', Util.wrapBehavior(this, '_onMouseDown'));\n        };\n\n        _proto._isElement = function _isElement(target, name) {\n          // 判断是否是该元素\n          var element = this.get(name);\n\n          if (target === element) {\n            return true;\n          }\n\n          if (element.isGroup) {\n            var elementChildren = element.get('children');\n            return elementChildren.indexOf(target) > -1;\n          }\n\n          return false;\n        };\n\n        _proto._getRange = function _getRange(diff, range) {\n          var rst = diff + range;\n          rst = rst > 100 ? 100 : rst;\n          rst = rst < 0 ? 0 : rst;\n          return rst;\n        };\n\n        _proto._limitRange = function _limitRange(diff, limit, range) {\n          range[0] = this._getRange(diff, range[0]);\n          range[1] = range[0] + limit;\n\n          if (range[1] > 100) {\n            range[1] = 100;\n            range[0] = range[1] - limit;\n          }\n        };\n\n        _proto._updateStatus = function _updateStatus(dim, ev) {\n          var totalLength = dim === 'x' ? this.get('width') : this.get('height');\n          dim = Util.upperFirst(dim);\n          var range = this.get('range');\n          var page = this.get('page' + dim);\n          var currentTarget = this.get('currentTarget');\n          var rangeStash = this.get('rangeStash');\n          var layout = this.get('layout');\n          var sign = layout === 'vertical' ? -1 : 1;\n          var currentPage = ev['page' + dim];\n          var diffPage = currentPage - page;\n          var diffRange = diffPage / totalLength * 100 * sign;\n          var diffStashRange;\n          var minRange = this.get('minRange');\n          var maxRange = this.get('maxRange');\n\n          if (range[1] <= range[0]) {\n            if (this._isElement(currentTarget, 'minHandleElement') || this._isElement(currentTarget, 'maxHandleElement')) {\n              range[0] = this._getRange(diffRange, range[0]);\n              range[1] = this._getRange(diffRange, range[0]);\n            }\n          } else {\n            if (this._isElement(currentTarget, 'minHandleElement')) {\n              range[0] = this._getRange(diffRange, range[0]);\n\n              if (minRange) {\n                // 设置了最小范围\n                if (range[1] - range[0] <= minRange) {\n                  this._limitRange(diffRange, minRange, range);\n                }\n              }\n\n              if (maxRange) {\n                // 设置了最大范围\n                if (range[1] - range[0] >= maxRange) {\n                  this._limitRange(diffRange, maxRange, range);\n                }\n              }\n            }\n\n            if (this._isElement(currentTarget, 'maxHandleElement')) {\n              range[1] = this._getRange(diffRange, range[1]);\n\n              if (minRange) {\n                // 设置了最小范围\n                if (range[1] - range[0] <= minRange) {\n                  this._limitRange(diffRange, minRange, range);\n                }\n              }\n\n              if (maxRange) {\n                // 设置了最大范围\n                if (range[1] - range[0] >= maxRange) {\n                  this._limitRange(diffRange, maxRange, range);\n                }\n              }\n            }\n          }\n\n          if (this._isElement(currentTarget, 'middleHandleElement')) {\n            diffStashRange = rangeStash[1] - rangeStash[0];\n\n            this._limitRange(diffRange, diffStashRange, range);\n          }\n\n          this.emit('sliderchange', {\n            range: range\n          });\n          this.set('page' + dim, currentPage);\n\n          this._renderUI();\n\n          this.get('canvas').draw(); // need delete\n\n          return;\n        };\n\n        _proto._onMouseDown = function _onMouseDown(ev) {\n          var currentTarget = ev.currentTarget;\n          var originEvent = ev.event;\n          var range = this.get('range');\n          originEvent.stopPropagation();\n          originEvent.preventDefault();\n          this.set('pageX', originEvent.pageX);\n          this.set('pageY', originEvent.pageY);\n          this.set('currentTarget', currentTarget);\n          this.set('rangeStash', [range[0], range[1]]);\n\n          this._bindCanvasEvents();\n        };\n\n        _proto._bindCanvasEvents = function _bindCanvasEvents() {\n          var containerDOM = this.get('canvas').get('containerDOM');\n          this.onMouseMoveListener = DomUtil.addEventListener(containerDOM, 'mousemove', Util.wrapBehavior(this, '_onCanvasMouseMove'));\n          this.onMouseUpListener = DomUtil.addEventListener(containerDOM, 'mouseup', Util.wrapBehavior(this, '_onCanvasMouseUp')); // @2018-06-06 by blue.lb 添加mouseleave事件监听，让用户在操作出滑块区域后有一个“正常”的效果，可以正常重新触发滑块的操作流程\n\n          this.onMouseLeaveListener = DomUtil.addEventListener(containerDOM, 'mouseleave', Util.wrapBehavior(this, '_onCanvasMouseUp'));\n        };\n\n        _proto._onCanvasMouseMove = function _onCanvasMouseMove(ev) {\n          var layout = this.get('layout');\n\n          if (layout === 'horizontal') {\n            this._updateStatus('x', ev);\n          } else {\n            this._updateStatus('y', ev);\n          }\n        };\n\n        _proto._onCanvasMouseUp = function _onCanvasMouseUp() {\n          this._removeDocumentEvents();\n        };\n\n        _proto._removeDocumentEvents = function _removeDocumentEvents() {\n          this.onMouseMoveListener.remove();\n          this.onMouseUpListener.remove();\n          this.onMouseLeaveListener.remove();\n        };\n\n        return Range;\n      }(Group);\n\n      module.exports = Range;\n      /***/\n    }])\n  );\n});","map":null,"metadata":{},"sourceType":"script"}