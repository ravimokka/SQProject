{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as _ from 'lodash';\nimport * as EventUtils from '../utils/EventUtils';\n\nfunction setGuideLine(chart, item) {\n  if (item.quickType === 'parallel') {\n    var data = item.data;\n    chart.guide().line(__assign({\n      start: ['min', data],\n      end: ['max', data]\n    }, item));\n  } else if (item.quickType === 'normal') {\n    var data = item.data;\n    chart.guide().line(__assign({\n      start: [data, 'min'],\n      end: [data, 'max']\n    }, item));\n  } else {\n    chart.guide().line(item);\n  }\n}\n\nfunction setGuideArc(chart, item) {\n  if (item.quickType === 'parallel') {\n    var data = item.data;\n    chart.guide().arc(__assign({\n      start: ['min', data],\n      end: ['max', data]\n    }, item));\n    chart.guide().arc(__assign({\n      start: ['max', data],\n      end: ['min', data]\n    }, item));\n  } else if (item.quickType === 'normal') {\n    var data = item.data;\n    chart.guide().line(__assign({\n      start: [data, 'min'],\n      end: [data, 'max']\n    }, item));\n  } else {\n    chart.guide().arc(item);\n  }\n}\n\nexport var process = function (chart, config) {\n  var cGuide = _.cloneDeep(config.guide);\n\n  var isArr = Array.isArray(cGuide);\n\n  if (_.isNil(cGuide) || _.isEmpty(cGuide)) {\n    return;\n  }\n\n  var arrGuide = isArr ? cGuide : [cGuide];\n  arrGuide.forEach(function (res) {\n    EventUtils.setEvent(chart, \"guide-\" + res.type, res);\n\n    if (res.type === 'line') {\n      setGuideLine(chart, res);\n    } else if (res.type === 'region') {\n      chart.guide().region(res);\n    } else if (res.type === 'arc') {\n      setGuideArc(chart, res);\n    } else if (res.type === 'text') {\n      chart.guide().text(res);\n    } else if (res.type === 'image') {\n      chart.guide().image(res);\n    } else if (res.type === 'html') {\n      chart.guide().html(res);\n    } else if (res.type === 'dataMarker') {\n      chart.guide().dataMarker(res);\n    } else if (res.type === 'regionFilter') {\n      chart.guide().regionFilter(res);\n    } else if (res.type === 'dataRegion') {\n      chart.guide().dataRegion(res);\n    }\n  });\n  return chart;\n};","map":null,"metadata":{},"sourceType":"module"}