{"ast":null,"code":"import { FIELD_REGEX } from './constants';\nvar setterCache = {};\n\nsetterCache.undefined = function (obj) {\n  return obj;\n};\n/**\n * @hidden\n */\n\n\nexport function setter(field) {\n  if (setterCache[field]) {\n    return setterCache[field];\n  }\n\n  var fields = [];\n  field.replace(FIELD_REGEX, function (_match, index, indexAccessor, fieldName) {\n    fields.push(index !== undefined ? index : indexAccessor || fieldName);\n  });\n\n  setterCache[field] = function (obj, value) {\n    var root = obj;\n    var depth = fields.length - 1;\n\n    for (var idx = 0; idx < depth && root; idx++) {\n      root = root[fields[idx]] = root[fields[idx]] || {};\n    }\n\n    root[fields[depth]] = value;\n  };\n\n  return setterCache[field];\n}","map":{"version":3,"sources":["../../src/setter.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,aAA5B;AAEA,IAAM,WAAW,GAAG,EAApB;;AAEC,WAAmB,CAAC,SAApB,GAAgC,UAAA,GAAA,EAAG;AAAI,SAAA,GAAA;AAAG,CAA1C;AAED;;;;;AAGA,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAA8B;AAChC,MAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACpB,WAAO,WAAW,CAAC,KAAD,CAAlB;AACH;;AAED,MAAM,MAAM,GAAU,EAAtB;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,WAAd,EAA2B,UAAU,MAAV,EAA0B,KAA1B,EAAyC,aAAzC,EAAgE,SAAhE,EAAiF;AACxG,IAAA,MAAM,CAAC,IAAP,CAAY,KAAK,KAAK,SAAV,GAAsB,KAAtB,GAA+B,aAAa,IAAI,SAA5D;AACH,GAFD;;AAIA,EAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,UAAU,GAAV,EAAoB,KAApB,EAA8B;AAC/C,QAAI,IAAI,GAAG,GAAX;AACA,QAAM,KAAK,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA9B;;AACA,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,KAAN,IAAe,IAAjC,EAAuC,GAAG,EAA1C,EAA8C;AAC1C,MAAA,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAD,CAAP,CAAJ,GAAoB,IAAI,CAAC,MAAM,CAAC,GAAD,CAAP,CAAJ,IAAqB,EAAhD;AACH;;AACD,IAAA,IAAI,CAAC,MAAM,CAAC,KAAD,CAAP,CAAJ,GAAsB,KAAtB;AACH,GAPD;;AASA,SAAO,WAAW,CAAC,KAAD,CAAlB;AACH","sourceRoot":"","sourcesContent":["import { FIELD_REGEX } from './constants';\nvar setterCache = {};\nsetterCache.undefined = function (obj) { return obj; };\n/**\n * @hidden\n */\nexport function setter(field) {\n    if (setterCache[field]) {\n        return setterCache[field];\n    }\n    var fields = [];\n    field.replace(FIELD_REGEX, function (_match, index, indexAccessor, fieldName) {\n        fields.push(index !== undefined ? index : (indexAccessor || fieldName));\n    });\n    setterCache[field] = function (obj, value) {\n        var root = obj;\n        var depth = fields.length - 1;\n        for (var idx = 0; idx < depth && root; idx++) {\n            root = root[fields[idx]] = root[fields[idx]] || {};\n        }\n        root[fields[depth]] = value;\n    };\n    return setterCache[field];\n}\n//# sourceMappingURL=setter.js.map"]},"metadata":{},"sourceType":"module"}