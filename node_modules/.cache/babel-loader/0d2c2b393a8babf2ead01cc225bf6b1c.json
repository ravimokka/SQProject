{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar polybool = require('polybooljs');\n\nvar Registry = require('../../registry');\n\nvar Color = require('../../components/color');\n\nvar Fx = require('../../components/fx');\n\nvar Lib = require('../../lib');\n\nvar polygon = require('../../lib/polygon');\n\nvar throttle = require('../../lib/throttle');\n\nvar makeEventData = require('../../components/fx/helpers').makeEventData;\n\nvar getFromId = require('./axis_ids').getFromId;\n\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\n\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar constants = require('./constants');\n\nvar MINSELECT = constants.MINSELECT;\nvar filteredPolygon = polygon.filter;\nvar polygonTester = polygon.tester;\n\nfunction getAxId(ax) {\n  return ax._id;\n}\n\nfunction prepSelect(e, startX, startY, dragOptions, mode) {\n  var gd = dragOptions.gd;\n  var fullLayout = gd._fullLayout;\n  var zoomLayer = fullLayout._zoomlayer;\n  var dragBBox = dragOptions.element.getBoundingClientRect();\n  var plotinfo = dragOptions.plotinfo;\n  var xs = plotinfo.xaxis._offset;\n  var ys = plotinfo.yaxis._offset;\n  var x0 = startX - dragBBox.left;\n  var y0 = startY - dragBBox.top;\n  var x1 = x0;\n  var y1 = y0;\n  var path0 = 'M' + x0 + ',' + y0;\n  var pw = dragOptions.xaxes[0]._length;\n  var ph = dragOptions.yaxes[0]._length;\n  var allAxes = dragOptions.xaxes.concat(dragOptions.yaxes);\n  var subtract = e.altKey;\n  var filterPoly, selectionTester, mergedPolygons, currentPolygon;\n  var i, searchInfo, eventData;\n  coerceSelectionsCache(e, gd, dragOptions);\n\n  if (mode === 'lasso') {\n    filterPoly = filteredPolygon([[x0, y0]], constants.BENDPX);\n  }\n\n  var outlines = zoomLayer.selectAll('path.select-outline-' + plotinfo.id).data([1, 2]);\n  outlines.enter().append('path').attr('class', function (d) {\n    return 'select-outline select-outline-' + d + ' select-outline-' + plotinfo.id;\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', path0 + 'Z');\n  var corners = zoomLayer.append('path').attr('class', 'zoombox-corners').style({\n    fill: Color.background,\n    stroke: Color.defaultLine,\n    'stroke-width': 1\n  }).attr('transform', 'translate(' + xs + ', ' + ys + ')').attr('d', 'M0,0Z');\n  var throttleID = fullLayout._uid + constants.SELECTID;\n  var selection = []; // find the traces to search for selection points\n\n  var searchTraces = determineSearchTraces(gd, dragOptions.xaxes, dragOptions.yaxes, dragOptions.subplot); // in v2 (once log ranges are fixed),\n  // we'll be able to p2r here for all axis types\n\n  function p2r(ax, v) {\n    return ax.type === 'log' ? ax.p2d(v) : ax.p2r(v);\n  }\n\n  function axValue(ax) {\n    var index = ax._id.charAt(0) === 'y' ? 1 : 0;\n    return function (v) {\n      return p2r(ax, v[index]);\n    };\n  }\n\n  function ascending(a, b) {\n    return a - b;\n  } // allow subplots to override fillRangeItems routine\n\n\n  var fillRangeItems;\n\n  if (plotinfo.fillRangeItems) {\n    fillRangeItems = plotinfo.fillRangeItems;\n  } else {\n    if (mode === 'select') {\n      fillRangeItems = function fillRangeItems(eventData, poly) {\n        var ranges = eventData.range = {};\n\n        for (i = 0; i < allAxes.length; i++) {\n          var ax = allAxes[i];\n\n          var axLetter = ax._id.charAt(0);\n\n          ranges[ax._id] = [p2r(ax, poly[axLetter + 'min']), p2r(ax, poly[axLetter + 'max'])].sort(ascending);\n        }\n      };\n    } else {\n      fillRangeItems = function fillRangeItems(eventData, poly, filterPoly) {\n        var dataPts = eventData.lassoPoints = {};\n\n        for (i = 0; i < allAxes.length; i++) {\n          var ax = allAxes[i];\n          dataPts[ax._id] = filterPoly.filtered.map(axValue(ax));\n        }\n      };\n    }\n  }\n\n  dragOptions.moveFn = function (dx0, dy0) {\n    x1 = Math.max(0, Math.min(pw, dx0 + x0));\n    y1 = Math.max(0, Math.min(ph, dy0 + y0));\n    var dx = Math.abs(x1 - x0);\n    var dy = Math.abs(y1 - y0);\n\n    if (mode === 'select') {\n      var direction = fullLayout.selectdirection;\n\n      if (fullLayout.selectdirection === 'any') {\n        if (dy < Math.min(dx * 0.6, MINSELECT)) direction = 'h';else if (dx < Math.min(dy * 0.6, MINSELECT)) direction = 'v';else direction = 'd';\n      } else {\n        direction = fullLayout.selectdirection;\n      }\n\n      if (direction === 'h') {\n        // horizontal motion: make a vertical box\n        currentPolygon = [[x0, 0], [x0, ph], [x1, ph], [x1, 0]];\n        currentPolygon.xmin = Math.min(x0, x1);\n        currentPolygon.xmax = Math.max(x0, x1);\n        currentPolygon.ymin = Math.min(0, ph);\n        currentPolygon.ymax = Math.max(0, ph); // extras to guide users in keeping a straight selection\n\n        corners.attr('d', 'M' + currentPolygon.xmin + ',' + (y0 - MINSELECT) + 'h-4v' + 2 * MINSELECT + 'h4Z' + 'M' + (currentPolygon.xmax - 1) + ',' + (y0 - MINSELECT) + 'h4v' + 2 * MINSELECT + 'h-4Z');\n      } else if (direction === 'v') {\n        // vertical motion: make a horizontal box\n        currentPolygon = [[0, y0], [0, y1], [pw, y1], [pw, y0]];\n        currentPolygon.xmin = Math.min(0, pw);\n        currentPolygon.xmax = Math.max(0, pw);\n        currentPolygon.ymin = Math.min(y0, y1);\n        currentPolygon.ymax = Math.max(y0, y1);\n        corners.attr('d', 'M' + (x0 - MINSELECT) + ',' + currentPolygon.ymin + 'v-4h' + 2 * MINSELECT + 'v4Z' + 'M' + (x0 - MINSELECT) + ',' + (currentPolygon.ymax - 1) + 'v4h' + 2 * MINSELECT + 'v-4Z');\n      } else if (direction === 'd') {\n        // diagonal motion\n        currentPolygon = [[x0, y0], [x0, y1], [x1, y1], [x1, y0]];\n        currentPolygon.xmin = Math.min(x0, x1);\n        currentPolygon.xmax = Math.max(x0, x1);\n        currentPolygon.ymin = Math.min(y0, y1);\n        currentPolygon.ymax = Math.max(y0, y1);\n        corners.attr('d', 'M0,0Z');\n      }\n    } else if (mode === 'lasso') {\n      filterPoly.addPt([x1, y1]);\n      currentPolygon = filterPoly.filtered;\n    } // create outline & tester\n\n\n    if (dragOptions.selectionDefs && dragOptions.selectionDefs.length) {\n      mergedPolygons = mergePolygons(dragOptions.mergedPolygons, currentPolygon, subtract);\n      currentPolygon.subtract = subtract;\n      selectionTester = multiTester(dragOptions.selectionDefs.concat([currentPolygon]));\n    } else {\n      mergedPolygons = [currentPolygon];\n      selectionTester = polygonTester(currentPolygon);\n    } // draw selection\n\n\n    drawSelection(mergedPolygons, outlines);\n    throttle.throttle(throttleID, constants.SELECTDELAY, function () {\n      selection = [];\n      var thisSelection;\n      var traceSelections = [];\n      var traceSelection;\n\n      for (i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        traceSelection = searchInfo._module.selectPoints(searchInfo, selectionTester);\n        traceSelections.push(traceSelection);\n        thisSelection = fillSelectionItem(traceSelection, searchInfo);\n\n        if (selection.length) {\n          for (var j = 0; j < thisSelection.length; j++) {\n            selection.push(thisSelection[j]);\n          }\n        } else selection = thisSelection;\n      }\n\n      eventData = {\n        points: selection\n      };\n      updateSelectedState(gd, searchTraces, eventData);\n      fillRangeItems(eventData, currentPolygon, filterPoly);\n      dragOptions.gd.emit('plotly_selecting', eventData);\n    });\n  };\n\n  dragOptions.clickFn = function (numClicks, evt) {\n    var clickmode = fullLayout.clickmode;\n    corners.remove();\n    throttle.done(throttleID).then(function () {\n      throttle.clear(throttleID);\n\n      if (numClicks === 2) {\n        // clear selection on doubleclick\n        outlines.remove();\n\n        for (i = 0; i < searchTraces.length; i++) {\n          searchInfo = searchTraces[i];\n\n          searchInfo._module.selectPoints(searchInfo, false);\n        }\n\n        updateSelectedState(gd, searchTraces);\n        clearSelectionsCache(dragOptions);\n        gd.emit('plotly_deselect', null);\n      } else {\n        if (clickmode.indexOf('select') > -1) {\n          selectOnClick(evt, gd, dragOptions.xaxes, dragOptions.yaxes, dragOptions.subplot, dragOptions, outlines);\n        }\n\n        if (clickmode === 'event') {\n          // TODO: remove in v2 - this was probably never intended to work as it does,\n          // but in case anyone depends on it we don't want to break it now.\n          // Note that click-to-select introduced pre v2 also emitts proper\n          // event data when clickmode is having 'select' in its flag list.\n          gd.emit('plotly_selected', undefined);\n        }\n      }\n\n      Fx.click(gd, evt);\n    }).catch(Lib.error);\n  };\n\n  dragOptions.doneFn = function () {\n    corners.remove();\n    throttle.done(throttleID).then(function () {\n      throttle.clear(throttleID);\n      dragOptions.gd.emit('plotly_selected', eventData);\n\n      if (currentPolygon && dragOptions.selectionDefs) {\n        // save last polygons\n        currentPolygon.subtract = subtract;\n        dragOptions.selectionDefs.push(currentPolygon); // we have to keep reference to arrays container\n\n        dragOptions.mergedPolygons.length = 0;\n        [].push.apply(dragOptions.mergedPolygons, mergedPolygons);\n      }\n\n      if (dragOptions.doneFnCompleted) {\n        dragOptions.doneFnCompleted(selection);\n      }\n    }).catch(Lib.error);\n  };\n}\n\nfunction selectOnClick(evt, gd, xAxes, yAxes, subplot, dragOptions, polygonOutlines) {\n  var hoverData = gd._hoverdata;\n  var clickmode = gd._fullLayout.clickmode;\n  var sendEvents = clickmode.indexOf('event') > -1;\n  var selection = [];\n  var searchTraces, searchInfo, currentSelectionDef, selectionTester, traceSelection;\n  var thisTracesSelection, pointOrBinSelected, subtract, eventData, i;\n\n  if (isHoverDataSet(hoverData)) {\n    coerceSelectionsCache(evt, gd, dragOptions);\n    searchTraces = determineSearchTraces(gd, xAxes, yAxes, subplot);\n    var clickedPtInfo = extractClickedPtInfo(hoverData, searchTraces);\n    var isBinnedTrace = clickedPtInfo.pointNumbers.length > 0; // Note: potentially costly operation isPointOrBinSelected is\n    // called as late as possible through the use of an assignment\n    // in an if condition.\n\n    if (isBinnedTrace ? isOnlyThisBinSelected(searchTraces, clickedPtInfo) : isOnlyOnePointSelected(searchTraces) && (pointOrBinSelected = isPointOrBinSelected(clickedPtInfo))) {\n      if (polygonOutlines) polygonOutlines.remove();\n\n      for (i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n\n        searchInfo._module.selectPoints(searchInfo, false);\n      }\n\n      updateSelectedState(gd, searchTraces);\n      clearSelectionsCache(dragOptions);\n\n      if (sendEvents) {\n        gd.emit('plotly_deselect', null);\n      }\n    } else {\n      subtract = evt.shiftKey && (pointOrBinSelected !== undefined ? pointOrBinSelected : isPointOrBinSelected(clickedPtInfo));\n      currentSelectionDef = newPointSelectionDef(clickedPtInfo.pointNumber, clickedPtInfo.searchInfo, subtract);\n      var allSelectionDefs = dragOptions.selectionDefs.concat([currentSelectionDef]);\n      selectionTester = multiTester(allSelectionDefs);\n\n      for (i = 0; i < searchTraces.length; i++) {\n        traceSelection = searchTraces[i]._module.selectPoints(searchTraces[i], selectionTester);\n        thisTracesSelection = fillSelectionItem(traceSelection, searchTraces[i]);\n\n        if (selection.length) {\n          for (var j = 0; j < thisTracesSelection.length; j++) {\n            selection.push(thisTracesSelection[j]);\n          }\n        } else selection = thisTracesSelection;\n      }\n\n      eventData = {\n        points: selection\n      };\n      updateSelectedState(gd, searchTraces, eventData);\n\n      if (currentSelectionDef && dragOptions) {\n        dragOptions.selectionDefs.push(currentSelectionDef);\n      }\n\n      if (polygonOutlines) drawSelection(dragOptions.mergedPolygons, polygonOutlines);\n\n      if (sendEvents) {\n        gd.emit('plotly_selected', eventData);\n      }\n    }\n  }\n}\n/**\n * Constructs a new point selection definition object.\n */\n\n\nfunction newPointSelectionDef(pointNumber, searchInfo, subtract) {\n  return {\n    pointNumber: pointNumber,\n    searchInfo: searchInfo,\n    subtract: subtract\n  };\n}\n\nfunction isPointSelectionDef(o) {\n  return 'pointNumber' in o && 'searchInfo' in o;\n}\n/*\n * Constructs a new point number tester.\n */\n\n\nfunction newPointNumTester(pointSelectionDef) {\n  return {\n    xmin: 0,\n    xmax: 0,\n    ymin: 0,\n    ymax: 0,\n    pts: [],\n    contains: function contains(pt, omitFirstEdge, pointNumber, searchInfo) {\n      var idxWantedTrace = pointSelectionDef.searchInfo.cd[0].trace._expandedIndex;\n      var idxActualTrace = searchInfo.cd[0].trace._expandedIndex;\n      return idxActualTrace === idxWantedTrace && pointNumber === pointSelectionDef.pointNumber;\n    },\n    isRect: false,\n    degenerate: false,\n    subtract: pointSelectionDef.subtract\n  };\n}\n/**\n * Wraps multiple selection testers.\n *\n * @param {Array} list - An array of selection testers.\n *\n * @return a selection tester object with a contains function\n * that can be called to evaluate a point against all wrapped\n * selection testers that were passed in list.\n */\n\n\nfunction multiTester(list) {\n  var testers = [];\n  var xmin = isPointSelectionDef(list[0]) ? 0 : list[0][0][0];\n  var xmax = xmin;\n  var ymin = isPointSelectionDef(list[0]) ? 0 : list[0][0][1];\n  var ymax = ymin;\n\n  for (var i = 0; i < list.length; i++) {\n    if (isPointSelectionDef(list[i])) {\n      testers.push(newPointNumTester(list[i]));\n    } else {\n      var tester = polygon.tester(list[i]);\n      tester.subtract = list[i].subtract;\n      testers.push(tester);\n      xmin = Math.min(xmin, tester.xmin);\n      xmax = Math.max(xmax, tester.xmax);\n      ymin = Math.min(ymin, tester.ymin);\n      ymax = Math.max(ymax, tester.ymax);\n    }\n  }\n  /**\n   * Tests if the given point is within this tester.\n   *\n   * @param {Array} pt - [0] is the x coordinate, [1] is the y coordinate of the point.\n   * @param {*} arg - An optional parameter to pass down to wrapped testers.\n   * @param {number} pointNumber - The point number of the point within the underlying data array.\n   * @param {number} searchInfo - An object identifying the trace the point is contained in.\n   *\n   * @return {boolean} true if point is considered to be selected, false otherwise.\n   */\n\n\n  function contains(pt, arg, pointNumber, searchInfo) {\n    var contained = false;\n\n    for (var i = 0; i < testers.length; i++) {\n      if (testers[i].contains(pt, arg, pointNumber, searchInfo)) {\n        // if contained by subtract tester - exclude the point\n        contained = testers[i].subtract === false;\n      }\n    }\n\n    return contained;\n  }\n\n  return {\n    xmin: xmin,\n    xmax: xmax,\n    ymin: ymin,\n    ymax: ymax,\n    pts: [],\n    contains: contains,\n    isRect: false,\n    degenerate: false\n  };\n}\n\nfunction coerceSelectionsCache(evt, gd, dragOptions) {\n  var fullLayout = gd._fullLayout;\n  var plotinfo = dragOptions.plotinfo;\n  var selectingOnSameSubplot = fullLayout._lastSelectedSubplot && fullLayout._lastSelectedSubplot === plotinfo.id;\n  var hasModifierKey = evt.shiftKey || evt.altKey;\n\n  if (selectingOnSameSubplot && hasModifierKey && plotinfo.selection && plotinfo.selection.selectionDefs && !dragOptions.selectionDefs) {\n    // take over selection definitions from prev mode, if any\n    dragOptions.selectionDefs = plotinfo.selection.selectionDefs;\n    dragOptions.mergedPolygons = plotinfo.selection.mergedPolygons;\n  } else if (!hasModifierKey || !plotinfo.selection) {\n    clearSelectionsCache(dragOptions);\n  } // clear selection outline when selecting a different subplot\n\n\n  if (!selectingOnSameSubplot) {\n    clearSelect(gd);\n    fullLayout._lastSelectedSubplot = plotinfo.id;\n  }\n}\n\nfunction clearSelectionsCache(dragOptions) {\n  var plotinfo = dragOptions.plotinfo;\n  plotinfo.selection = {};\n  plotinfo.selection.selectionDefs = dragOptions.selectionDefs = [];\n  plotinfo.selection.mergedPolygons = dragOptions.mergedPolygons = [];\n}\n\nfunction determineSearchTraces(gd, xAxes, yAxes, subplot) {\n  var searchTraces = [];\n  var xAxisIds = xAxes.map(getAxId);\n  var yAxisIds = yAxes.map(getAxId);\n  var cd, trace, i;\n\n  for (i = 0; i < gd.calcdata.length; i++) {\n    cd = gd.calcdata[i];\n    trace = cd[0].trace;\n    if (trace.visible !== true || !trace._module || !trace._module.selectPoints) continue;\n\n    if (subplot && (trace.subplot === subplot || trace.geo === subplot)) {\n      searchTraces.push(createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]));\n    } else if (trace.type === 'splom' && // FIXME: make sure we don't have more than single axis for splom\n    trace._xaxes[xAxisIds[0]] && trace._yaxes[yAxisIds[0]]) {\n      var info = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);\n      info.scene = gd._fullLayout._splomScenes[trace.uid];\n      searchTraces.push(info);\n    } else if (trace.type === 'sankey') {\n      var sankeyInfo = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);\n      searchTraces.push(sankeyInfo);\n    } else {\n      if (xAxisIds.indexOf(trace.xaxis) === -1) continue;\n      if (yAxisIds.indexOf(trace.yaxis) === -1) continue;\n      searchTraces.push(createSearchInfo(trace._module, cd, getFromId(gd, trace.xaxis), getFromId(gd, trace.yaxis)));\n    }\n  }\n\n  return searchTraces;\n\n  function createSearchInfo(module, calcData, xaxis, yaxis) {\n    return {\n      _module: module,\n      cd: calcData,\n      xaxis: xaxis,\n      yaxis: yaxis\n    };\n  }\n}\n\nfunction drawSelection(polygons, outlines) {\n  var paths = [];\n  var i, d;\n\n  for (i = 0; i < polygons.length; i++) {\n    var ppts = polygons[i];\n    paths.push(ppts.join('L') + 'L' + ppts[0]);\n  }\n\n  d = polygons.length > 0 ? 'M' + paths.join('M') + 'Z' : 'M0,0Z';\n  outlines.attr('d', d);\n}\n\nfunction isHoverDataSet(hoverData) {\n  return hoverData && Array.isArray(hoverData) && hoverData[0].hoverOnBox !== true;\n}\n\nfunction extractClickedPtInfo(hoverData, searchTraces) {\n  var hoverDatum = hoverData[0];\n  var pointNumber = -1;\n  var pointNumbers = [];\n  var searchInfo, i;\n\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n\n    if (hoverDatum.fullData._expandedIndex === searchInfo.cd[0].trace._expandedIndex) {\n      // Special case for box (and violin)\n      if (hoverDatum.hoverOnBox === true) {\n        break;\n      } // Hint: in some traces like histogram, one graphical element\n      // doesn't correspond to one particular data point, but to\n      // bins of data points. Thus, hoverDatum can have a binNumber\n      // property instead of pointNumber.\n\n\n      if (hoverDatum.pointNumber !== undefined) {\n        pointNumber = hoverDatum.pointNumber;\n      } else if (hoverDatum.binNumber !== undefined) {\n        pointNumber = hoverDatum.binNumber;\n        pointNumbers = hoverDatum.pointNumbers;\n      }\n\n      break;\n    }\n  }\n\n  return {\n    pointNumber: pointNumber,\n    pointNumbers: pointNumbers,\n    searchInfo: searchInfo\n  };\n}\n\nfunction isPointOrBinSelected(clickedPtInfo) {\n  var trace = clickedPtInfo.searchInfo.cd[0].trace;\n  var ptNum = clickedPtInfo.pointNumber;\n  var ptNums = clickedPtInfo.pointNumbers;\n  var ptNumsSet = ptNums.length > 0; // When pointsNumbers is set (e.g. histogram's binning),\n  // it is assumed that when the first point of\n  // a bin is selected, all others are as well\n\n  var ptNumToTest = ptNumsSet ? ptNums[0] : ptNum; // TODO potential performance improvement\n  // Primarily we need this function to determine if a click adds\n  // or subtracts from a selection.\n  // In cases `trace.selectedpoints` is a huge array, indexOf\n  // might be slow. One remedy would be to introduce a hash somewhere.\n\n  return trace.selectedpoints ? trace.selectedpoints.indexOf(ptNumToTest) > -1 : false;\n}\n\nfunction isOnlyThisBinSelected(searchTraces, clickedPtInfo) {\n  var tracesWithSelectedPts = [];\n  var searchInfo, trace, isSameTrace, i;\n\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n\n    if (searchInfo.cd[0].trace.selectedpoints && searchInfo.cd[0].trace.selectedpoints.length > 0) {\n      tracesWithSelectedPts.push(searchInfo);\n    }\n  }\n\n  if (tracesWithSelectedPts.length === 1) {\n    isSameTrace = tracesWithSelectedPts[0] === clickedPtInfo.searchInfo;\n\n    if (isSameTrace) {\n      trace = clickedPtInfo.searchInfo.cd[0].trace;\n\n      if (trace.selectedpoints.length === clickedPtInfo.pointNumbers.length) {\n        for (i = 0; i < clickedPtInfo.pointNumbers.length; i++) {\n          if (trace.selectedpoints.indexOf(clickedPtInfo.pointNumbers[i]) < 0) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isOnlyOnePointSelected(searchTraces) {\n  var len = 0;\n  var searchInfo, trace, i;\n\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n    trace = searchInfo.cd[0].trace;\n\n    if (trace.selectedpoints) {\n      if (trace.selectedpoints.length > 1) return false;\n      len += trace.selectedpoints.length;\n      if (len > 1) return false;\n    }\n  }\n\n  return len === 1;\n}\n\nfunction updateSelectedState(gd, searchTraces, eventData) {\n  var i, searchInfo, cd, trace; // before anything else, update preGUI if necessary\n\n  for (i = 0; i < searchTraces.length; i++) {\n    var fullInputTrace = searchTraces[i].cd[0].trace._fullInput;\n    var tracePreGUI = gd._fullLayout._tracePreGUI[fullInputTrace.uid] || {};\n\n    if (tracePreGUI.selectedpoints === undefined) {\n      tracePreGUI.selectedpoints = fullInputTrace._input.selectedpoints || null;\n    }\n  }\n\n  if (eventData) {\n    var pts = eventData.points || [];\n\n    for (i = 0; i < searchTraces.length; i++) {\n      trace = searchTraces[i].cd[0].trace;\n      trace._input.selectedpoints = trace._fullInput.selectedpoints = [];\n      if (trace._fullInput !== trace) trace.selectedpoints = [];\n    }\n\n    for (i = 0; i < pts.length; i++) {\n      var pt = pts[i];\n      var data = pt.data;\n      var fullData = pt.fullData;\n\n      if (pt.pointIndices) {\n        [].push.apply(data.selectedpoints, pt.pointIndices);\n\n        if (trace._fullInput !== trace) {\n          [].push.apply(fullData.selectedpoints, pt.pointIndices);\n        }\n      } else {\n        data.selectedpoints.push(pt.pointIndex);\n\n        if (trace._fullInput !== trace) {\n          fullData.selectedpoints.push(pt.pointIndex);\n        }\n      }\n    }\n  } else {\n    for (i = 0; i < searchTraces.length; i++) {\n      trace = searchTraces[i].cd[0].trace;\n      delete trace.selectedpoints;\n      delete trace._input.selectedpoints;\n\n      if (trace._fullInput !== trace) {\n        delete trace._fullInput.selectedpoints;\n      }\n    }\n  }\n\n  var hasRegl = false;\n\n  for (i = 0; i < searchTraces.length; i++) {\n    searchInfo = searchTraces[i];\n    cd = searchInfo.cd;\n    trace = cd[0].trace;\n\n    if (Registry.traceIs(trace, 'regl')) {\n      hasRegl = true;\n    }\n\n    var _module = searchInfo._module;\n    var fn = _module.styleOnSelect || _module.style;\n\n    if (fn) {\n      fn(gd, cd, cd[0].node3);\n      if (cd[0].nodeRangePlot3) fn(gd, cd, cd[0].nodeRangePlot3);\n    }\n  }\n\n  if (hasRegl) {\n    clearGlCanvases(gd);\n    redrawReglTraces(gd);\n  }\n}\n\nfunction mergePolygons(list, poly, subtract) {\n  var res;\n\n  if (subtract) {\n    res = polybool.difference({\n      regions: list,\n      inverted: false\n    }, {\n      regions: [poly],\n      inverted: false\n    });\n    return res.regions;\n  }\n\n  res = polybool.union({\n    regions: list,\n    inverted: false\n  }, {\n    regions: [poly],\n    inverted: false\n  });\n  return res.regions;\n}\n\nfunction fillSelectionItem(selection, searchInfo) {\n  if (Array.isArray(selection)) {\n    var cd = searchInfo.cd;\n    var trace = searchInfo.cd[0].trace;\n\n    for (var i = 0; i < selection.length; i++) {\n      selection[i] = makeEventData(selection[i], trace, cd);\n    }\n  }\n\n  return selection;\n} // until we get around to persistent selections, remove the outline\n// here. The selection itself will be removed when the plot redraws\n// at the end.\n\n\nfunction clearSelect(gd) {\n  var fullLayout = gd._fullLayout || {};\n  var zoomlayer = fullLayout._zoomlayer;\n\n  if (zoomlayer) {\n    zoomlayer.selectAll('.select-outline').remove();\n  }\n}\n\nmodule.exports = {\n  prepSelect: prepSelect,\n  clearSelect: clearSelect,\n  selectOnClick: selectOnClick\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/cartesian/select.js"],"names":["polybool","require","Registry","Color","Fx","Lib","polygon","throttle","makeEventData","getFromId","clearGlCanvases","redrawReglTraces","constants","MINSELECT","filteredPolygon","filter","polygonTester","tester","getAxId","ax","_id","prepSelect","e","startX","startY","dragOptions","mode","gd","fullLayout","_fullLayout","zoomLayer","_zoomlayer","dragBBox","element","getBoundingClientRect","plotinfo","xs","xaxis","_offset","ys","yaxis","x0","left","y0","top","x1","y1","path0","pw","xaxes","_length","ph","yaxes","allAxes","concat","subtract","altKey","filterPoly","selectionTester","mergedPolygons","currentPolygon","i","searchInfo","eventData","coerceSelectionsCache","BENDPX","outlines","selectAll","id","data","enter","append","attr","d","corners","style","fill","background","stroke","defaultLine","throttleID","_uid","SELECTID","selection","searchTraces","determineSearchTraces","subplot","p2r","v","type","p2d","axValue","index","charAt","ascending","a","b","fillRangeItems","poly","ranges","range","length","axLetter","sort","dataPts","lassoPoints","filtered","map","moveFn","dx0","dy0","Math","max","min","dx","abs","dy","direction","selectdirection","xmin","xmax","ymin","ymax","addPt","selectionDefs","mergePolygons","multiTester","drawSelection","SELECTDELAY","thisSelection","traceSelections","traceSelection","_module","selectPoints","push","fillSelectionItem","j","points","updateSelectedState","emit","clickFn","numClicks","evt","clickmode","remove","done","then","clear","clearSelectionsCache","indexOf","selectOnClick","undefined","click","catch","error","doneFn","apply","doneFnCompleted","xAxes","yAxes","polygonOutlines","hoverData","_hoverdata","sendEvents","currentSelectionDef","thisTracesSelection","pointOrBinSelected","isHoverDataSet","clickedPtInfo","extractClickedPtInfo","isBinnedTrace","pointNumbers","isOnlyThisBinSelected","isOnlyOnePointSelected","isPointOrBinSelected","shiftKey","newPointSelectionDef","pointNumber","allSelectionDefs","isPointSelectionDef","o","newPointNumTester","pointSelectionDef","pts","contains","pt","omitFirstEdge","idxWantedTrace","cd","trace","_expandedIndex","idxActualTrace","isRect","degenerate","list","testers","arg","contained","selectingOnSameSubplot","_lastSelectedSubplot","hasModifierKey","clearSelect","xAxisIds","yAxisIds","calcdata","visible","geo","createSearchInfo","_xaxes","_yaxes","info","scene","_splomScenes","uid","sankeyInfo","module","calcData","polygons","paths","ppts","join","Array","isArray","hoverOnBox","hoverDatum","fullData","binNumber","ptNum","ptNums","ptNumsSet","ptNumToTest","selectedpoints","tracesWithSelectedPts","isSameTrace","len","fullInputTrace","_fullInput","tracePreGUI","_tracePreGUI","_input","pointIndices","pointIndex","hasRegl","traceIs","fn","styleOnSelect","node3","nodeRangePlot3","res","difference","regions","inverted","union","zoomlayer","exports"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar polybool = require('polybooljs');\n\nvar Registry = require('../../registry');\nvar Color = require('../../components/color');\nvar Fx = require('../../components/fx');\n\nvar Lib = require('../../lib');\nvar polygon = require('../../lib/polygon');\nvar throttle = require('../../lib/throttle');\nvar makeEventData = require('../../components/fx/helpers').makeEventData;\nvar getFromId = require('./axis_ids').getFromId;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\n\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar constants = require('./constants');\nvar MINSELECT = constants.MINSELECT;\n\nvar filteredPolygon = polygon.filter;\nvar polygonTester = polygon.tester;\n\nfunction getAxId(ax) { return ax._id; }\n\nfunction prepSelect(e, startX, startY, dragOptions, mode) {\n    var gd = dragOptions.gd;\n    var fullLayout = gd._fullLayout;\n    var zoomLayer = fullLayout._zoomlayer;\n    var dragBBox = dragOptions.element.getBoundingClientRect();\n    var plotinfo = dragOptions.plotinfo;\n    var xs = plotinfo.xaxis._offset;\n    var ys = plotinfo.yaxis._offset;\n    var x0 = startX - dragBBox.left;\n    var y0 = startY - dragBBox.top;\n    var x1 = x0;\n    var y1 = y0;\n    var path0 = 'M' + x0 + ',' + y0;\n    var pw = dragOptions.xaxes[0]._length;\n    var ph = dragOptions.yaxes[0]._length;\n    var allAxes = dragOptions.xaxes.concat(dragOptions.yaxes);\n    var subtract = e.altKey;\n\n    var filterPoly, selectionTester, mergedPolygons, currentPolygon;\n    var i, searchInfo, eventData;\n\n    coerceSelectionsCache(e, gd, dragOptions);\n\n    if(mode === 'lasso') {\n        filterPoly = filteredPolygon([[x0, y0]], constants.BENDPX);\n    }\n\n    var outlines = zoomLayer.selectAll('path.select-outline-' + plotinfo.id).data([1, 2]);\n\n    outlines.enter()\n        .append('path')\n        .attr('class', function(d) { return 'select-outline select-outline-' + d + ' select-outline-' + plotinfo.id; })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', path0 + 'Z');\n\n    var corners = zoomLayer.append('path')\n        .attr('class', 'zoombox-corners')\n        .style({\n            fill: Color.background,\n            stroke: Color.defaultLine,\n            'stroke-width': 1\n        })\n        .attr('transform', 'translate(' + xs + ', ' + ys + ')')\n        .attr('d', 'M0,0Z');\n\n\n    var throttleID = fullLayout._uid + constants.SELECTID;\n    var selection = [];\n\n    // find the traces to search for selection points\n    var searchTraces = determineSearchTraces(gd, dragOptions.xaxes,\n      dragOptions.yaxes, dragOptions.subplot);\n\n    // in v2 (once log ranges are fixed),\n    // we'll be able to p2r here for all axis types\n    function p2r(ax, v) {\n        return ax.type === 'log' ? ax.p2d(v) : ax.p2r(v);\n    }\n\n    function axValue(ax) {\n        var index = (ax._id.charAt(0) === 'y') ? 1 : 0;\n        return function(v) { return p2r(ax, v[index]); };\n    }\n\n    function ascending(a, b) { return a - b; }\n\n    // allow subplots to override fillRangeItems routine\n    var fillRangeItems;\n\n    if(plotinfo.fillRangeItems) {\n        fillRangeItems = plotinfo.fillRangeItems;\n    } else {\n        if(mode === 'select') {\n            fillRangeItems = function(eventData, poly) {\n                var ranges = eventData.range = {};\n\n                for(i = 0; i < allAxes.length; i++) {\n                    var ax = allAxes[i];\n                    var axLetter = ax._id.charAt(0);\n\n                    ranges[ax._id] = [\n                        p2r(ax, poly[axLetter + 'min']),\n                        p2r(ax, poly[axLetter + 'max'])\n                    ].sort(ascending);\n                }\n            };\n        } else {\n            fillRangeItems = function(eventData, poly, filterPoly) {\n                var dataPts = eventData.lassoPoints = {};\n\n                for(i = 0; i < allAxes.length; i++) {\n                    var ax = allAxes[i];\n                    dataPts[ax._id] = filterPoly.filtered.map(axValue(ax));\n                }\n            };\n        }\n    }\n\n    dragOptions.moveFn = function(dx0, dy0) {\n        x1 = Math.max(0, Math.min(pw, dx0 + x0));\n        y1 = Math.max(0, Math.min(ph, dy0 + y0));\n\n        var dx = Math.abs(x1 - x0);\n        var dy = Math.abs(y1 - y0);\n\n        if(mode === 'select') {\n            var direction = fullLayout.selectdirection;\n\n            if(fullLayout.selectdirection === 'any') {\n                if(dy < Math.min(dx * 0.6, MINSELECT)) direction = 'h';\n                else if(dx < Math.min(dy * 0.6, MINSELECT)) direction = 'v';\n                else direction = 'd';\n            } else {\n                direction = fullLayout.selectdirection;\n            }\n\n            if(direction === 'h') {\n                // horizontal motion: make a vertical box\n                currentPolygon = [[x0, 0], [x0, ph], [x1, ph], [x1, 0]];\n                currentPolygon.xmin = Math.min(x0, x1);\n                currentPolygon.xmax = Math.max(x0, x1);\n                currentPolygon.ymin = Math.min(0, ph);\n                currentPolygon.ymax = Math.max(0, ph);\n                // extras to guide users in keeping a straight selection\n                corners.attr('d', 'M' + currentPolygon.xmin + ',' + (y0 - MINSELECT) +\n                    'h-4v' + (2 * MINSELECT) + 'h4Z' +\n                    'M' + (currentPolygon.xmax - 1) + ',' + (y0 - MINSELECT) +\n                    'h4v' + (2 * MINSELECT) + 'h-4Z');\n            } else if(direction === 'v') {\n                // vertical motion: make a horizontal box\n                currentPolygon = [[0, y0], [0, y1], [pw, y1], [pw, y0]];\n                currentPolygon.xmin = Math.min(0, pw);\n                currentPolygon.xmax = Math.max(0, pw);\n                currentPolygon.ymin = Math.min(y0, y1);\n                currentPolygon.ymax = Math.max(y0, y1);\n                corners.attr('d', 'M' + (x0 - MINSELECT) + ',' + currentPolygon.ymin +\n                    'v-4h' + (2 * MINSELECT) + 'v4Z' +\n                    'M' + (x0 - MINSELECT) + ',' + (currentPolygon.ymax - 1) +\n                    'v4h' + (2 * MINSELECT) + 'v-4Z');\n            } else if(direction === 'd') {\n                // diagonal motion\n                currentPolygon = [[x0, y0], [x0, y1], [x1, y1], [x1, y0]];\n                currentPolygon.xmin = Math.min(x0, x1);\n                currentPolygon.xmax = Math.max(x0, x1);\n                currentPolygon.ymin = Math.min(y0, y1);\n                currentPolygon.ymax = Math.max(y0, y1);\n                corners.attr('d', 'M0,0Z');\n            }\n        } else if(mode === 'lasso') {\n            filterPoly.addPt([x1, y1]);\n            currentPolygon = filterPoly.filtered;\n        }\n\n        // create outline & tester\n        if(dragOptions.selectionDefs && dragOptions.selectionDefs.length) {\n            mergedPolygons = mergePolygons(dragOptions.mergedPolygons, currentPolygon, subtract);\n            currentPolygon.subtract = subtract;\n            selectionTester = multiTester(dragOptions.selectionDefs.concat([currentPolygon]));\n        } else {\n            mergedPolygons = [currentPolygon];\n            selectionTester = polygonTester(currentPolygon);\n        }\n\n        // draw selection\n        drawSelection(mergedPolygons, outlines);\n\n\n        throttle.throttle(\n            throttleID,\n            constants.SELECTDELAY,\n            function() {\n                selection = [];\n\n                var thisSelection;\n                var traceSelections = [];\n                var traceSelection;\n                for(i = 0; i < searchTraces.length; i++) {\n                    searchInfo = searchTraces[i];\n\n                    traceSelection = searchInfo._module.selectPoints(searchInfo, selectionTester);\n                    traceSelections.push(traceSelection);\n\n                    thisSelection = fillSelectionItem(traceSelection, searchInfo);\n\n                    if(selection.length) {\n                        for(var j = 0; j < thisSelection.length; j++) {\n                            selection.push(thisSelection[j]);\n                        }\n                    } else selection = thisSelection;\n                }\n\n                eventData = {points: selection};\n                updateSelectedState(gd, searchTraces, eventData);\n                fillRangeItems(eventData, currentPolygon, filterPoly);\n                dragOptions.gd.emit('plotly_selecting', eventData);\n            }\n        );\n    };\n\n    dragOptions.clickFn = function(numClicks, evt) {\n        var clickmode = fullLayout.clickmode;\n\n        corners.remove();\n\n        throttle.done(throttleID).then(function() {\n            throttle.clear(throttleID);\n            if(numClicks === 2) {\n                // clear selection on doubleclick\n                outlines.remove();\n                for(i = 0; i < searchTraces.length; i++) {\n                    searchInfo = searchTraces[i];\n                    searchInfo._module.selectPoints(searchInfo, false);\n                }\n\n                updateSelectedState(gd, searchTraces);\n\n                clearSelectionsCache(dragOptions);\n\n                gd.emit('plotly_deselect', null);\n            } else {\n                if(clickmode.indexOf('select') > -1) {\n                    selectOnClick(evt, gd, dragOptions.xaxes, dragOptions.yaxes,\n                      dragOptions.subplot, dragOptions, outlines);\n                }\n\n                if(clickmode === 'event') {\n                    // TODO: remove in v2 - this was probably never intended to work as it does,\n                    // but in case anyone depends on it we don't want to break it now.\n                    // Note that click-to-select introduced pre v2 also emitts proper\n                    // event data when clickmode is having 'select' in its flag list.\n                    gd.emit('plotly_selected', undefined);\n                }\n            }\n\n            Fx.click(gd, evt);\n        }).catch(Lib.error);\n    };\n\n    dragOptions.doneFn = function() {\n        corners.remove();\n\n        throttle.done(throttleID).then(function() {\n            throttle.clear(throttleID);\n            dragOptions.gd.emit('plotly_selected', eventData);\n\n            if(currentPolygon && dragOptions.selectionDefs) {\n                // save last polygons\n                currentPolygon.subtract = subtract;\n                dragOptions.selectionDefs.push(currentPolygon);\n\n                // we have to keep reference to arrays container\n                dragOptions.mergedPolygons.length = 0;\n                [].push.apply(dragOptions.mergedPolygons, mergedPolygons);\n            }\n\n            if(dragOptions.doneFnCompleted) {\n                dragOptions.doneFnCompleted(selection);\n            }\n        }).catch(Lib.error);\n    };\n}\n\nfunction selectOnClick(evt, gd, xAxes, yAxes, subplot, dragOptions, polygonOutlines) {\n    var hoverData = gd._hoverdata;\n    var clickmode = gd._fullLayout.clickmode;\n    var sendEvents = clickmode.indexOf('event') > -1;\n    var selection = [];\n    var searchTraces, searchInfo, currentSelectionDef, selectionTester, traceSelection;\n    var thisTracesSelection, pointOrBinSelected, subtract, eventData, i;\n\n    if(isHoverDataSet(hoverData)) {\n        coerceSelectionsCache(evt, gd, dragOptions);\n        searchTraces = determineSearchTraces(gd, xAxes, yAxes, subplot);\n        var clickedPtInfo = extractClickedPtInfo(hoverData, searchTraces);\n        var isBinnedTrace = clickedPtInfo.pointNumbers.length > 0;\n\n\n        // Note: potentially costly operation isPointOrBinSelected is\n        // called as late as possible through the use of an assignment\n        // in an if condition.\n        if(isBinnedTrace ?\n            isOnlyThisBinSelected(searchTraces, clickedPtInfo) :\n            isOnlyOnePointSelected(searchTraces) &&\n                (pointOrBinSelected = isPointOrBinSelected(clickedPtInfo))) {\n            if(polygonOutlines) polygonOutlines.remove();\n            for(i = 0; i < searchTraces.length; i++) {\n                searchInfo = searchTraces[i];\n                searchInfo._module.selectPoints(searchInfo, false);\n            }\n\n            updateSelectedState(gd, searchTraces);\n\n            clearSelectionsCache(dragOptions);\n\n            if(sendEvents) {\n                gd.emit('plotly_deselect', null);\n            }\n        } else {\n            subtract = evt.shiftKey &&\n              (pointOrBinSelected !== undefined ?\n                pointOrBinSelected :\n                isPointOrBinSelected(clickedPtInfo));\n            currentSelectionDef = newPointSelectionDef(clickedPtInfo.pointNumber, clickedPtInfo.searchInfo, subtract);\n\n            var allSelectionDefs = dragOptions.selectionDefs.concat([currentSelectionDef]);\n            selectionTester = multiTester(allSelectionDefs);\n\n            for(i = 0; i < searchTraces.length; i++) {\n                traceSelection = searchTraces[i]._module.selectPoints(searchTraces[i], selectionTester);\n                thisTracesSelection = fillSelectionItem(traceSelection, searchTraces[i]);\n\n                if(selection.length) {\n                    for(var j = 0; j < thisTracesSelection.length; j++) {\n                        selection.push(thisTracesSelection[j]);\n                    }\n                } else selection = thisTracesSelection;\n            }\n\n            eventData = {points: selection};\n            updateSelectedState(gd, searchTraces, eventData);\n\n            if(currentSelectionDef && dragOptions) {\n                dragOptions.selectionDefs.push(currentSelectionDef);\n            }\n\n            if(polygonOutlines) drawSelection(dragOptions.mergedPolygons, polygonOutlines);\n\n            if(sendEvents) {\n                gd.emit('plotly_selected', eventData);\n            }\n        }\n    }\n}\n\n/**\n * Constructs a new point selection definition object.\n */\nfunction newPointSelectionDef(pointNumber, searchInfo, subtract) {\n    return {\n        pointNumber: pointNumber,\n        searchInfo: searchInfo,\n        subtract: subtract\n    };\n}\n\nfunction isPointSelectionDef(o) {\n    return 'pointNumber' in o && 'searchInfo' in o;\n}\n\n/*\n * Constructs a new point number tester.\n */\nfunction newPointNumTester(pointSelectionDef) {\n    return {\n        xmin: 0,\n        xmax: 0,\n        ymin: 0,\n        ymax: 0,\n        pts: [],\n        contains: function(pt, omitFirstEdge, pointNumber, searchInfo) {\n            var idxWantedTrace = pointSelectionDef.searchInfo.cd[0].trace._expandedIndex;\n            var idxActualTrace = searchInfo.cd[0].trace._expandedIndex;\n            return idxActualTrace === idxWantedTrace &&\n              pointNumber === pointSelectionDef.pointNumber;\n        },\n        isRect: false,\n        degenerate: false,\n        subtract: pointSelectionDef.subtract\n    };\n}\n\n/**\n * Wraps multiple selection testers.\n *\n * @param {Array} list - An array of selection testers.\n *\n * @return a selection tester object with a contains function\n * that can be called to evaluate a point against all wrapped\n * selection testers that were passed in list.\n */\nfunction multiTester(list) {\n    var testers = [];\n    var xmin = isPointSelectionDef(list[0]) ? 0 : list[0][0][0];\n    var xmax = xmin;\n    var ymin = isPointSelectionDef(list[0]) ? 0 : list[0][0][1];\n    var ymax = ymin;\n\n    for(var i = 0; i < list.length; i++) {\n        if(isPointSelectionDef(list[i])) {\n            testers.push(newPointNumTester(list[i]));\n        } else {\n            var tester = polygon.tester(list[i]);\n            tester.subtract = list[i].subtract;\n            testers.push(tester);\n            xmin = Math.min(xmin, tester.xmin);\n            xmax = Math.max(xmax, tester.xmax);\n            ymin = Math.min(ymin, tester.ymin);\n            ymax = Math.max(ymax, tester.ymax);\n        }\n    }\n\n    /**\n     * Tests if the given point is within this tester.\n     *\n     * @param {Array} pt - [0] is the x coordinate, [1] is the y coordinate of the point.\n     * @param {*} arg - An optional parameter to pass down to wrapped testers.\n     * @param {number} pointNumber - The point number of the point within the underlying data array.\n     * @param {number} searchInfo - An object identifying the trace the point is contained in.\n     *\n     * @return {boolean} true if point is considered to be selected, false otherwise.\n     */\n    function contains(pt, arg, pointNumber, searchInfo) {\n        var contained = false;\n        for(var i = 0; i < testers.length; i++) {\n            if(testers[i].contains(pt, arg, pointNumber, searchInfo)) {\n                // if contained by subtract tester - exclude the point\n                contained = testers[i].subtract === false;\n            }\n        }\n\n        return contained;\n    }\n\n    return {\n        xmin: xmin,\n        xmax: xmax,\n        ymin: ymin,\n        ymax: ymax,\n        pts: [],\n        contains: contains,\n        isRect: false,\n        degenerate: false\n    };\n}\n\nfunction coerceSelectionsCache(evt, gd, dragOptions) {\n    var fullLayout = gd._fullLayout;\n    var plotinfo = dragOptions.plotinfo;\n\n    var selectingOnSameSubplot = (\n        fullLayout._lastSelectedSubplot &&\n        fullLayout._lastSelectedSubplot === plotinfo.id\n    );\n    var hasModifierKey = evt.shiftKey || evt.altKey;\n\n    if(selectingOnSameSubplot && hasModifierKey &&\n      (plotinfo.selection && plotinfo.selection.selectionDefs) && !dragOptions.selectionDefs) {\n        // take over selection definitions from prev mode, if any\n        dragOptions.selectionDefs = plotinfo.selection.selectionDefs;\n        dragOptions.mergedPolygons = plotinfo.selection.mergedPolygons;\n    } else if(!hasModifierKey || !plotinfo.selection) {\n        clearSelectionsCache(dragOptions);\n    }\n\n    // clear selection outline when selecting a different subplot\n    if(!selectingOnSameSubplot) {\n        clearSelect(gd);\n        fullLayout._lastSelectedSubplot = plotinfo.id;\n    }\n}\n\nfunction clearSelectionsCache(dragOptions) {\n    var plotinfo = dragOptions.plotinfo;\n\n    plotinfo.selection = {};\n    plotinfo.selection.selectionDefs = dragOptions.selectionDefs = [];\n    plotinfo.selection.mergedPolygons = dragOptions.mergedPolygons = [];\n}\n\nfunction determineSearchTraces(gd, xAxes, yAxes, subplot) {\n    var searchTraces = [];\n    var xAxisIds = xAxes.map(getAxId);\n    var yAxisIds = yAxes.map(getAxId);\n    var cd, trace, i;\n\n    for(i = 0; i < gd.calcdata.length; i++) {\n        cd = gd.calcdata[i];\n        trace = cd[0].trace;\n\n        if(trace.visible !== true || !trace._module || !trace._module.selectPoints) continue;\n\n        if(subplot && (trace.subplot === subplot || trace.geo === subplot)) {\n            searchTraces.push(createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]));\n        } else if(\n          trace.type === 'splom' &&\n          // FIXME: make sure we don't have more than single axis for splom\n          trace._xaxes[xAxisIds[0]] && trace._yaxes[yAxisIds[0]]\n        ) {\n            var info = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);\n            info.scene = gd._fullLayout._splomScenes[trace.uid];\n            searchTraces.push(info);\n        } else if(\n          trace.type === 'sankey'\n        ) {\n            var sankeyInfo = createSearchInfo(trace._module, cd, xAxes[0], yAxes[0]);\n            searchTraces.push(sankeyInfo);\n        } else {\n            if(xAxisIds.indexOf(trace.xaxis) === -1) continue;\n            if(yAxisIds.indexOf(trace.yaxis) === -1) continue;\n\n            searchTraces.push(createSearchInfo(trace._module, cd,\n              getFromId(gd, trace.xaxis), getFromId(gd, trace.yaxis)));\n        }\n    }\n\n    return searchTraces;\n\n    function createSearchInfo(module, calcData, xaxis, yaxis) {\n        return {\n            _module: module,\n            cd: calcData,\n            xaxis: xaxis,\n            yaxis: yaxis\n        };\n    }\n}\n\nfunction drawSelection(polygons, outlines) {\n    var paths = [];\n    var i, d;\n\n    for(i = 0; i < polygons.length; i++) {\n        var ppts = polygons[i];\n        paths.push(ppts.join('L') + 'L' + ppts[0]);\n    }\n\n    d = polygons.length > 0 ?\n      'M' + paths.join('M') + 'Z' :\n      'M0,0Z';\n    outlines.attr('d', d);\n}\n\nfunction isHoverDataSet(hoverData) {\n    return hoverData &&\n      Array.isArray(hoverData) &&\n      hoverData[0].hoverOnBox !== true;\n}\n\nfunction extractClickedPtInfo(hoverData, searchTraces) {\n    var hoverDatum = hoverData[0];\n    var pointNumber = -1;\n    var pointNumbers = [];\n    var searchInfo, i;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        if(hoverDatum.fullData._expandedIndex === searchInfo.cd[0].trace._expandedIndex) {\n            // Special case for box (and violin)\n            if(hoverDatum.hoverOnBox === true) {\n                break;\n            }\n\n            // Hint: in some traces like histogram, one graphical element\n            // doesn't correspond to one particular data point, but to\n            // bins of data points. Thus, hoverDatum can have a binNumber\n            // property instead of pointNumber.\n            if(hoverDatum.pointNumber !== undefined) {\n                pointNumber = hoverDatum.pointNumber;\n            } else if(hoverDatum.binNumber !== undefined) {\n                pointNumber = hoverDatum.binNumber;\n                pointNumbers = hoverDatum.pointNumbers;\n            }\n\n            break;\n        }\n    }\n\n    return {\n        pointNumber: pointNumber,\n        pointNumbers: pointNumbers,\n        searchInfo: searchInfo\n    };\n}\n\nfunction isPointOrBinSelected(clickedPtInfo) {\n    var trace = clickedPtInfo.searchInfo.cd[0].trace;\n    var ptNum = clickedPtInfo.pointNumber;\n    var ptNums = clickedPtInfo.pointNumbers;\n    var ptNumsSet = ptNums.length > 0;\n\n    // When pointsNumbers is set (e.g. histogram's binning),\n    // it is assumed that when the first point of\n    // a bin is selected, all others are as well\n    var ptNumToTest = ptNumsSet ? ptNums[0] : ptNum;\n\n    // TODO potential performance improvement\n    // Primarily we need this function to determine if a click adds\n    // or subtracts from a selection.\n    // In cases `trace.selectedpoints` is a huge array, indexOf\n    // might be slow. One remedy would be to introduce a hash somewhere.\n    return trace.selectedpoints ? trace.selectedpoints.indexOf(ptNumToTest) > -1 : false;\n}\n\nfunction isOnlyThisBinSelected(searchTraces, clickedPtInfo) {\n    var tracesWithSelectedPts = [];\n    var searchInfo, trace, isSameTrace, i;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        if(searchInfo.cd[0].trace.selectedpoints && searchInfo.cd[0].trace.selectedpoints.length > 0) {\n            tracesWithSelectedPts.push(searchInfo);\n        }\n    }\n\n    if(tracesWithSelectedPts.length === 1) {\n        isSameTrace = tracesWithSelectedPts[0] === clickedPtInfo.searchInfo;\n        if(isSameTrace) {\n            trace = clickedPtInfo.searchInfo.cd[0].trace;\n            if(trace.selectedpoints.length === clickedPtInfo.pointNumbers.length) {\n                for(i = 0; i < clickedPtInfo.pointNumbers.length; i++) {\n                    if(trace.selectedpoints.indexOf(clickedPtInfo.pointNumbers[i]) < 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nfunction isOnlyOnePointSelected(searchTraces) {\n    var len = 0;\n    var searchInfo, trace, i;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        trace = searchInfo.cd[0].trace;\n        if(trace.selectedpoints) {\n            if(trace.selectedpoints.length > 1) return false;\n\n            len += trace.selectedpoints.length;\n            if(len > 1) return false;\n        }\n    }\n\n    return len === 1;\n}\n\nfunction updateSelectedState(gd, searchTraces, eventData) {\n    var i, searchInfo, cd, trace;\n\n    // before anything else, update preGUI if necessary\n    for(i = 0; i < searchTraces.length; i++) {\n        var fullInputTrace = searchTraces[i].cd[0].trace._fullInput;\n        var tracePreGUI = gd._fullLayout._tracePreGUI[fullInputTrace.uid] || {};\n        if(tracePreGUI.selectedpoints === undefined) {\n            tracePreGUI.selectedpoints = fullInputTrace._input.selectedpoints || null;\n        }\n    }\n\n    if(eventData) {\n        var pts = eventData.points || [];\n\n        for(i = 0; i < searchTraces.length; i++) {\n            trace = searchTraces[i].cd[0].trace;\n            trace._input.selectedpoints = trace._fullInput.selectedpoints = [];\n            if(trace._fullInput !== trace) trace.selectedpoints = [];\n        }\n\n        for(i = 0; i < pts.length; i++) {\n            var pt = pts[i];\n            var data = pt.data;\n            var fullData = pt.fullData;\n\n            if(pt.pointIndices) {\n                [].push.apply(data.selectedpoints, pt.pointIndices);\n                if(trace._fullInput !== trace) {\n                    [].push.apply(fullData.selectedpoints, pt.pointIndices);\n                }\n            } else {\n                data.selectedpoints.push(pt.pointIndex);\n                if(trace._fullInput !== trace) {\n                    fullData.selectedpoints.push(pt.pointIndex);\n                }\n            }\n        }\n    } else {\n        for(i = 0; i < searchTraces.length; i++) {\n            trace = searchTraces[i].cd[0].trace;\n            delete trace.selectedpoints;\n            delete trace._input.selectedpoints;\n            if(trace._fullInput !== trace) {\n                delete trace._fullInput.selectedpoints;\n            }\n        }\n    }\n\n    var hasRegl = false;\n\n    for(i = 0; i < searchTraces.length; i++) {\n        searchInfo = searchTraces[i];\n        cd = searchInfo.cd;\n        trace = cd[0].trace;\n\n        if(Registry.traceIs(trace, 'regl')) {\n            hasRegl = true;\n        }\n\n        var _module = searchInfo._module;\n        var fn = _module.styleOnSelect || _module.style;\n        if(fn) {\n            fn(gd, cd, cd[0].node3);\n            if(cd[0].nodeRangePlot3) fn(gd, cd, cd[0].nodeRangePlot3);\n        }\n    }\n\n    if(hasRegl) {\n        clearGlCanvases(gd);\n        redrawReglTraces(gd);\n    }\n}\n\nfunction mergePolygons(list, poly, subtract) {\n    var res;\n\n    if(subtract) {\n        res = polybool.difference({\n            regions: list,\n            inverted: false\n        }, {\n            regions: [poly],\n            inverted: false\n        });\n\n        return res.regions;\n    }\n\n    res = polybool.union({\n        regions: list,\n        inverted: false\n    }, {\n        regions: [poly],\n        inverted: false\n    });\n\n    return res.regions;\n}\n\nfunction fillSelectionItem(selection, searchInfo) {\n    if(Array.isArray(selection)) {\n        var cd = searchInfo.cd;\n        var trace = searchInfo.cd[0].trace;\n\n        for(var i = 0; i < selection.length; i++) {\n            selection[i] = makeEventData(selection[i], trace, cd);\n        }\n    }\n\n    return selection;\n}\n\n// until we get around to persistent selections, remove the outline\n// here. The selection itself will be removed when the plot redraws\n// at the end.\nfunction clearSelect(gd) {\n    var fullLayout = gd._fullLayout || {};\n    var zoomlayer = fullLayout._zoomlayer;\n    if(zoomlayer) {\n        zoomlayer.selectAll('.select-outline').remove();\n    }\n}\n\nmodule.exports = {\n    prepSelect: prepSelect,\n    clearSelect: clearSelect,\n    selectOnClick: selectOnClick\n};\n"]},"metadata":{},"sourceType":"script"}