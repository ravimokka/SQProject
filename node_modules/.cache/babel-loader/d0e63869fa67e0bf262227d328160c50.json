{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../lib');\n\nvar Template = require('../plot_api/plot_template');\n/** Convenience wrapper for making array container logic DRY and consistent\n *\n * @param {object} parentObjIn\n *  user input object where the container in question is linked\n *  (i.e. either a user trace object or the user layout object)\n *\n * @param {object} parentObjOut\n *  full object where the coerced container will be linked\n *  (i.e. either a full trace object or the full layout object)\n *\n * @param {object} opts\n *  options object:\n *   - name {string}\n *      name of the key linking the container in question\n *   - inclusionAttr {string}\n *      name of the item attribute for inclusion/exclusion. Default is 'visible'.\n *      Since inclusion is true, use eg 'enabled' instead of 'disabled'.\n *   - handleItemDefaults {function}\n *      defaults method to be called on each item in the array container in question\n *\n *      Its arguments are:\n *          - itemIn {object} item in user layout\n *          - itemOut {object} item in full layout\n *          - parentObj {object} (as in closure)\n *          - opts {object} (as in closure)\n * N.B.\n *\n *  - opts is passed to handleItemDefaults so it can also store\n *    links to supplementary data (e.g. fullData for layout components)\n *\n */\n\n\nmodule.exports = function handleArrayContainerDefaults(parentObjIn, parentObjOut, opts) {\n  var name = opts.name;\n  var inclusionAttr = opts.inclusionAttr || 'visible';\n  var previousContOut = parentObjOut[name];\n  var contIn = Lib.isArrayOrTypedArray(parentObjIn[name]) ? parentObjIn[name] : [];\n  var contOut = parentObjOut[name] = [];\n  var templater = Template.arrayTemplater(parentObjOut, name, inclusionAttr);\n  var i, itemOut;\n\n  for (i = 0; i < contIn.length; i++) {\n    var itemIn = contIn[i];\n\n    if (!Lib.isPlainObject(itemIn)) {\n      itemOut = templater.newItem({});\n      itemOut[inclusionAttr] = false;\n    } else {\n      itemOut = templater.newItem(itemIn);\n    }\n\n    itemOut._index = i;\n\n    if (itemOut[inclusionAttr] !== false) {\n      opts.handleItemDefaults(itemIn, itemOut, parentObjOut, opts);\n    }\n\n    contOut.push(itemOut);\n  }\n\n  var defaultItems = templater.defaultItems();\n\n  for (i = 0; i < defaultItems.length; i++) {\n    itemOut = defaultItems[i];\n    itemOut._index = contOut.length;\n    opts.handleItemDefaults({}, itemOut, parentObjOut, opts, {});\n    contOut.push(itemOut);\n  } // in case this array gets its defaults rebuilt independent of the whole layout,\n  // relink the private keys just for this array.\n\n\n  if (Lib.isArrayOrTypedArray(previousContOut)) {\n    var len = Math.min(previousContOut.length, contOut.length);\n\n    for (i = 0; i < len; i++) {\n      Lib.relinkPrivateKeys(contOut[i], previousContOut[i]);\n    }\n  }\n\n  return contOut;\n};","map":null,"metadata":{},"sourceType":"script"}