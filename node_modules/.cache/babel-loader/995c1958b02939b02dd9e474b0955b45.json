{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar histogram2dCalc = require('../histogram2d/calc');\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar convertColumnData = require('./convert_column_xyz');\n\nvar clean2dArray = require('./clean_2d_array');\n\nvar interp2d = require('./interp2d');\n\nvar findEmpties = require('./find_empties');\n\nvar makeBoundArray = require('./make_bound_array');\n\nmodule.exports = function calc(gd, trace) {\n  // prepare the raw data\n  // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var isContour = Registry.traceIs(trace, 'contour');\n  var isHist = Registry.traceIs(trace, 'histogram');\n  var isGL2D = Registry.traceIs(trace, 'gl2d');\n  var zsmooth = isContour ? 'best' : trace.zsmooth;\n  var x;\n  var x0;\n  var dx;\n  var y;\n  var y0;\n  var dy;\n  var z;\n  var i;\n  var binned; // cancel minimum tick spacings (only applies to bars and boxes)\n\n  xa._minDtick = 0;\n  ya._minDtick = 0;\n\n  if (isHist) {\n    binned = histogram2dCalc(gd, trace);\n    x = binned.x;\n    x0 = binned.x0;\n    dx = binned.dx;\n    y = binned.y;\n    y0 = binned.y0;\n    dy = binned.dy;\n    z = binned.z;\n  } else {\n    var zIn = trace.z;\n\n    if (Lib.isArray1D(zIn)) {\n      convertColumnData(trace, xa, ya, 'x', 'y', ['z']);\n      x = trace._x;\n      y = trace._y;\n      zIn = trace._z;\n    } else {\n      x = trace._x = trace.x ? xa.makeCalcdata(trace, 'x') : [];\n      y = trace._y = trace.y ? ya.makeCalcdata(trace, 'y') : [];\n    }\n\n    x0 = trace.x0;\n    dx = trace.dx;\n    y0 = trace.y0;\n    dy = trace.dy;\n    z = clean2dArray(zIn, trace, xa, ya);\n\n    if (isContour || trace.connectgaps) {\n      trace._emptypoints = findEmpties(z);\n      interp2d(z, trace._emptypoints);\n    }\n  }\n\n  function noZsmooth(msg) {\n    zsmooth = trace._input.zsmooth = trace.zsmooth = false;\n    Lib.warn('cannot use zsmooth: \"fast\": ' + msg);\n  } // check whether we really can smooth (ie all boxes are about the same size)\n\n\n  if (zsmooth === 'fast') {\n    if (xa.type === 'log' || ya.type === 'log') {\n      noZsmooth('log axis found');\n    } else if (!isHist) {\n      if (x.length) {\n        var avgdx = (x[x.length - 1] - x[0]) / (x.length - 1);\n        var maxErrX = Math.abs(avgdx / 100);\n\n        for (i = 0; i < x.length - 1; i++) {\n          if (Math.abs(x[i + 1] - x[i] - avgdx) > maxErrX) {\n            noZsmooth('x scale is not linear');\n            break;\n          }\n        }\n      }\n\n      if (y.length && zsmooth === 'fast') {\n        var avgdy = (y[y.length - 1] - y[0]) / (y.length - 1);\n        var maxErrY = Math.abs(avgdy / 100);\n\n        for (i = 0; i < y.length - 1; i++) {\n          if (Math.abs(y[i + 1] - y[i] - avgdy) > maxErrY) {\n            noZsmooth('y scale is not linear');\n            break;\n          }\n        }\n      }\n    }\n  } // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n\n\n  var xlen = Lib.maxRowLength(z);\n  var xIn = trace.xtype === 'scaled' ? '' : x;\n  var xArray = makeBoundArray(trace, xIn, x0, dx, xlen, xa);\n  var yIn = trace.ytype === 'scaled' ? '' : y;\n  var yArray = makeBoundArray(trace, yIn, y0, dy, z.length, ya); // handled in gl2d convert step\n\n  if (!isGL2D) {\n    trace._extremes[xa._id] = Axes.findExtremes(xa, xArray);\n    trace._extremes[ya._id] = Axes.findExtremes(ya, yArray);\n  }\n\n  var cd0 = {\n    x: xArray,\n    y: yArray,\n    z: z,\n    text: trace._text || trace.text,\n    hovertext: trace._hovertext || trace.hovertext\n  };\n  if (xIn && xIn.length === xArray.length - 1) cd0.xCenter = xIn;\n  if (yIn && yIn.length === yArray.length - 1) cd0.yCenter = yIn;\n\n  if (isHist) {\n    cd0.xRanges = binned.xRanges;\n    cd0.yRanges = binned.yRanges;\n    cd0.pts = binned.pts;\n  }\n\n  if (!isContour) {\n    colorscaleCalc(gd, trace, {\n      vals: z,\n      cLetter: 'z'\n    });\n  }\n\n  if (isContour && trace.contours && trace.contours.coloring === 'heatmap') {\n    var dummyTrace = {\n      type: trace.type === 'contour' ? 'heatmap' : 'histogram2d',\n      xcalendar: trace.xcalendar,\n      ycalendar: trace.ycalendar\n    };\n    cd0.xfill = makeBoundArray(dummyTrace, xIn, x0, dx, xlen, xa);\n    cd0.yfill = makeBoundArray(dummyTrace, yIn, y0, dy, z.length, ya);\n  }\n\n  return [cd0];\n};","map":null,"metadata":{},"sourceType":"script"}