{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as _ from 'lodash';\nimport { degreeToRadian } from '../utils/PolarUtils';\n\nfunction setPolarCoord(chart, coord) {\n  var newCoord = {};\n\n  if (coord.radius && (coord.radius < 0 || coord.radius > 1) || coord.innerRadius && (coord.innerRadius < 0 || coord.innerRadius > 1)) {\n    throw new Error('please set correct radius or innerRadius');\n  }\n\n  if (coord.radius) {\n    newCoord = __assign({}, newCoord, {\n      radius: coord.radius\n    });\n  }\n\n  if (coord.innerRadius) {\n    newCoord = __assign({}, newCoord, {\n      innerRadius: coord.innerRadius\n    });\n  }\n\n  if (coord.startAngle || coord.endAngle) {\n    if (coord.startAngle && (coord.startAngle < -360 || coord.startAngle > 360)) {\n      throw new Error('please set correct starAngle');\n    } else {\n      newCoord = __assign({}, newCoord, {\n        startAngle: degreeToRadian(coord.startAngle)\n      });\n    }\n\n    if (coord.endAngle && (coord.endAngle < -360 || coord.endAngle > 360)) {\n      throw new Error('please set correct endAngle');\n    } else {\n      newCoord = __assign({}, newCoord, {\n        endAngle: degreeToRadian(coord.endAngle)\n      });\n    }\n  }\n\n  var polarCoord = chart.coord(coord.type, __assign({}, newCoord));\n\n  switch (coord.direction) {\n    case 'rotate':\n      polarCoord.transpose();\n      break;\n\n    case 'xReverse':\n      polarCoord.reflect('x');\n      break;\n\n    case 'yReverse':\n      polarCoord.reflect('y');\n      break;\n\n    case 'reverse':\n      polarCoord.reflect();\n      break;\n\n    default:\n      break;\n  }\n\n  if (coord.rotate) {\n    polarCoord.rotate(coord.rotate);\n  }\n\n  return polarCoord;\n}\n\nfunction setRectCoord(chart, coord) {\n  if (!coord.direction) {\n    return chart.coord('rect');\n  }\n\n  switch (coord.direction) {\n    case 'BL':\n      chart.coord('rect');\n      break;\n\n    case 'BR':\n      chart.coord('rect').scale(-1, 1);\n      break;\n\n    case 'LT':\n      chart.coord('rect').transpose().scale(1, -1);\n      break;\n\n    case 'LB':\n      chart.coord('rect').transpose();\n      break;\n\n    case 'RB':\n      chart.coord('rect').transpose().reflect();\n      break;\n\n    case 'RT':\n      chart.coord('rect').transpose().reflect().scale(-1, 1);\n      break;\n\n    case 'TL':\n      chart.coord('rect').reflect();\n      break;\n\n    case 'TR':\n      chart.coord('rect').reflect().scale(-1, 1);\n      break;\n\n    default:\n      chart.coord('rect');\n      break;\n  }\n\n  return chart;\n}\n\nexport var process = function (chart, config) {\n  var cCoord = _.cloneDeep(config.coord);\n\n  if (!cCoord || !cCoord.type) {\n    return chart.coord('rect');\n  }\n\n  var type = cCoord.type;\n\n  if (type === 'polar' || type === 'theta' || type === 'helix') {\n    return setPolarCoord(chart, cCoord);\n  }\n\n  if (type === 'rect') {\n    return setRectCoord(chart, cCoord);\n  }\n\n  return chart.coord(type);\n};","map":null,"metadata":{},"sourceType":"module"}