{"ast":null,"code":"import _classCallCheck from\"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{Link,Switch,Route}from\"react-router-dom\";import{Row,Col,Card,Button,Layout,Input,Menu,Breadcrumb,Icon,Tree,Checkbox,Modal,Select,Form}from'antd';import AllCharts from'./AllCharts';import LineChart from'./LineChart';import BarChart from'./BarChart';import VerticalChart from'./VerticalChart';import GroupBarChart from'./GroupBarChart';import DonutChart from'./DonutChart';import PieChart from'./PieChart';import MixedChart from'./MixedChart';import AreaChart from'./AreaChart';var Option=Select.Option;var ChartDashboard=/*#__PURE__*/function(_React$Component){_inherits(ChartDashboard,_React$Component);function ChartDashboard(props){var _this;_classCallCheck(this,ChartDashboard);_this=_possibleConstructorReturn(this,_getPrototypeOf(ChartDashboard).call(this,props));_this.showModal=function(){_this.setState({visible:true});};_this.handleOk=function(){_this.setState({loading:true});_this.setState({ModalText:'The modal will be closed after two seconds',confirmLoading:true});setTimeout(function(){_this.setState({loading:false,visible:false,confirmLoading:false});},2000);};_this.handleCancel=function(){console.log('Clicked cancel button');_this.setState({visible:false});};_this.onChange=function(value){console.log(\"selected \".concat(value));};_this.onBlur=function(){console.log('blur');};_this.onFocus=function(){console.log('focus');};_this.onSearch=function(val){console.log('search:',val);};_this.handleSubmit=function(e){e.preventDefault();_this.props.form.validateFields(function(err,values){if(!err){var chatName=values[\"chatName\"];if(chatName=='line'){_this.setState({DashboardChart:LineChart});}if(chatName=='bar'){_this.setState({DashboardChart:BarChart});}if(chatName=='vertical'){_this.setState({DashboardChart:VerticalChart});}if(chatName=='group'){_this.setState({DashboardChart:GroupBarChart});}if(chatName=='donut'){_this.setState({DashboardChart:DonutChart});}if(chatName=='pie'){_this.setState({DashboardChart:PieChart});}if(chatName=='mixed'){_this.setState({DashboardChart:MixedChart});}if(chatName=='area'){_this.setState({DashboardChart:AreaChart});}_this.setState({visible:false});}else{console.log(e.target.value);}});};_this.state={ModalText:'Content of the modal',visible:false,confirmLoading:false,loading:false,line:false,DashboardChart:AllCharts};return _this;}_createClass(ChartDashboard,[{key:\"render\",value:function render(){var formItemLayout={labelCol:{xs:{span:24},sm:{span:8}},wrapperCol:{xs:{span:24},sm:{span:16}}};var getFieldDecorator=this.props.form.getFieldDecorator;return React.createElement(\"div\",null,React.createElement(\"div\",{className:\"page-header\"},React.createElement(Row,{type:\"flex\",justify:\"space-between\"},React.createElement(Col,null,React.createElement(\"h1\",{className:\"page-heading\"})),React.createElement(Col,null,React.createElement(\"ul\",{className:\"button-actions\"},React.createElement(\"li\",null,React.createElement(\"div\",null,React.createElement(Button,{type:\"primary\",onClick:this.showModal},\"Create Dashboard\"),React.createElement(Modal,{title:\"Add New Chart\",visible:this.state.visible,onOk:this.handleOk,confirmLoading:this.state.confirmLoading,onCancel:this.handleCancel,footer:[React.createElement(Button,{key:\"back\",onClick:this.handleCancel},\"Cancel\"),React.createElement(Button,{key:\"submit\",type:\"primary\",loading:this.state.loading,onClick:this.handleSubmit},\"Add Chart\")]},React.createElement(Form,Object.assign({},formItemLayout,{onSubmit:this.handleSubmit}),React.createElement(Form.Item,{label:\"Chart Type\"},getFieldDecorator('chatName',{rules:[{required:true,message:\"Please Select Chart type !\"}]})(React.createElement(Select,{showSearch:true,style:{width:200},placeholder:\"Select a option\",optionFilterProp:\"children\",onChange:this.onChange,onFocus:this.onFocus,onBlur:this.onBlur,onSearch:this.onSearch,filterOption:function filterOption(input,option){return option.props.children.toLowerCase().indexOf(input.toLowerCase())>=0;}},React.createElement(Option,{value:\"line\"},React.createElement(Icon,{type:\"line-chart\"}),\" Line Chart\"),React.createElement(Option,{value:\"bar\"},React.createElement(Icon,{type:\"bar-chart\"}),\" Bar Chart\"),React.createElement(Option,{value:\"vertical\"},React.createElement(Icon,{type:\"bar-chart\"}),\"VerticalBar Chart\"),React.createElement(Option,{value:\"group\"},React.createElement(Icon,{type:\"bar-chart\"}),\" GroupBar Chart\"),React.createElement(Option,{value:\"donut\"},React.createElement(Icon,{type:\"pie-chart\"}),\" Donut Chart\"),React.createElement(Option,{value:\"pie\"},React.createElement(Icon,{type:\"pie-chart\"}),\" Pie Chart\"),React.createElement(Option,{value:\"mixed\"},React.createElement(Icon,{type:\"bar-chart\"}),\" Mixed Chart\"),React.createElement(Option,{value:\"area\"},React.createElement(Icon,{type:\"area-chart\"}),\" Area Chart\")))))))),React.createElement(\"li\",null,React.createElement(\"a\",{href:\"\"},React.createElement(Button,{type:\"primary\",ghost:true},\"Save Dashboard\"))))))),React.createElement(Layout,null,React.createElement(this.state.DashboardChart,null)),\",\");}}]);return ChartDashboard;}(React.Component);var WrappedChartDashboard=Form.create()(ChartDashboard);export default WrappedChartDashboard;","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Management/ChartDashboard/ChartDashboard.js"],"names":["React","Component","Link","Switch","Route","Row","Col","Card","Button","Layout","Input","Menu","Breadcrumb","Icon","Tree","Checkbox","Modal","Select","Form","AllCharts","LineChart","BarChart","VerticalChart","GroupBarChart","DonutChart","PieChart","MixedChart","AreaChart","Option","ChartDashboard","props","showModal","setState","visible","handleOk","loading","ModalText","confirmLoading","setTimeout","handleCancel","console","log","onChange","value","onBlur","onFocus","onSearch","val","handleSubmit","e","preventDefault","form","validateFields","err","values","chatName","DashboardChart","target","state","line","formItemLayout","labelCol","xs","span","sm","wrapperCol","getFieldDecorator","rules","required","message","width","input","option","children","toLowerCase","indexOf","WrappedChartDashboard","create"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Link, Switch, Route } from \"react-router-dom\";\nimport { Row, Col, Card,\n         Button, Layout,Input,\n         Menu, Breadcrumb,\n         Icon, Tree, Checkbox,\n         Modal, Select, Form} from 'antd';\nimport AllCharts from './AllCharts';\nimport LineChart from './LineChart';\nimport BarChart from './BarChart';\nimport VerticalChart from './VerticalChart';\nimport GroupBarChart from './GroupBarChart';\nimport DonutChart from './DonutChart';\nimport PieChart from './PieChart';\nimport MixedChart from './MixedChart';\nimport AreaChart from './AreaChart';\nconst { Option } = Select;\n\n\n\n\nclass ChartDashboard extends React.Component {\n constructor(props) {\n    super(props)\n    this.state = {\n       ModalText: 'Content of the modal',\n       visible: false,\n       confirmLoading: false,\n       loading: false,\n       line:false,\n       DashboardChart:AllCharts\n\n    };\n }\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = () => {\n\n    this.setState({ loading: true });\n    this.setState({\n      ModalText: 'The modal will be closed after two seconds',\n      confirmLoading: true,\n    });\n    setTimeout(() => {\n      this.setState({\n         loading: false,\n        visible: false,\n        confirmLoading: false,\n      });\n    }, 2000);\n  };\n\n  handleCancel = () => {\n    console.log('Clicked cancel button');\n    this.setState({\n      visible: false,\n    });\n  };\n\nonChange = (value) => {\n  console.log(`selected ${value}`);\n}\n\nonBlur = () => {\n    console.log('blur');\n}\n\n\nonFocus = () => {\n  console.log('focus');\n}\n\nonSearch = (val) => {\n     console.log('search:', val);\n}\n\nhandleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        const chatName = values[\"chatName\"]\n         if (chatName == 'line') {this.setState({DashboardChart:LineChart})}\n         if (chatName == 'bar') {this.setState({DashboardChart:BarChart})}\n         if (chatName == 'vertical') {this.setState({DashboardChart:VerticalChart})}\n         if (chatName == 'group') {this.setState({DashboardChart:GroupBarChart})}\n         if (chatName == 'donut') {this.setState({DashboardChart:DonutChart})}\n         if (chatName == 'pie') {this.setState({DashboardChart:PieChart})}\n         if (chatName == 'mixed') {this.setState({DashboardChart:MixedChart})}\n         if (chatName == 'area') {this.setState({DashboardChart:AreaChart})}\n         this.setState({visible: false,});\n      }\n      else{\n            console.log(e.target.value,)\n      }\n    });\n  };\n\n\n\n  render() {\n\n      const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n\n    const { getFieldDecorator } = this.props.form;\n    return (\n\n     <div>\n              <div className=\"page-header\">\n                  <Row type=\"flex\" justify=\"space-between\">\n                    <Col>\n                      <h1 className=\"page-heading\"></h1>\n                    </Col>\n                    <Col>\n                      <ul className=\"button-actions\">\n                        <li>\n                          <div>\n                            <Button type=\"primary\" onClick={this.showModal}>\n                              Create Dashboard\n                            </Button>\n                               <Modal\n                                  title=\"Add New Chart\"\n                                  visible={this.state.visible}\n                                  onOk={this.handleOk}\n                                  confirmLoading={this.state.confirmLoading}\n                                  onCancel={this.handleCancel}\n                                  footer={[\n                                    <Button key=\"back\" onClick={this.handleCancel}>\n                                      Cancel\n                                    </Button>,\n                                    <Button key=\"submit\" type=\"primary\"\n                                       loading={this.state.loading} onClick={this.handleSubmit}>\n                                      Add Chart\n                                    </Button>,\n                                  ]}\n                                  >\n                                     <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                                       <Form.Item label=\"Chart Type\">\n                                        {getFieldDecorator('chatName', {rules:[{required: true,\n                                           message: \"Please Select Chart type !\"}]} )\n                                          (<Select\n                                            showSearch\n                                            style={{ width: 200 }}\n                                            placeholder=\"Select a option\"\n                                            optionFilterProp=\"children\"\n                                            onChange={this.onChange}\n                                            onFocus={this.onFocus}\n                                            onBlur={this.onBlur}\n                                            onSearch={this.onSearch}\n                                            filterOption={(input, option) =>\n                                              option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n                                            }\n                                          >\n                                            <Option value=\"line\"><Icon type=\"line-chart\" /> Line Chart</Option>\n                                            <Option value=\"bar\"><Icon type=\"bar-chart\" /> Bar Chart</Option>\n                                            <Option value=\"vertical\"><Icon type=\"bar-chart\" />VerticalBar Chart</Option>\n                                            <Option value=\"group\"><Icon type=\"bar-chart\" /> GroupBar Chart</Option>\n                                            <Option value=\"donut\"><Icon type=\"pie-chart\" /> Donut Chart</Option>\n                                            <Option value=\"pie\"><Icon type=\"pie-chart\" /> Pie Chart</Option>\n                                            <Option value=\"mixed\"><Icon type=\"bar-chart\" /> Mixed Chart</Option>\n                                            <Option value=\"area\"><Icon type=\"area-chart\" /> Area Chart</Option>\n                                         </Select>)}\n                                     </Form.Item>\n                                    </Form>\n\n                                </Modal>\n                          </div>\n                        </li>\n                        <li>\n                          <a href=\"\">\n                            <Button type=\"primary\" ghost>\n                              Save Dashboard\n                            </Button>\n                          </a>\n                        </li>\n                      </ul>\n                    </Col>\n                  </Row>\n                </div>\n          <Layout>\n\n               <this.state.DashboardChart/>\n\n          </Layout>,\n\n    </div>\n\n\n    );\n  }\n}\nconst WrappedChartDashboard = Form.create()(ChartDashboard);\nexport default WrappedChartDashboard;\n\n\n"]},"metadata":{},"sourceType":"module"}