{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function clean2dArray(zOld, trace, xa, ya) {\n  var rowlen, collen, getCollen, old2new, i, j;\n\n  function cleanZvalue(v) {\n    if (!isNumeric(v)) return undefined;\n    return +v;\n  }\n\n  if (trace && trace.transpose) {\n    rowlen = 0;\n\n    for (i = 0; i < zOld.length; i++) rowlen = Math.max(rowlen, zOld[i].length);\n\n    if (rowlen === 0) return false;\n\n    getCollen = function (zOld) {\n      return zOld.length;\n    };\n\n    old2new = function (zOld, i, j) {\n      return (zOld[j] || [])[i];\n    };\n  } else {\n    rowlen = zOld.length;\n\n    getCollen = function (zOld, i) {\n      return zOld[i].length;\n    };\n\n    old2new = function (zOld, i, j) {\n      return (zOld[i] || [])[j];\n    };\n  }\n\n  var padOld2new = function (zOld, i, j) {\n    if (i === BADNUM || j === BADNUM) return BADNUM;\n    return old2new(zOld, i, j);\n  };\n\n  function axisMapping(ax) {\n    if (trace && trace.type !== 'carpet' && trace.type !== 'contourcarpet' && ax && ax.type === 'category' && trace['_' + ax._id.charAt(0)].length) {\n      var axLetter = ax._id.charAt(0);\n\n      var axMapping = {};\n      var traceCategories = trace['_' + axLetter + 'CategoryMap'] || trace[axLetter];\n\n      for (i = 0; i < traceCategories.length; i++) {\n        axMapping[traceCategories[i]] = i;\n      }\n\n      return function (i) {\n        var ind = axMapping[ax._categories[i]];\n        return ind + 1 ? ind : BADNUM;\n      };\n    } else {\n      return Lib.identity;\n    }\n  }\n\n  var xMap = axisMapping(xa);\n  var yMap = axisMapping(ya);\n  if (ya && ya.type === 'category') rowlen = ya._categories.length;\n  var zNew = new Array(rowlen);\n\n  for (i = 0; i < rowlen; i++) {\n    if (xa && xa.type === 'category') {\n      collen = xa._categories.length;\n    } else {\n      collen = getCollen(zOld, i);\n    }\n\n    zNew[i] = new Array(collen);\n\n    for (j = 0; j < collen; j++) zNew[i][j] = cleanZvalue(padOld2new(zOld, yMap(i), xMap(j)));\n  }\n\n  return zNew;\n};","map":null,"metadata":{},"sourceType":"script"}