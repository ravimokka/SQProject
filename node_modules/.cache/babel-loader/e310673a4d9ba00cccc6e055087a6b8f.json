{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar attributes = require('./attributes');\n\nvar helpers = require('./helpers');\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut) {\n  handleArrayContainerDefaults(layoutIn, layoutOut, {\n    name: 'shapes',\n    handleItemDefaults: handleShapeDefaults\n  });\n};\n\nfunction handleShapeDefaults(shapeIn, shapeOut, fullLayout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(shapeIn, shapeOut, attributes, attr, dflt);\n  }\n\n  var visible = coerce('visible');\n  if (!visible) return;\n  coerce('layer');\n  coerce('opacity');\n  coerce('fillcolor');\n  coerce('line.color');\n  coerce('line.width');\n  coerce('line.dash');\n  var dfltType = shapeIn.path ? 'path' : 'rect';\n  var shapeType = coerce('type', dfltType);\n  var xSizeMode = coerce('xsizemode');\n  var ySizeMode = coerce('ysizemode'); // positioning\n\n  var axLetters = ['x', 'y'];\n\n  for (var i = 0; i < 2; i++) {\n    var axLetter = axLetters[i];\n    var attrAnchor = axLetter + 'anchor';\n    var sizeMode = axLetter === 'x' ? xSizeMode : ySizeMode;\n    var gdMock = {\n      _fullLayout: fullLayout\n    };\n    var ax;\n    var pos2r;\n    var r2pos; // xref, yref\n\n    var axRef = Axes.coerceRef(shapeIn, shapeOut, gdMock, axLetter, '', 'paper');\n\n    if (axRef !== 'paper') {\n      ax = Axes.getFromId(gdMock, axRef);\n\n      ax._shapeIndices.push(shapeOut._index);\n\n      r2pos = helpers.rangeToShapePosition(ax);\n      pos2r = helpers.shapePositionToRange(ax);\n    } else {\n      pos2r = r2pos = Lib.identity;\n    } // Coerce x0, x1, y0, y1\n\n\n    if (shapeType !== 'path') {\n      var dflt0 = 0.25;\n      var dflt1 = 0.75; // hack until V2.0 when log has regular range behavior - make it look like other\n      // ranges to send to coerce, then put it back after\n      // this is all to give reasonable default position behavior on log axes, which is\n      // a pretty unimportant edge case so we could just ignore this.\n\n      var attr0 = axLetter + '0';\n      var attr1 = axLetter + '1';\n      var in0 = shapeIn[attr0];\n      var in1 = shapeIn[attr1];\n      shapeIn[attr0] = pos2r(shapeIn[attr0], true);\n      shapeIn[attr1] = pos2r(shapeIn[attr1], true);\n\n      if (sizeMode === 'pixel') {\n        coerce(attr0, 0);\n        coerce(attr1, 10);\n      } else {\n        Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr0, dflt0);\n        Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr1, dflt1);\n      } // hack part 2\n\n\n      shapeOut[attr0] = r2pos(shapeOut[attr0]);\n      shapeOut[attr1] = r2pos(shapeOut[attr1]);\n      shapeIn[attr0] = in0;\n      shapeIn[attr1] = in1;\n    } // Coerce xanchor and yanchor\n\n\n    if (sizeMode === 'pixel') {\n      // Hack for log axis described above\n      var inAnchor = shapeIn[attrAnchor];\n      shapeIn[attrAnchor] = pos2r(shapeIn[attrAnchor], true);\n      Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attrAnchor, 0.25); // Hack part 2\n\n      shapeOut[attrAnchor] = r2pos(shapeOut[attrAnchor]);\n      shapeIn[attrAnchor] = inAnchor;\n    }\n  }\n\n  if (shapeType === 'path') {\n    coerce('path');\n  } else {\n    Lib.noneOrAll(shapeIn, shapeOut, ['x0', 'x1', 'y0', 'y1']);\n  }\n}","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/components/shapes/defaults.js"],"names":["Lib","require","Axes","handleArrayContainerDefaults","attributes","helpers","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","name","handleItemDefaults","handleShapeDefaults","shapeIn","shapeOut","fullLayout","coerce","attr","dflt","visible","dfltType","path","shapeType","xSizeMode","ySizeMode","axLetters","i","axLetter","attrAnchor","sizeMode","gdMock","_fullLayout","ax","pos2r","r2pos","axRef","coerceRef","getFromId","_shapeIndices","push","_index","rangeToShapePosition","shapePositionToRange","identity","dflt0","dflt1","attr0","attr1","in0","in1","coercePosition","inAnchor","noneOrAll"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar attributes = require('./attributes');\nvar helpers = require('./helpers');\n\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut) {\n    handleArrayContainerDefaults(layoutIn, layoutOut, {\n        name: 'shapes',\n        handleItemDefaults: handleShapeDefaults\n    });\n};\n\nfunction handleShapeDefaults(shapeIn, shapeOut, fullLayout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(shapeIn, shapeOut, attributes, attr, dflt);\n    }\n\n    var visible = coerce('visible');\n\n    if(!visible) return;\n\n    coerce('layer');\n    coerce('opacity');\n    coerce('fillcolor');\n    coerce('line.color');\n    coerce('line.width');\n    coerce('line.dash');\n\n    var dfltType = shapeIn.path ? 'path' : 'rect';\n    var shapeType = coerce('type', dfltType);\n    var xSizeMode = coerce('xsizemode');\n    var ySizeMode = coerce('ysizemode');\n\n    // positioning\n    var axLetters = ['x', 'y'];\n    for(var i = 0; i < 2; i++) {\n        var axLetter = axLetters[i];\n        var attrAnchor = axLetter + 'anchor';\n        var sizeMode = axLetter === 'x' ? xSizeMode : ySizeMode;\n        var gdMock = {_fullLayout: fullLayout};\n        var ax;\n        var pos2r;\n        var r2pos;\n\n        // xref, yref\n        var axRef = Axes.coerceRef(shapeIn, shapeOut, gdMock, axLetter, '', 'paper');\n\n        if(axRef !== 'paper') {\n            ax = Axes.getFromId(gdMock, axRef);\n            ax._shapeIndices.push(shapeOut._index);\n            r2pos = helpers.rangeToShapePosition(ax);\n            pos2r = helpers.shapePositionToRange(ax);\n        } else {\n            pos2r = r2pos = Lib.identity;\n        }\n\n        // Coerce x0, x1, y0, y1\n        if(shapeType !== 'path') {\n            var dflt0 = 0.25;\n            var dflt1 = 0.75;\n\n            // hack until V2.0 when log has regular range behavior - make it look like other\n            // ranges to send to coerce, then put it back after\n            // this is all to give reasonable default position behavior on log axes, which is\n            // a pretty unimportant edge case so we could just ignore this.\n            var attr0 = axLetter + '0';\n            var attr1 = axLetter + '1';\n            var in0 = shapeIn[attr0];\n            var in1 = shapeIn[attr1];\n            shapeIn[attr0] = pos2r(shapeIn[attr0], true);\n            shapeIn[attr1] = pos2r(shapeIn[attr1], true);\n\n            if(sizeMode === 'pixel') {\n                coerce(attr0, 0);\n                coerce(attr1, 10);\n            } else {\n                Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr0, dflt0);\n                Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attr1, dflt1);\n            }\n\n            // hack part 2\n            shapeOut[attr0] = r2pos(shapeOut[attr0]);\n            shapeOut[attr1] = r2pos(shapeOut[attr1]);\n            shapeIn[attr0] = in0;\n            shapeIn[attr1] = in1;\n        }\n\n        // Coerce xanchor and yanchor\n        if(sizeMode === 'pixel') {\n            // Hack for log axis described above\n            var inAnchor = shapeIn[attrAnchor];\n            shapeIn[attrAnchor] = pos2r(shapeIn[attrAnchor], true);\n\n            Axes.coercePosition(shapeOut, gdMock, coerce, axRef, attrAnchor, 0.25);\n\n            // Hack part 2\n            shapeOut[attrAnchor] = r2pos(shapeOut[attrAnchor]);\n            shapeIn[attrAnchor] = inAnchor;\n        }\n    }\n\n    if(shapeType === 'path') {\n        coerce('path');\n    } else {\n        Lib.noneOrAll(shapeIn, shapeOut, ['x0', 'x1', 'y0', 'y1']);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}