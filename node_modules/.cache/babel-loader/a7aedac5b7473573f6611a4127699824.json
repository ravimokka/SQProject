{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar handleSubplotDefaults = require('../subplot_defaults');\n\nvar constants = require('./constants');\n\nvar layoutAttributes = require('./layout_attributes');\n\nvar axesNames = constants.axesNames;\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: 'geo',\n    attributes: layoutAttributes,\n    handleDefaults: handleGeoDefaults,\n    partition: 'y'\n  });\n};\n\nfunction handleGeoDefaults(geoLayoutIn, geoLayoutOut, coerce) {\n  var show;\n  var resolution = coerce('resolution');\n  var scope = coerce('scope');\n  var scopeParams = constants.scopeDefaults[scope];\n  var projType = coerce('projection.type', scopeParams.projType);\n  var isAlbersUsa = geoLayoutOut._isAlbersUsa = projType === 'albers usa'; // no other scopes are allowed for 'albers usa' projection\n\n  if (isAlbersUsa) scope = geoLayoutOut.scope = 'usa';\n  var isScoped = geoLayoutOut._isScoped = scope !== 'world';\n  var isConic = geoLayoutOut._isConic = projType.indexOf('conic') !== -1;\n  geoLayoutOut._isClipped = !!constants.lonaxisSpan[projType];\n\n  for (var i = 0; i < axesNames.length; i++) {\n    var axisName = axesNames[i];\n    var dtickDflt = [30, 10][i];\n    var rangeDflt;\n\n    if (isScoped) {\n      rangeDflt = scopeParams[axisName + 'Range'];\n    } else {\n      var dfltSpans = constants[axisName + 'Span'];\n      var hSpan = (dfltSpans[projType] || dfltSpans['*']) / 2;\n      var rot = coerce('projection.rotation.' + axisName.substr(0, 3), scopeParams.projRotate[i]);\n      rangeDflt = [rot - hSpan, rot + hSpan];\n    }\n\n    coerce(axisName + '.range', rangeDflt);\n    coerce(axisName + '.tick0');\n    coerce(axisName + '.dtick', dtickDflt);\n    show = coerce(axisName + '.showgrid');\n\n    if (show) {\n      coerce(axisName + '.gridcolor');\n      coerce(axisName + '.gridwidth');\n    }\n  }\n\n  var lonRange = geoLayoutOut.lonaxis.range;\n  var latRange = geoLayoutOut.lataxis.range; // to cross antimeridian w/o ambiguity\n\n  var lon0 = lonRange[0];\n  var lon1 = lonRange[1];\n  if (lon0 > 0 && lon1 < 0) lon1 += 360;\n  var centerLon = (lon0 + lon1) / 2;\n  var projLon;\n\n  if (!isAlbersUsa) {\n    var dfltProjRotate = isScoped ? scopeParams.projRotate : [centerLon, 0, 0];\n    projLon = coerce('projection.rotation.lon', dfltProjRotate[0]);\n    coerce('projection.rotation.lat', dfltProjRotate[1]);\n    coerce('projection.rotation.roll', dfltProjRotate[2]);\n    show = coerce('showcoastlines', !isScoped);\n\n    if (show) {\n      coerce('coastlinecolor');\n      coerce('coastlinewidth');\n    }\n\n    show = coerce('showocean');\n    if (show) coerce('oceancolor');\n  }\n\n  var centerLonDflt;\n  var centerLatDflt;\n\n  if (isAlbersUsa) {\n    // 'albers usa' does not have a 'center',\n    // these values were found using via:\n    //   projection.invert([geoLayout.center.lon, geoLayoutIn.center.lat])\n    centerLonDflt = -96.6;\n    centerLatDflt = 38.7;\n  } else {\n    centerLonDflt = isScoped ? centerLon : projLon;\n    centerLatDflt = (latRange[0] + latRange[1]) / 2;\n  }\n\n  coerce('center.lon', centerLonDflt);\n  coerce('center.lat', centerLatDflt);\n\n  if (isConic) {\n    var dfltProjParallels = scopeParams.projParallels || [0, 60];\n    coerce('projection.parallels', dfltProjParallels);\n  }\n\n  coerce('projection.scale');\n  show = coerce('showland');\n  if (show) coerce('landcolor');\n  show = coerce('showlakes');\n  if (show) coerce('lakecolor');\n  show = coerce('showrivers');\n\n  if (show) {\n    coerce('rivercolor');\n    coerce('riverwidth');\n  }\n\n  show = coerce('showcountries', isScoped && scope !== 'usa');\n\n  if (show) {\n    coerce('countrycolor');\n    coerce('countrywidth');\n  }\n\n  if (scope === 'usa' || scope === 'north america' && resolution === 50) {\n    // Only works for:\n    //   USA states at 110m\n    //   USA states + Canada provinces at 50m\n    coerce('showsubunits', true);\n    coerce('subunitcolor');\n    coerce('subunitwidth');\n  }\n\n  if (!isScoped) {\n    // Does not work in non-world scopes\n    show = coerce('showframe', true);\n\n    if (show) {\n      coerce('framecolor');\n      coerce('framewidth');\n    }\n  }\n\n  coerce('bgcolor');\n}","map":null,"metadata":{},"sourceType":"script"}