{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../../lib');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar getTopojsonFeatures = require('../../lib/topojson_utils').getTopojsonFeatures;\n\nvar locationToFeature = require('../../lib/geo_location_utils').locationToFeature;\n\nvar geoJsonUtils = require('../../lib/geojson_utils');\n\nvar subTypes = require('../scatter/subtypes');\n\nvar style = require('./style');\n\nmodule.exports = function plot(gd, geo, calcData) {\n  for (var i = 0; i < calcData.length; i++) {\n    calcGeoJSON(calcData[i], geo.topojson);\n  }\n\n  function removeBADNUM(d, node) {\n    if (d.lonlat[0] === BADNUM) {\n      d3.select(node).remove();\n    }\n  }\n\n  var scatterLayer = geo.layers.frontplot.select('.scatterlayer');\n  var gTraces = Lib.makeTraceGroups(scatterLayer, calcData, 'trace scattergeo'); // TODO find a way to order the inner nodes on update\n\n  gTraces.selectAll('*').remove();\n  gTraces.each(function (calcTrace) {\n    var s = d3.select(this);\n    var trace = calcTrace[0].trace;\n\n    if (subTypes.hasLines(trace) || trace.fill !== 'none') {\n      var lineCoords = geoJsonUtils.calcTraceToLineCoords(calcTrace);\n      var lineData = trace.fill !== 'none' ? geoJsonUtils.makePolygon(lineCoords) : geoJsonUtils.makeLine(lineCoords);\n      s.selectAll('path.js-line').data([{\n        geojson: lineData,\n        trace: trace\n      }]).enter().append('path').classed('js-line', true).style('stroke-miterlimit', 2);\n    }\n\n    if (subTypes.hasMarkers(trace)) {\n      s.selectAll('path.point').data(Lib.identity).enter().append('path').classed('point', true).each(function (calcPt) {\n        removeBADNUM(calcPt, this);\n      });\n    }\n\n    if (subTypes.hasText(trace)) {\n      s.selectAll('g').data(Lib.identity).enter().append('g').append('text').each(function (calcPt) {\n        removeBADNUM(calcPt, this);\n      });\n    } // call style here within topojson request callback\n\n\n    style(gd, calcTrace);\n  });\n};\n\nfunction calcGeoJSON(calcTrace, topojson) {\n  var trace = calcTrace[0].trace;\n  if (!Array.isArray(trace.locations)) return;\n  var features = getTopojsonFeatures(trace, topojson);\n  var locationmode = trace.locationmode;\n\n  for (var i = 0; i < calcTrace.length; i++) {\n    var calcPt = calcTrace[i];\n    var feature = locationToFeature(locationmode, calcPt.loc, features);\n    calcPt.lonlat = feature ? feature.properties.ct : [BADNUM, BADNUM];\n  }\n}","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/traces/scattergeo/plot.js"],"names":["d3","require","Lib","BADNUM","getTopojsonFeatures","locationToFeature","geoJsonUtils","subTypes","style","module","exports","plot","gd","geo","calcData","i","length","calcGeoJSON","topojson","removeBADNUM","d","node","lonlat","select","remove","scatterLayer","layers","frontplot","gTraces","makeTraceGroups","selectAll","each","calcTrace","s","trace","hasLines","fill","lineCoords","calcTraceToLineCoords","lineData","makePolygon","makeLine","data","geojson","enter","append","classed","hasMarkers","identity","calcPt","hasText","Array","isArray","locations","features","locationmode","feature","loc","properties","ct"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar getTopojsonFeatures = require('../../lib/topojson_utils').getTopojsonFeatures;\nvar locationToFeature = require('../../lib/geo_location_utils').locationToFeature;\nvar geoJsonUtils = require('../../lib/geojson_utils');\nvar subTypes = require('../scatter/subtypes');\nvar style = require('./style');\n\nmodule.exports = function plot(gd, geo, calcData) {\n    for(var i = 0; i < calcData.length; i++) {\n        calcGeoJSON(calcData[i], geo.topojson);\n    }\n\n    function removeBADNUM(d, node) {\n        if(d.lonlat[0] === BADNUM) {\n            d3.select(node).remove();\n        }\n    }\n\n    var scatterLayer = geo.layers.frontplot.select('.scatterlayer');\n    var gTraces = Lib.makeTraceGroups(scatterLayer, calcData, 'trace scattergeo');\n\n    // TODO find a way to order the inner nodes on update\n    gTraces.selectAll('*').remove();\n\n    gTraces.each(function(calcTrace) {\n        var s = d3.select(this);\n        var trace = calcTrace[0].trace;\n\n        if(subTypes.hasLines(trace) || trace.fill !== 'none') {\n            var lineCoords = geoJsonUtils.calcTraceToLineCoords(calcTrace);\n\n            var lineData = (trace.fill !== 'none') ?\n                geoJsonUtils.makePolygon(lineCoords) :\n                geoJsonUtils.makeLine(lineCoords);\n\n            s.selectAll('path.js-line')\n                .data([{geojson: lineData, trace: trace}])\n              .enter().append('path')\n                .classed('js-line', true)\n                .style('stroke-miterlimit', 2);\n        }\n\n        if(subTypes.hasMarkers(trace)) {\n            s.selectAll('path.point')\n                .data(Lib.identity)\n             .enter().append('path')\n                .classed('point', true)\n                .each(function(calcPt) { removeBADNUM(calcPt, this); });\n        }\n\n        if(subTypes.hasText(trace)) {\n            s.selectAll('g')\n                .data(Lib.identity)\n              .enter().append('g')\n                .append('text')\n                .each(function(calcPt) { removeBADNUM(calcPt, this); });\n        }\n\n        // call style here within topojson request callback\n        style(gd, calcTrace);\n    });\n};\n\nfunction calcGeoJSON(calcTrace, topojson) {\n    var trace = calcTrace[0].trace;\n\n    if(!Array.isArray(trace.locations)) return;\n\n    var features = getTopojsonFeatures(trace, topojson);\n    var locationmode = trace.locationmode;\n\n    for(var i = 0; i < calcTrace.length; i++) {\n        var calcPt = calcTrace[i];\n        var feature = locationToFeature(locationmode, calcPt.loc, features);\n\n        calcPt.lonlat = feature ? feature.properties.ct : [BADNUM, BADNUM];\n    }\n}\n"]},"metadata":{},"sourceType":"script"}