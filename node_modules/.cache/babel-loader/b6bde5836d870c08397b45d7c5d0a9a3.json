{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as CustomizeUtils from '../utils/CustomizeUtils';\nvar DEFAULT_ERRORBAR_SHAPE = 'errorbar';\n\nfunction renderBarPath(points) {\n  return [['M', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['Z'], ['M', ((points[1].x || 0) + (points[2].x || 0)) / 2, ((points[1].y || 0) + (points[2].y || 0)) / 2], ['L', ((points[0].x || 0) + (points[3].x || 0)) / 2, ((points[0].y || 0) + (points[3].y || 0)) / 2], ['Z'], ['M', points[0].x, points[0].y], ['L', points[3].x, points[3].y], ['Z']];\n}\n\nexport var registerShape = function () {\n  var barWidth = 1;\n  var hasPoint = false;\n  CustomizeUtils.registerShape('schema', DEFAULT_ERRORBAR_SHAPE, {\n    getPoints: function (_a) {\n      var _b = _a.x,\n          x = _b === void 0 ? 0 : _b,\n          _c = _a.y,\n          y = _c === void 0 ? [0, 0, 0] : _c,\n          _d = _a.size,\n          size = _d === void 0 ? 0 : _d;\n      return [{\n        x: x - size / 2 * barWidth,\n        y: y[0]\n      }, {\n        x: x - size / 2 * barWidth,\n        y: y[2]\n      }, {\n        x: x + size / 2 * barWidth,\n        y: y[2]\n      }, {\n        x: x + size / 2 * barWidth,\n        y: y[0]\n      }, {\n        x: x,\n        y: y[1]\n      }, {\n        x: x - size / 2 * barWidth,\n        y: y[1]\n      }];\n    },\n    drawShape: function (cfg, group) {\n      var newGroup = group;\n      var points = cfg.points;\n      newGroup.addShape('path', {\n        attrs: __assign({\n          stroke: cfg.color,\n          strokeOpacity: cfg.opacity || 1,\n          lineWidth: cfg.style.lineWidth || 1,\n          fill: cfg.color,\n          opacity: cfg.opacity || 1,\n          path: this.parsePath(renderBarPath(points))\n        }, cfg.style)\n      });\n\n      if (hasPoint) {\n        newGroup.addShape('circle', {\n          attrs: __assign({\n            stroke: cfg.color,\n            strokeOpacity: cfg.opacity || 1,\n            lineWidth: cfg.style.lineWidth || 1,\n            fill: cfg.color,\n            opacity: cfg.opacity || 1,\n            x: this.parsePoint(points[4]).x,\n            y: this.parsePoint(points[4]).y,\n            r: cfg.style.lineWidth + 0.5 || 1.5\n          }, cfg.style)\n        });\n      }\n\n      return newGroup;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}