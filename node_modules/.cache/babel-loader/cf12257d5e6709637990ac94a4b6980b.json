{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js\";\nimport React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport { Chart, Tooltip, Axis, Legend, Coord, Guide, Pie } from 'viser-react';\n\nconst DataSet = require('@antv/data-set');\n\n{\n  /* import { Chart, Tooltip, Axis, Bar, Coord, Legend } from 'viser-react';\n  const DataSet = require('@antv/data-set');\n  const sourceData = [\n  { label: 'Amount_USD.', Actual: 2800, Budget: 2260 },\n  ];\n  const dv = new DataSet.View().source(sourceData);\n  dv.transform({\n  type: 'fold',\n  fields: ['Actual', 'Budget'],\n  key: 'type',\n  value: 'value',\n  });\n  const data = dv.rows;\n  class Reactjs extends React.Component {\n  render() {\n   return (\n     <Chart forceFit height={400} data={data}>\n       <Coord type=\"rect\" direction=\"LT\" />\n       <Tooltip />\n       <Legend />\n       <Axis dataKey=\"value\" position=\"right\" />\n       <Axis dataKey=\"label\" label={{ offset: 12 }} />\n       <Bar position=\"label*value\" color=\"type\" adjust={[{ type: 'dodge', marginRatio: 1 / 32 }]} />\n     </Chart>\n   );\n  }\n  }  */\n}\nvar tt = ['Team A', 'Team B', 'Team C'];\nconst sourceData = [{\n  count: 40\n}, {\n  count: 21\n}, {\n  count: 17\n}, {\n  count: 13\n}, {\n  count: 9\n}];\nconst scale = [{\n  dataKey: 'percent',\n  min: 0,\n  formatter: '.0%'\n}];\nconst dv = new DataSet.View().source(sourceData);\ndv.transform({\n  type: 'percent',\n  field: 'count',\n  dimension: 'item',\n  as: 'percent'\n});\nconst data = dv.rows;\n\nclass Reactjs extends React.Component {\n  render() {\n    return React.createElement(Chart, {\n      forceFit: true,\n      height: 400,\n      data: data,\n      scale: scale,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      showTitle: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Axis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      dataKey: \"item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Coord, {\n      type: \"theta\",\n      radius: 0.75,\n      innerRadius: 0.6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Pie, {\n      position: \"percent\",\n      color: \"item\",\n      style: {\n        stroke: '#fff',\n        lineWidth: 1\n      },\n      label: ['percent', {\n        formatter: (val, item) => {\n          return item.point.item + ': ' + val;\n        }\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Reactjs;","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js"],"names":["React","Component","ReactApexChart","Chart","Tooltip","Axis","Legend","Coord","Guide","Pie","DataSet","require","tt","sourceData","count","scale","dataKey","min","formatter","dv","View","source","transform","type","field","dimension","as","data","rows","Reactjs","render","stroke","lineWidth","val","item","point"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,KAAvC,EAA8CC,KAA9C,EAAqDC,GAArD,QAAgE,aAAhE;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AAEE;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BG;AAEN,IAAIC,EAAE,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,CAAT;AAGA,MAAMC,UAAU,GAAG,CACjB;AAAEC,EAAAA,KAAK,EAAE;AAAT,CADiB,EAEjB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAFiB,EAGjB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAHiB,EAIjB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAJiB,EAKjB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CALiB,CAAnB;AAQA,MAAMC,KAAK,GAAG,CAAC;AACbC,EAAAA,OAAO,EAAE,SADI;AAEbC,EAAAA,GAAG,EAAE,CAFQ;AAGbC,EAAAA,SAAS,EAAE;AAHE,CAAD,CAAd;AAMA,MAAMC,EAAE,GAAG,IAAIT,OAAO,CAACU,IAAZ,GAAmBC,MAAnB,CAA0BR,UAA1B,CAAX;AACAM,EAAE,CAACG,SAAH,CAAa;AACXC,EAAAA,IAAI,EAAE,SADK;AAEXC,EAAAA,KAAK,EAAE,OAFI;AAGXC,EAAAA,SAAS,EAAE,MAHA;AAIXC,EAAAA,EAAE,EAAE;AAJO,CAAb;AAMA,MAAMC,IAAI,GAAGR,EAAE,CAACS,IAAhB;;AACA,MAAMC,OAAN,SAAsB7B,KAAK,CAACC,SAA5B,CAAsC;AACpC6B,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD;AAAO,MAAA,QAAQ,MAAf;AAAgB,MAAA,MAAM,EAAE,GAAxB;AAA6B,MAAA,IAAI,EAAEH,IAAnC;AAAyC,MAAA,KAAK,EAAEZ,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,MAAM,EAAE,IAA5B;AAAkC,MAAA,WAAW,EAAE,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,GAAD;AAAK,MAAA,QAAQ,EAAC,SAAd;AAAwB,MAAA,KAAK,EAAC,MAA9B;AAAqC,MAAA,KAAK,EAAE;AAAEgB,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAA5C;AACE,MAAA,KAAK,EAAE,CAAC,SAAD,EAAY;AACjBd,QAAAA,SAAS,EAAE,CAACe,GAAD,EAAMC,IAAN,KAAe;AACxB,iBAAOA,IAAI,CAACC,KAAL,CAAWD,IAAX,GAAkB,IAAlB,GAAyBD,GAAhC;AACD;AAHgB,OAAZ,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAeD;;AAjBmC;;AA0BtC,eAAeJ,OAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts'\n\nimport { Chart, Tooltip, Axis, Legend, Coord, Guide, Pie } from 'viser-react';\nconst DataSet = require('@antv/data-set');\n\n  {/* import { Chart, Tooltip, Axis, Bar, Coord, Legend } from 'viser-react';\nconst DataSet = require('@antv/data-set');\n\nconst sourceData = [\n  { label: 'Amount_USD.', Actual: 2800, Budget: 2260 },\n\n];\n\nconst dv = new DataSet.View().source(sourceData);\ndv.transform({\n  type: 'fold',\n  fields: ['Actual', 'Budget'],\n  key: 'type',\n  value: 'value',\n});\nconst data = dv.rows;\n\nclass Reactjs extends React.Component {\n  render() {\n    return (\n      <Chart forceFit height={400} data={data}>\n        <Coord type=\"rect\" direction=\"LT\" />\n        <Tooltip />\n        <Legend />\n        <Axis dataKey=\"value\" position=\"right\" />\n        <Axis dataKey=\"label\" label={{ offset: 12 }} />\n        <Bar position=\"label*value\" color=\"type\" adjust={[{ type: 'dodge', marginRatio: 1 / 32 }]} />\n      </Chart>\n    );\n  }\n}  */}\n\nvar tt = ['Team A', 'Team B', 'Team C']\n\n\nconst sourceData = [\n  { count: 40 },\n  { count: 21 },\n  { count: 17 },\n  { count: 13 },\n  { count: 9 }\n];\n\nconst scale = [{\n  dataKey: 'percent',\n  min: 0,\n  formatter: '.0%',\n}];\n\nconst dv = new DataSet.View().source(sourceData);\ndv.transform({\n  type: 'percent',\n  field: 'count',\n  dimension: 'item',\n  as: 'percent'\n});\nconst data = dv.rows;\nclass Reactjs extends React.Component {\n  render() {\n    return (\n      <Chart forceFit height={400} data={data} scale={scale}>\n        <Tooltip showTitle={false} />\n        <Axis />\n        <Legend dataKey=\"item\" />\n        <Coord type=\"theta\" radius={0.75} innerRadius={0.6} />\n        <Pie position=\"percent\" color=\"item\" style={{ stroke: '#fff', lineWidth: 1 }}\n          label={['percent', {\n            formatter: (val, item) => {\n              return item.point.item + ': ' + val;\n            }\n          }]}\n        />\n      </Chart>\n    );\n  }\n}\n\n\n\n\n\n\n\nexport default Reactjs;"]},"metadata":{},"sourceType":"module"}