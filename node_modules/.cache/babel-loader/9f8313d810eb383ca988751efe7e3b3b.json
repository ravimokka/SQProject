{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nexports.init2dArray = function (rowLength, colLength) {\n  var array = new Array(rowLength);\n\n  for (var i = 0; i < rowLength; i++) array[i] = new Array(colLength);\n\n  return array;\n};\n/**\n * transpose a (possibly ragged) 2d array z. inspired by\n * http://stackoverflow.com/questions/17428587/\n * transposing-a-2d-array-in-javascript\n */\n\n\nexports.transposeRagged = function (z) {\n  var maxlen = 0;\n  var zlen = z.length;\n  var i, j; // Maximum row length:\n\n  for (i = 0; i < zlen; i++) maxlen = Math.max(maxlen, z[i].length);\n\n  var t = new Array(maxlen);\n\n  for (i = 0; i < maxlen; i++) {\n    t[i] = new Array(zlen);\n\n    for (j = 0; j < zlen; j++) t[i][j] = z[j][i];\n  }\n\n  return t;\n}; // our own dot function so that we don't need to include numeric\n\n\nexports.dot = function (x, y) {\n  if (!(x.length && y.length) || x.length !== y.length) return null;\n  var len = x.length;\n  var out;\n  var i;\n\n  if (x[0].length) {\n    // mat-vec or mat-mat\n    out = new Array(len);\n\n    for (i = 0; i < len; i++) out[i] = exports.dot(x[i], y);\n  } else if (y[0].length) {\n    // vec-mat\n    var yTranspose = exports.transposeRagged(y);\n    out = new Array(yTranspose.length);\n\n    for (i = 0; i < yTranspose.length; i++) out[i] = exports.dot(x, yTranspose[i]);\n  } else {\n    // vec-vec\n    out = 0;\n\n    for (i = 0; i < len; i++) out += x[i] * y[i];\n  }\n\n  return out;\n}; // translate by (x,y)\n\n\nexports.translationMatrix = function (x, y) {\n  return [[1, 0, x], [0, 1, y], [0, 0, 1]];\n}; // rotate by alpha around (0,0)\n\n\nexports.rotationMatrix = function (alpha) {\n  var a = alpha * Math.PI / 180;\n  return [[Math.cos(a), -Math.sin(a), 0], [Math.sin(a), Math.cos(a), 0], [0, 0, 1]];\n}; // rotate by alpha around (x,y)\n\n\nexports.rotationXYMatrix = function (a, x, y) {\n  return exports.dot(exports.dot(exports.translationMatrix(x, y), exports.rotationMatrix(a)), exports.translationMatrix(-x, -y));\n}; // applies a 2D transformation matrix to either x and y params or an [x,y] array\n\n\nexports.apply2DTransform = function (transform) {\n  return function () {\n    var args = arguments;\n\n    if (args.length === 3) {\n      args = args[0];\n    } // from map\n\n\n    var xy = arguments.length === 1 ? args[0] : [args[0], args[1]];\n    return exports.dot(transform, [xy[0], xy[1], 1]).slice(0, 2);\n  };\n}; // applies a 2D transformation matrix to an [x1,y1,x2,y2] array (to transform a segment)\n\n\nexports.apply2DTransform2 = function (transform) {\n  var at = exports.apply2DTransform(transform);\n  return function (xys) {\n    return at(xys.slice(0, 2)).concat(at(xys.slice(2, 4)));\n  };\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/lib/matrix.js"],"names":["exports","init2dArray","rowLength","colLength","array","Array","i","transposeRagged","z","maxlen","zlen","length","j","Math","max","t","dot","x","y","len","out","yTranspose","translationMatrix","rotationMatrix","alpha","a","PI","cos","sin","rotationXYMatrix","apply2DTransform","transform","args","arguments","xy","slice","apply2DTransform2","at","xys","concat"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\n\nexports.init2dArray = function(rowLength, colLength) {\n    var array = new Array(rowLength);\n    for(var i = 0; i < rowLength; i++) array[i] = new Array(colLength);\n    return array;\n};\n\n/**\n * transpose a (possibly ragged) 2d array z. inspired by\n * http://stackoverflow.com/questions/17428587/\n * transposing-a-2d-array-in-javascript\n */\nexports.transposeRagged = function(z) {\n    var maxlen = 0;\n    var zlen = z.length;\n    var i, j;\n    // Maximum row length:\n    for(i = 0; i < zlen; i++) maxlen = Math.max(maxlen, z[i].length);\n\n    var t = new Array(maxlen);\n    for(i = 0; i < maxlen; i++) {\n        t[i] = new Array(zlen);\n        for(j = 0; j < zlen; j++) t[i][j] = z[j][i];\n    }\n\n    return t;\n};\n\n// our own dot function so that we don't need to include numeric\nexports.dot = function(x, y) {\n    if(!(x.length && y.length) || x.length !== y.length) return null;\n\n    var len = x.length;\n    var out;\n    var i;\n\n    if(x[0].length) {\n        // mat-vec or mat-mat\n        out = new Array(len);\n        for(i = 0; i < len; i++) out[i] = exports.dot(x[i], y);\n    } else if(y[0].length) {\n        // vec-mat\n        var yTranspose = exports.transposeRagged(y);\n        out = new Array(yTranspose.length);\n        for(i = 0; i < yTranspose.length; i++) out[i] = exports.dot(x, yTranspose[i]);\n    } else {\n        // vec-vec\n        out = 0;\n        for(i = 0; i < len; i++) out += x[i] * y[i];\n    }\n\n    return out;\n};\n\n// translate by (x,y)\nexports.translationMatrix = function(x, y) {\n    return [[1, 0, x], [0, 1, y], [0, 0, 1]];\n};\n\n// rotate by alpha around (0,0)\nexports.rotationMatrix = function(alpha) {\n    var a = alpha * Math.PI / 180;\n    return [[Math.cos(a), -Math.sin(a), 0],\n            [Math.sin(a), Math.cos(a), 0],\n            [0, 0, 1]];\n};\n\n// rotate by alpha around (x,y)\nexports.rotationXYMatrix = function(a, x, y) {\n    return exports.dot(\n        exports.dot(exports.translationMatrix(x, y),\n                    exports.rotationMatrix(a)),\n        exports.translationMatrix(-x, -y));\n};\n\n// applies a 2D transformation matrix to either x and y params or an [x,y] array\nexports.apply2DTransform = function(transform) {\n    return function() {\n        var args = arguments;\n        if(args.length === 3) {\n            args = args[0];\n        }// from map\n        var xy = arguments.length === 1 ? args[0] : [args[0], args[1]];\n        return exports.dot(transform, [xy[0], xy[1], 1]).slice(0, 2);\n    };\n};\n\n// applies a 2D transformation matrix to an [x1,y1,x2,y2] array (to transform a segment)\nexports.apply2DTransform2 = function(transform) {\n    var at = exports.apply2DTransform(transform);\n    return function(xys) {\n        return at(xys.slice(0, 2)).concat(at(xys.slice(2, 4)));\n    };\n};\n"]},"metadata":{},"sourceType":"script"}