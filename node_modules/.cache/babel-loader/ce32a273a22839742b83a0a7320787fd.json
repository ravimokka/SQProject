{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar modModule = require('./mod');\n\nvar mod = modModule.mod;\nvar modHalf = modModule.modHalf;\nvar PI = Math.PI;\nvar twoPI = 2 * PI;\n\nfunction deg2rad(deg) {\n  return deg / 180 * PI;\n}\n\nfunction rad2deg(rad) {\n  return rad / PI * 180;\n}\n/**\n * is sector a full circle?\n * ... this comes up a lot in SVG path-drawing routines\n *\n * N.B. we consider all sectors that span more that 2pi 'full' circles\n *\n * @param {2-item array} aBnds : angular bounds in *radians*\n * @return {boolean}\n */\n\n\nfunction isFullCircle(aBnds) {\n  return Math.abs(aBnds[1] - aBnds[0]) > twoPI - 1e-14;\n}\n/**\n * angular delta between angle 'a' and 'b'\n * solution taken from: https://stackoverflow.com/a/2007279\n *\n * @param {number} a : first angle in *radians*\n * @param {number} b : second angle in *radians*\n * @return {number} angular delta in *radians*\n */\n\n\nfunction angleDelta(a, b) {\n  return modHalf(b - a, twoPI);\n}\n/**\n * angular distance between angle 'a' and 'b'\n *\n * @param {number} a : first angle in *radians*\n * @param {number} b : second angle in *radians*\n * @return {number} angular distance in *radians*\n */\n\n\nfunction angleDist(a, b) {\n  return Math.abs(angleDelta(a, b));\n}\n/**\n * is angle inside sector?\n *\n * @param {number} a : angle to test in *radians*\n * @param {2-item array} aBnds : sector's angular bounds in *radians*\n * @param {boolean}\n */\n\n\nfunction isAngleInsideSector(a, aBnds) {\n  if (isFullCircle(aBnds)) return true;\n  var s0, s1;\n\n  if (aBnds[0] < aBnds[1]) {\n    s0 = aBnds[0];\n    s1 = aBnds[1];\n  } else {\n    s0 = aBnds[1];\n    s1 = aBnds[0];\n  }\n\n  s0 = mod(s0, twoPI);\n  s1 = mod(s1, twoPI);\n  if (s0 > s1) s1 += twoPI;\n  var a0 = mod(a, twoPI);\n  var a1 = a0 + twoPI;\n  return a0 >= s0 && a0 <= s1 || a1 >= s0 && a1 <= s1;\n}\n/**\n * is pt (r,a) inside sector?\n *\n * @param {number} r : pt's radial coordinate\n * @param {number} a : pt's angular coordinate in *radians*\n * @param {2-item array} rBnds : sector's radial bounds\n * @param {2-item array} aBnds : sector's angular bounds in *radians*\n * @return {boolean}\n */\n\n\nfunction isPtInsideSector(r, a, rBnds, aBnds) {\n  if (!isAngleInsideSector(a, aBnds)) return false;\n  var r0, r1;\n\n  if (rBnds[0] < rBnds[1]) {\n    r0 = rBnds[0];\n    r1 = rBnds[1];\n  } else {\n    r0 = rBnds[1];\n    r1 = rBnds[0];\n  }\n\n  return r >= r0 && r <= r1;\n} // common to pathArc, pathSector and pathAnnulus\n\n\nfunction _path(r0, r1, a0, a1, cx, cy, isClosed) {\n  cx = cx || 0;\n  cy = cy || 0;\n  var isCircle = isFullCircle([a0, a1]);\n  var aStart, aMid, aEnd;\n  var rStart, rEnd;\n\n  if (isCircle) {\n    aStart = 0;\n    aMid = PI;\n    aEnd = twoPI;\n  } else {\n    if (a0 < a1) {\n      aStart = a0;\n      aEnd = a1;\n    } else {\n      aStart = a1;\n      aEnd = a0;\n    }\n  }\n\n  if (r0 < r1) {\n    rStart = r0;\n    rEnd = r1;\n  } else {\n    rStart = r1;\n    rEnd = r0;\n  } // N.B. svg coordinates here, where y increases downward\n\n\n  function pt(r, a) {\n    return [r * Math.cos(a) + cx, cy - r * Math.sin(a)];\n  }\n\n  var largeArc = Math.abs(aEnd - aStart) <= PI ? 0 : 1;\n\n  function arc(r, a, cw) {\n    return 'A' + [r, r] + ' ' + [0, largeArc, cw] + ' ' + pt(r, a);\n  }\n\n  var p;\n\n  if (isCircle) {\n    if (rStart === null) {\n      p = 'M' + pt(rEnd, aStart) + arc(rEnd, aMid, 0) + arc(rEnd, aEnd, 0) + 'Z';\n    } else {\n      p = 'M' + pt(rStart, aStart) + arc(rStart, aMid, 0) + arc(rStart, aEnd, 0) + 'Z' + 'M' + pt(rEnd, aStart) + arc(rEnd, aMid, 1) + arc(rEnd, aEnd, 1) + 'Z';\n    }\n  } else {\n    if (rStart === null) {\n      p = 'M' + pt(rEnd, aStart) + arc(rEnd, aEnd, 0);\n      if (isClosed) p += 'L0,0Z';\n    } else {\n      p = 'M' + pt(rStart, aStart) + 'L' + pt(rEnd, aStart) + arc(rEnd, aEnd, 0) + 'L' + pt(rStart, aEnd) + arc(rStart, aStart, 1) + 'Z';\n    }\n  }\n\n  return p;\n}\n/**\n * path an arc\n *\n * @param {number} r : radius\n * @param {number} a0 : first angular coordinate in *radians*\n * @param {number} a1 : second angular coordinate in *radians*\n * @param {number (optional)} cx : x coordinate of center\n * @param {number (optional)} cy : y coordinate of center\n * @return {string} svg path\n */\n\n\nfunction pathArc(r, a0, a1, cx, cy) {\n  return _path(null, r, a0, a1, cx, cy, 0);\n}\n/**\n * path a sector\n *\n * @param {number} r : radius\n * @param {number} a0 : first angular coordinate in *radians*\n * @param {number} a1 : second angular coordinate in *radians*\n * @param {number (optional)} cx : x coordinate of center\n * @param {number (optional)} cy : y coordinate of center\n * @return {string} svg path\n */\n\n\nfunction pathSector(r, a0, a1, cx, cy) {\n  return _path(null, r, a0, a1, cx, cy, 1);\n}\n/**\n * path an annulus\n *\n * @param {number} r0 : first radial coordinate\n * @param {number} r1 : second radial coordinate\n * @param {number} a0 : first angular coordinate in *radians*\n * @param {number} a1 : second angular coordinate in *radians*\n * @param {number (optional)} cx : x coordinate of center\n * @param {number (optional)} cy : y coordinate of center\n * @return {string} svg path\n */\n\n\nfunction pathAnnulus(r0, r1, a0, a1, cx, cy) {\n  return _path(r0, r1, a0, a1, cx, cy, 1);\n}\n\nmodule.exports = {\n  deg2rad: deg2rad,\n  rad2deg: rad2deg,\n  angleDelta: angleDelta,\n  angleDist: angleDist,\n  isFullCircle: isFullCircle,\n  isAngleInsideSector: isAngleInsideSector,\n  isPtInsideSector: isPtInsideSector,\n  pathArc: pathArc,\n  pathSector: pathSector,\n  pathAnnulus: pathAnnulus\n};","map":null,"metadata":{},"sourceType":"script"}