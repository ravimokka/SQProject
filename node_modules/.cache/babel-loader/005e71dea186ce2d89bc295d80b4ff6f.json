{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React, { cloneElement } from 'react';\nimport FloatingLabel from './FloatingLabel';\nimport UnderLine from './UnderLine';\nimport { arrowDownIconTypes, selectionsPresenterTypes } from './types';\nimport { arrowDownIconDefaultProps, selectionsPresenterDefaultProps } from './defaultProps';\nvar styles = {\n  column: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 'auto'\n  },\n  error: {\n    marginTop: 5,\n    color: 'red',\n    fontSize: 12\n  },\n  row: {\n    alignItems: 'center',\n    display: 'flex',\n    flex: 'auto',\n    justifyContent: 'flex-end',\n    position: 'relative'\n  },\n  selections: {\n    flex: 1\n  }\n};\n\nvar rotatingIconStyle = function rotatingIconStyle(isOpen) {\n  return {\n    // fill: this.context.muiTheme.textField.borderColor,\n    transform: 'rotate(' + (isOpen ? 180 : 0) + 'deg)'\n  };\n};\n\nvar ArrowDownIcon = function ArrowDownIcon(_ref) {\n  var style = _ref.style,\n      customIcon = _ref.customIcon;\n  return cloneElement(customIcon, {\n    style: style\n  });\n};\n\nArrowDownIcon.propTypes = arrowDownIconTypes;\nArrowDownIcon.defaultProps = arrowDownIconDefaultProps;\n\nvar isValidObject = function isValidObject(obj) {\n  return obj && Object.prototype.toString.call(obj) === '[object Object]' && Object.keys(obj).includes('value') && obj.value !== null;\n};\n\nSelectionsPresenter.propTypes = process.env.NODE_ENV !== \"production\" ? selectionsPresenterTypes : {};\nSelectionsPresenter.defaultProps = selectionsPresenterDefaultProps;\nexport default function SelectionsPresenter(_ref2) {\n  var disabled = _ref2.disabled,\n      dropDownIcon = _ref2.dropDownIcon,\n      errorStyle = _ref2.errorStyle,\n      errorText = _ref2.errorText,\n      floatingLabel = _ref2.floatingLabel,\n      floatingLabelFocusStyle = _ref2.floatingLabelFocusStyle,\n      floatingLabelStyle = _ref2.floatingLabelStyle,\n      hintText = _ref2.hintText,\n      isFocused = _ref2.isFocused,\n      isOpen = _ref2.isOpen,\n      muiTheme = _ref2.muiTheme,\n      selectedValues = _ref2.selectedValues,\n      selectionsRenderer = _ref2.selectionsRenderer,\n      underlineErrorStyle = _ref2.underlineErrorStyle,\n      underlineFocusStyle = _ref2.underlineFocusStyle,\n      underlineStyle = _ref2.underlineStyle;\n  var _muiTheme$textField = muiTheme.textField,\n      borderColor = _muiTheme$textField.borderColor,\n      floatingLabelColor = _muiTheme$textField.floatingLabelColor,\n      focusColor = _muiTheme$textField.focusColor; // Conditions for shrinking the floating Label\n\n  var isShrunk = !!(hintText && hintText.length) || Array.isArray(selectedValues) && (!!selectedValues.length || isFocused) || !Array.isArray(selectedValues) && (isValidObject(selectedValues) || selectedValues === null && isFocused) || isOpen;\n\n  var Error = function Error() {\n    return React.createElement('div', {\n      style: _extends({}, styles.error, errorStyle)\n    }, errorText);\n  };\n\n  return React.createElement('div', {\n    style: styles.column\n  }, React.createElement('div', {\n    style: styles.row\n  }, React.createElement('div', {\n    style: styles.selections\n  }, floatingLabel && React.createElement(FloatingLabel, {\n    defaultColors: {\n      floatingLabelColor: floatingLabelColor,\n      focusColor: focusColor\n    },\n    disabled: disabled,\n    floatingLabelFocusStyle: floatingLabelFocusStyle,\n    floatingLabelStyle: floatingLabelStyle,\n    isFocused: isFocused,\n    shrink: isShrunk\n  }, floatingLabel), (!floatingLabel || isShrunk) && selectionsRenderer(selectedValues, hintText)), React.createElement(ArrowDownIcon, {\n    customIcon: dropDownIcon,\n    style: rotatingIconStyle(isOpen)\n  })), React.createElement(UnderLine, {\n    disabled: disabled,\n    errorText: errorText,\n    isFocused: isFocused,\n    isOpen: isOpen,\n    themeBorderColor: borderColor,\n    themeFocusColor: focusColor,\n    underlineErrorStyle: underlineErrorStyle,\n    underlineFocusStyle: underlineFocusStyle,\n    underlineStyle: underlineStyle\n  }), errorText && React.createElement(Error, null));\n}","map":null,"metadata":{},"sourceType":"module"}