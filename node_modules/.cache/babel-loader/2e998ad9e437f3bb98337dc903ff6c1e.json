{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/*\r\n  Utilities functions and polyfills\r\n */\n\n\nexport function entries(obj) {\n  return 'entries' in Object ? Object.entries(obj) : Object.keys(obj).map(function (prop) {\n    return [prop, obj[prop]];\n  });\n}\nexport function areEqual(val1, val2) {\n  if ((val1 === 0 || val2 === 0) && val1 === val2) return true;else if (!val1 || !val2 || (typeof val1 === 'undefined' ? 'undefined' : _typeof(val1)) !== (typeof val2 === 'undefined' ? 'undefined' : _typeof(val2))) return false;else if (typeof val1 === 'string' || typeof val1 === 'number' || typeof val1 === 'boolean') return val1 === val2;else if ((typeof val1 === 'undefined' ? 'undefined' : _typeof(val1)) === 'object') {\n    return Object.keys(val1).length === Object.keys(val2).length && entries(val2).every(function (_ref) {\n      var key2 = _ref[0],\n          value2 = _ref[1];\n      return val1[key2] === value2;\n    });\n  }\n} // Counts nodes with non-null value property without optgroups\n// noinspection JSMethodCanBeStatic\n\nexport function getChildrenLength(children) {\n  if (!children) return 0;else if (Array.isArray(children) && children.length) {\n    return children.reduce(function (count, _ref2) {\n      var type = _ref2.type,\n          _ref2$props = _ref2.props,\n          value = _ref2$props.value,\n          cpc = _ref2$props.children;\n\n      if (type === 'optgroup') {\n        if (cpc) {\n          if (Array.isArray(cpc)) {\n            for (var _iterator = cpc, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n              var _ref3;\n\n              if (_isArray) {\n                if (_i >= _iterator.length) break;\n                _ref3 = _iterator[_i++];\n              } else {\n                _i = _iterator.next();\n                if (_i.done) break;\n                _ref3 = _i.value;\n              }\n\n              var c = _ref3;\n              if (c.props.value) ++count;\n            }\n          } else if ((typeof cpc === 'undefined' ? 'undefined' : _typeof(cpc)) === 'object' && cpc.props.value) ++count;\n        }\n      } else if (value || value === 0) ++count;\n\n      return count;\n    }, 0);\n  } else if (!Array.isArray(children) && (typeof children === 'undefined' ? 'undefined' : _typeof(children)) === 'object') {\n    if (children.type === 'optgroup') return getChildrenLength(children.props.children);else if (children.props.value) return 1;\n  }\n  return 0;\n} // In multiple mode, this function checks for values missing the required 'value' prop\n\nexport function checkFormat(value) {\n  return value.findIndex(function (v) {\n    return (typeof v === 'undefined' ? 'undefined' : _typeof(v)) !== 'object' || !('value' in v);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}