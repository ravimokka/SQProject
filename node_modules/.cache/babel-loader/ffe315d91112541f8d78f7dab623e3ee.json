{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Registry = require('../registry');\n\nvar PlotSchema = require('../plot_api/plot_schema');\n\nvar Template = require('../plot_api/plot_template');\n\nvar Lib = require('../lib');\n\nvar Color = require('../components/color');\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n\nvar axisIDs = require('./cartesian/axis_ids');\n\nvar animationAttrs = require('./animation_attributes');\n\nvar frameAttrs = require('./frame_attributes');\n\nvar getModuleCalcData = require('../plots/get_data').getModuleCalcData;\n\nvar relinkPrivateKeys = Lib.relinkPrivateKeys;\nvar _ = Lib._;\nvar plots = module.exports = {}; // Expose registry methods on Plots for backward-compatibility\n\nLib.extendFlat(plots, Registry);\nplots.attributes = require('./attributes');\nplots.attributes.type.values = plots.allTypes;\nplots.fontAttrs = require('./font_attributes');\nplots.layoutAttributes = require('./layout_attributes'); // TODO make this a plot attribute?\n\nplots.fontWeight = 'normal';\nvar transformsRegistry = plots.transformsRegistry;\n\nvar commandModule = require('./command');\n\nplots.executeAPICommand = commandModule.executeAPICommand;\nplots.computeAPICommandBindings = commandModule.computeAPICommandBindings;\nplots.manageCommandObserver = commandModule.manageCommandObserver;\nplots.hasSimpleAPICommandBindings = commandModule.hasSimpleAPICommandBindings; // in some cases the browser doesn't seem to know how big\n// the text is at first, so it needs to draw it,\n// then wait a little, then draw it again\n\nplots.redrawText = function (gd) {\n  gd = Lib.getGraphDiv(gd);\n  var fullLayout = gd._fullLayout || {};\n\n  var hasPolar = fullLayout._has && fullLayout._has('polar');\n\n  var hasLegacyPolar = !hasPolar && gd.data && gd.data[0] && gd.data[0].r; // do not work if polar is present\n\n  if (hasLegacyPolar) return;\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      Registry.getComponentMethod('annotations', 'draw')(gd);\n      Registry.getComponentMethod('legend', 'draw')(gd);\n      Registry.getComponentMethod('colorbar', 'draw')(gd);\n      resolve(plots.previousPromises(gd));\n    }, 300);\n  });\n}; // resize plot about the container size\n\n\nplots.resize = function (gd) {\n  gd = Lib.getGraphDiv(gd);\n  return new Promise(function (resolve, reject) {\n    if (!gd || Lib.isHidden(gd)) {\n      reject(new Error('Resize must be passed a displayed plot div element.'));\n    }\n\n    if (gd._redrawTimer) clearTimeout(gd._redrawTimer);\n    gd._redrawTimer = setTimeout(function () {\n      // return if there is nothing to resize or is hidden\n      if (!gd.layout || gd.layout.width && gd.layout.height || Lib.isHidden(gd)) {\n        resolve(gd);\n        return;\n      }\n\n      delete gd.layout.width;\n      delete gd.layout.height; // autosizing doesn't count as a change that needs saving\n\n      var oldchanged = gd.changed; // nor should it be included in the undo queue\n\n      gd.autoplay = true;\n      Registry.call('relayout', gd, {\n        autosize: true\n      }).then(function () {\n        gd.changed = oldchanged;\n        resolve(gd);\n      });\n    }, 100);\n  });\n}; // for use in Lib.syncOrAsync, check if there are any\n// pending promises in this plot and wait for them\n\n\nplots.previousPromises = function (gd) {\n  if ((gd._promises || []).length) {\n    return Promise.all(gd._promises).then(function () {\n      gd._promises = [];\n    });\n  }\n};\n/**\n * Adds the 'Edit chart' link.\n * Note that now Plotly.plot() calls this so it can regenerate whenever it replots\n *\n * Add source links to your graph inside the 'showSources' config argument.\n */\n\n\nplots.addLinks = function (gd) {\n  // Do not do anything if showLink and showSources are not set to true in config\n  if (!gd._context.showLink && !gd._context.showSources) return;\n  var fullLayout = gd._fullLayout;\n  var linkContainer = Lib.ensureSingle(fullLayout._paper, 'text', 'js-plot-link-container', function (s) {\n    s.style({\n      'font-family': '\"Open Sans\", Arial, sans-serif',\n      'font-size': '12px',\n      'fill': Color.defaultLine,\n      'pointer-events': 'all'\n    }).each(function () {\n      var links = d3.select(this);\n      links.append('tspan').classed('js-link-to-tool', true);\n      links.append('tspan').classed('js-link-spacer', true);\n      links.append('tspan').classed('js-sourcelinks', true);\n    });\n  }); // The text node inside svg\n\n  var text = linkContainer.node();\n  var attrs = {\n    y: fullLayout._paper.attr('height') - 9\n  }; // If text's width is bigger than the layout\n  // Check that text is a child node or document.body\n  // because otherwise IE/Edge might throw an exception\n  // when calling getComputedTextLength().\n  // Apparently offsetParent is null for invisibles.\n\n  if (document.body.contains(text) && text.getComputedTextLength() >= fullLayout.width - 20) {\n    // Align the text at the left\n    attrs['text-anchor'] = 'start';\n    attrs.x = 5;\n  } else {\n    // Align the text at the right\n    attrs['text-anchor'] = 'end';\n    attrs.x = fullLayout._paper.attr('width') - 7;\n  }\n\n  linkContainer.attr(attrs);\n  var toolspan = linkContainer.select('.js-link-to-tool');\n  var spacespan = linkContainer.select('.js-link-spacer');\n  var sourcespan = linkContainer.select('.js-sourcelinks');\n  if (gd._context.showSources) gd._context.showSources(gd); // 'view in plotly' link for embedded plots\n\n  if (gd._context.showLink) positionPlayWithData(gd, toolspan); // separator if we have both sources and tool link\n\n  spacespan.text(toolspan.text() && sourcespan.text() ? ' - ' : '');\n}; // note that now this function is only adding the brand in\n// iframes and 3rd-party apps\n\n\nfunction positionPlayWithData(gd, container) {\n  container.text('');\n  var link = container.append('a').attr({\n    'xlink:xlink:href': '#',\n    'class': 'link--impt link--embedview',\n    'font-weight': 'bold'\n  }).text(gd._context.linkText + ' ' + String.fromCharCode(187));\n\n  if (gd._context.sendData) {\n    link.on('click', function () {\n      plots.sendDataToCloud(gd);\n    });\n  } else {\n    var path = window.location.pathname.split('/');\n    var query = window.location.search;\n    link.attr({\n      'xlink:xlink:show': 'new',\n      'xlink:xlink:href': '/' + path[2].split('.')[0] + '/' + path[1] + query\n    });\n  }\n}\n\nplots.sendDataToCloud = function (gd) {\n  gd.emit('plotly_beforeexport');\n  var baseUrl = (window.PLOTLYENV || {}).BASE_URL || gd._context.plotlyServerURL;\n  var hiddenformDiv = d3.select(gd).append('div').attr('id', 'hiddenform').style('display', 'none');\n  var hiddenform = hiddenformDiv.append('form').attr({\n    action: baseUrl + '/external',\n    method: 'post',\n    target: '_blank'\n  });\n  var hiddenformInput = hiddenform.append('input').attr({\n    type: 'text',\n    name: 'data'\n  });\n  hiddenformInput.node().value = plots.graphJson(gd, false, 'keepdata');\n  hiddenform.node().submit();\n  hiddenformDiv.remove();\n  gd.emit('plotly_afterexport');\n  return false;\n};\n\nvar d3FormatKeys = ['days', 'shortDays', 'months', 'shortMonths', 'periods', 'dateTime', 'date', 'time', 'decimal', 'thousands', 'grouping', 'currency'];\nvar extraFormatKeys = ['year', 'month', 'dayMonth', 'dayMonthYear'];\n/*\n * Fill in default values\n * @param {DOM element} gd\n * @param {object} opts\n * @param {boolean} opts.skipUpdateCalc: normally if the existing gd.calcdata looks\n *   compatible with the new gd._fullData we finish by linking the new _fullData traces\n *   to the old gd.calcdata, so it's correctly set if we're not going to recalc. But also,\n *   if there are calcTransforms on the trace, we first remap data arrays from the old full\n *   trace into the new one. Use skipUpdateCalc to defer this (needed by Plotly.react)\n *\n * gd.data, gd.layout:\n *   are precisely what the user specified (except as modified by cleanData/cleanLayout),\n *   these fields shouldn't be modified (except for filling in some auto values)\n *   nor used directly after the supply defaults step.\n *\n * gd._fullData, gd._fullLayout:\n *   are complete descriptions of how to draw the plot,\n *   use these fields in all required computations.\n *\n * gd._fullLayout._modules\n *   is a list of all the trace modules required to draw the plot.\n *\n * gd._fullLayout._visibleModules\n *   subset of _modules, a list of modules corresponding to visible:true traces.\n *\n * gd._fullLayout._basePlotModules\n *   is a list of all the plot modules required to draw the plot.\n *\n * gd._fullLayout._transformModules\n *   is a list of all the transform modules invoked.\n *\n */\n\nplots.supplyDefaults = function (gd, opts) {\n  var skipUpdateCalc = opts && opts.skipUpdateCalc;\n  var oldFullLayout = gd._fullLayout || {};\n\n  if (oldFullLayout._skipDefaults) {\n    delete oldFullLayout._skipDefaults;\n    return;\n  }\n\n  var newFullLayout = gd._fullLayout = {};\n  var newLayout = gd.layout || {};\n  var oldFullData = gd._fullData || [];\n  var newFullData = gd._fullData = [];\n  var newData = gd.data || [];\n  var oldCalcdata = gd.calcdata || [];\n  var context = gd._context || {};\n  var i; // Create all the storage space for frames, but only if doesn't already exist\n\n  if (!gd._transitionData) plots.createTransitionData(gd); // So we only need to do this once (and since we have gd here)\n  // get the translated placeholder titles.\n  // These ones get used as default values so need to be known at supplyDefaults\n  // others keep their blank defaults but render the placeholder as desired later\n  // TODO: make these work the same way, only inserting the placeholder text at draw time?\n  // The challenge is that this has slightly different behavior right now in editable mode:\n  // using the placeholder as default makes this text permanently (but lightly) visible,\n  // but explicit '' for these titles gives you a placeholder that's hidden until you mouse\n  // over it - so you're not distracted by it if you really don't want a title, but if you do\n  // and you're new to plotly you may not be able to find it.\n  // When editable=false the two behave the same, no title is drawn.\n\n  newFullLayout._dfltTitle = {\n    plot: _(gd, 'Click to enter Plot title'),\n    x: _(gd, 'Click to enter X axis title'),\n    y: _(gd, 'Click to enter Y axis title'),\n    colorbar: _(gd, 'Click to enter Colorscale title'),\n    annotation: _(gd, 'new text')\n  };\n  newFullLayout._traceWord = _(gd, 'trace');\n  var formatObj = getFormatObj(gd, d3FormatKeys); // stash the token from context so mapbox subplots can use it as default\n\n  newFullLayout._mapboxAccessToken = context.mapboxAccessToken; // first fill in what we can of layout without looking at data\n  // because fullData needs a few things from layout\n\n  if (oldFullLayout._initialAutoSizeIsDone) {\n    // coerce the updated layout while preserving width and height\n    var oldWidth = oldFullLayout.width;\n    var oldHeight = oldFullLayout.height;\n    plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n    if (!newLayout.width) newFullLayout.width = oldWidth;\n    if (!newLayout.height) newFullLayout.height = oldHeight;\n    plots.sanitizeMargins(newFullLayout);\n  } else {\n    // coerce the updated layout and autosize if needed\n    plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n    var missingWidthOrHeight = !newLayout.width || !newLayout.height;\n    var autosize = newFullLayout.autosize;\n    var autosizable = context.autosizable;\n    var initialAutoSize = missingWidthOrHeight && (autosize || autosizable);\n    if (initialAutoSize) plots.plotAutoSize(gd, newLayout, newFullLayout);else if (missingWidthOrHeight) plots.sanitizeMargins(newFullLayout); // for backwards-compatibility with Plotly v1.x.x\n\n    if (!autosize && missingWidthOrHeight) {\n      newLayout.width = newFullLayout.width;\n      newLayout.height = newFullLayout.height;\n    }\n  }\n\n  newFullLayout._d3locale = getFormatter(formatObj, newFullLayout.separators);\n  newFullLayout._extraFormat = getFormatObj(gd, extraFormatKeys);\n  newFullLayout._initialAutoSizeIsDone = true; // keep track of how many traces are inputted\n\n  newFullLayout._dataLength = newData.length; // clear the lists of trace and baseplot modules, and subplots\n\n  newFullLayout._modules = [];\n  newFullLayout._visibleModules = [];\n  newFullLayout._basePlotModules = [];\n  var subplots = newFullLayout._subplots = emptySubplotLists(); // initialize axis and subplot hash objects for splom-generated grids\n\n  var splomAxes = newFullLayout._splomAxes = {\n    x: {},\n    y: {}\n  };\n  var splomSubplots = newFullLayout._splomSubplots = {}; // initialize splom grid defaults\n\n  newFullLayout._splomGridDflt = {}; // for stacked area traces to share config across traces\n\n  newFullLayout._scatterStackOpts = {}; // for the first scatter trace on each subplot (so it knows tonext->tozero)\n\n  newFullLayout._firstScatter = {}; // for grouped bar/box/violin trace to share config across traces\n\n  newFullLayout._alignmentOpts = {}; // track color axes referenced in the data\n\n  newFullLayout._colorAxes = {}; // for traces to request a default rangeslider on their x axes\n  // eg set `_requestRangeslider.x2 = true` for xaxis2\n\n  newFullLayout._requestRangeslider = {}; // pull uids from old data to use as new defaults\n\n  newFullLayout._traceUids = getTraceUids(oldFullData, newData); // then do the data\n\n  newFullLayout._globalTransforms = (gd._context || {}).globalTransforms;\n  plots.supplyDataDefaults(newData, newFullData, newLayout, newFullLayout); // redo grid size defaults with info about splom x/y axes,\n  // and fill in generated cartesian axes and subplots\n\n  var splomXa = Object.keys(splomAxes.x);\n  var splomYa = Object.keys(splomAxes.y);\n\n  if (splomXa.length > 1 && splomYa.length > 1) {\n    Registry.getComponentMethod('grid', 'sizeDefaults')(newLayout, newFullLayout);\n\n    for (i = 0; i < splomXa.length; i++) {\n      Lib.pushUnique(subplots.xaxis, splomXa[i]);\n    }\n\n    for (i = 0; i < splomYa.length; i++) {\n      Lib.pushUnique(subplots.yaxis, splomYa[i]);\n    }\n\n    for (var k in splomSubplots) {\n      Lib.pushUnique(subplots.cartesian, k);\n    }\n  } // attach helper method to check whether a plot type is present on graph\n\n\n  newFullLayout._has = plots._hasPlotType.bind(newFullLayout);\n\n  if (oldFullData.length === newFullData.length) {\n    for (i = 0; i < newFullData.length; i++) {\n      relinkPrivateKeys(newFullData[i], oldFullData[i]);\n    }\n  } // finally, fill in the pieces of layout that may need to look at data\n\n\n  plots.supplyLayoutModuleDefaults(newLayout, newFullLayout, newFullData, gd._transitionData); // Special cases that introduce interactions between traces.\n  // This is after relinkPrivateKeys so we can use those in crossTraceDefaults\n  // and after layout module defaults, so we can use eg barmode\n\n  var _modules = newFullLayout._visibleModules;\n  var crossTraceDefaultsFuncs = [];\n\n  for (i = 0; i < _modules.length; i++) {\n    var funci = _modules[i].crossTraceDefaults; // some trace types share crossTraceDefaults (ie histogram2d, histogram2dcontour)\n\n    if (funci) Lib.pushUnique(crossTraceDefaultsFuncs, funci);\n  }\n\n  for (i = 0; i < crossTraceDefaultsFuncs.length; i++) {\n    crossTraceDefaultsFuncs[i](newFullData, newFullLayout);\n  } // turn on flag to optimize large splom-only graphs\n  // mostly by omitting SVG layers during Cartesian.drawFramework\n\n\n  newFullLayout._hasOnlyLargeSploms = newFullLayout._basePlotModules.length === 1 && newFullLayout._basePlotModules[0].name === 'splom' && splomXa.length > 15 && splomYa.length > 15 && newFullLayout.shapes.length === 0 && newFullLayout.images.length === 0; // TODO remove in v2.0.0\n  // add has-plot-type refs to fullLayout for backward compatibility\n\n  newFullLayout._hasCartesian = newFullLayout._has('cartesian');\n  newFullLayout._hasGeo = newFullLayout._has('geo');\n  newFullLayout._hasGL3D = newFullLayout._has('gl3d');\n  newFullLayout._hasGL2D = newFullLayout._has('gl2d');\n  newFullLayout._hasTernary = newFullLayout._has('ternary');\n  newFullLayout._hasPie = newFullLayout._has('pie'); // relink / initialize subplot axis objects\n\n  plots.linkSubplots(newFullData, newFullLayout, oldFullData, oldFullLayout); // clean subplots and other artifacts from previous plot calls\n\n  plots.cleanPlot(newFullData, newFullLayout, oldFullData, oldFullLayout); // clear selection outline until we implement persistent selection,\n  // don't clear them though when drag handlers (e.g. listening to\n  // `plotly_selecting`) update the graph.\n  // we should try to come up with a better solution when implementing\n  // https://github.com/plotly/plotly.js/issues/1851\n\n  if (oldFullLayout._zoomlayer && !gd._dragging) {\n    oldFullLayout._zoomlayer.selectAll('.select-outline').remove();\n  } // fill in meta helpers\n\n\n  fillMetaTextHelpers(newFullData, newFullLayout); // relink functions and _ attributes to promote consistency between plots\n\n  relinkPrivateKeys(newFullLayout, oldFullLayout); // colorscale crossTraceDefaults needs newFullLayout with relinked keys\n\n  Registry.getComponentMethod('colorscale', 'crossTraceDefaults')(newFullData, newFullLayout); // For persisting GUI-driven changes in layout\n  // _preGUI and _tracePreGUI were already copied over in relinkPrivateKeys\n\n  if (!newFullLayout._preGUI) newFullLayout._preGUI = {}; // track trace GUI changes by uid rather than by trace index\n\n  if (!newFullLayout._tracePreGUI) newFullLayout._tracePreGUI = {};\n  var tracePreGUI = newFullLayout._tracePreGUI;\n  var uids = {};\n  var uid;\n\n  for (uid in tracePreGUI) uids[uid] = 'old';\n\n  for (i = 0; i < newFullData.length; i++) {\n    uid = newFullData[i]._fullInput.uid;\n    if (!uids[uid]) tracePreGUI[uid] = {};\n    uids[uid] = 'new';\n  }\n\n  for (uid in uids) {\n    if (uids[uid] === 'old') delete tracePreGUI[uid];\n  } // set up containers for margin calculations\n\n\n  initMargins(newFullLayout); // collect and do some initial calculations for rangesliders\n\n  Registry.getComponentMethod('rangeslider', 'makeData')(newFullLayout); // update object references in calcdata\n\n  if (!skipUpdateCalc && oldCalcdata.length === newFullData.length) {\n    plots.supplyDefaultsUpdateCalc(oldCalcdata, newFullData);\n  }\n};\n\nplots.supplyDefaultsUpdateCalc = function (oldCalcdata, newFullData) {\n  for (var i = 0; i < newFullData.length; i++) {\n    var newTrace = newFullData[i];\n    var cd0 = (oldCalcdata[i] || [])[0];\n\n    if (cd0 && cd0.trace) {\n      var oldTrace = cd0.trace;\n\n      if (oldTrace._hasCalcTransform) {\n        var arrayAttrs = oldTrace._arrayAttrs;\n        var j, astr, oldArrayVal;\n\n        for (j = 0; j < arrayAttrs.length; j++) {\n          astr = arrayAttrs[j];\n          oldArrayVal = Lib.nestedProperty(oldTrace, astr).get().slice();\n          Lib.nestedProperty(newTrace, astr).set(oldArrayVal);\n        }\n      }\n\n      cd0.trace = newTrace;\n    }\n  }\n};\n/**\n * Create a list of uid strings satisfying (in this order of importance):\n * 1. all unique, all strings\n * 2. matches input uids if provided\n * 3. matches previous data uids\n */\n\n\nfunction getTraceUids(oldFullData, newData) {\n  var len = newData.length;\n  var oldFullInput = [];\n  var i, prevFullInput;\n\n  for (i = 0; i < oldFullData.length; i++) {\n    var thisFullInput = oldFullData[i]._fullInput;\n    if (thisFullInput !== prevFullInput) oldFullInput.push(thisFullInput);\n    prevFullInput = thisFullInput;\n  }\n\n  var oldLen = oldFullInput.length;\n  var out = new Array(len);\n  var seenUids = {};\n\n  function setUid(uid, i) {\n    out[i] = uid;\n    seenUids[uid] = 1;\n  }\n\n  function tryUid(uid, i) {\n    if (uid && typeof uid === 'string' && !seenUids[uid]) {\n      setUid(uid, i);\n      return true;\n    }\n  }\n\n  for (i = 0; i < len; i++) {\n    var newUid = newData[i].uid;\n    if (typeof newUid === 'number') newUid = String(newUid);\n    if (tryUid(newUid, i)) continue;\n    if (i < oldLen && tryUid(oldFullInput[i].uid, i)) continue;\n    setUid(Lib.randstr(seenUids), i);\n  }\n\n  return out;\n}\n/**\n * Make a container for collecting subplots we need to display.\n *\n * Finds all subplot types we need to enumerate once and caches it,\n * but makes a new output object each time.\n * Single-trace subplots (which have no `id`) such as pie, table, etc\n * do not need to be collected because we just draw all visible traces.\n */\n\n\nfunction emptySubplotLists() {\n  var collectableSubplotTypes = Registry.collectableSubplotTypes;\n  var out = {};\n  var i, j;\n\n  if (!collectableSubplotTypes) {\n    collectableSubplotTypes = [];\n    var subplotsRegistry = Registry.subplotsRegistry;\n\n    for (var subplotType in subplotsRegistry) {\n      var subplotModule = subplotsRegistry[subplotType];\n      var subplotAttr = subplotModule.attr;\n\n      if (subplotAttr) {\n        collectableSubplotTypes.push(subplotType); // special case, currently just for cartesian:\n        // we need to enumerate axes, not just subplots\n\n        if (Array.isArray(subplotAttr)) {\n          for (j = 0; j < subplotAttr.length; j++) {\n            Lib.pushUnique(collectableSubplotTypes, subplotAttr[j]);\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < collectableSubplotTypes.length; i++) {\n    out[collectableSubplotTypes[i]] = [];\n  }\n\n  return out;\n}\n/**\n * getFormatObj: use _context to get the format object from locale.\n * Used to get d3.locale argument object and extraFormat argument object\n *\n * Regarding d3.locale argument :\n * decimal and thousands can be overridden later by layout.separators\n * grouping and currency are not presently used by our automatic number\n * formatting system but can be used by custom formats.\n *\n * @returns {object} d3.locale format object\n */\n\n\nfunction getFormatObj(gd, formatKeys) {\n  var locale = gd._context.locale;\n  if (!locale) locale === 'en-US';\n  var formatDone = false;\n  var formatObj = {};\n\n  function includeFormat(newFormat) {\n    var formatFinished = true;\n\n    for (var i = 0; i < formatKeys.length; i++) {\n      var formatKey = formatKeys[i];\n\n      if (!formatObj[formatKey]) {\n        if (newFormat[formatKey]) {\n          formatObj[formatKey] = newFormat[formatKey];\n        } else formatFinished = false;\n      }\n    }\n\n    if (formatFinished) formatDone = true;\n  } // same as localize, look for format parts in each format spec in the chain\n\n\n  for (var i = 0; i < 2; i++) {\n    var locales = gd._context.locales;\n\n    for (var j = 0; j < 2; j++) {\n      var formatj = (locales[locale] || {}).format;\n\n      if (formatj) {\n        includeFormat(formatj);\n        if (formatDone) break;\n      }\n\n      locales = Registry.localeRegistry;\n    }\n\n    var baseLocale = locale.split('-')[0];\n    if (formatDone || baseLocale === locale) break;\n    locale = baseLocale;\n  } // lastly pick out defaults from english (non-US, as DMY is so much more common)\n\n\n  if (!formatDone) includeFormat(Registry.localeRegistry.en.format);\n  return formatObj;\n}\n/**\n * getFormatter: combine the final separators with the locale formatting object\n * we pulled earlier to generate number and time formatters\n * TODO: remove separators in v2, only use locale, so we don't need this step?\n *\n * @param {object} formatObj: d3.locale format object\n * @param {string} separators: length-2 string to override decimal and thousands\n *   separators in number formatting\n *\n * @returns {object} {numberFormat, timeFormat} d3 formatter factory functions\n *   for numbers and time\n */\n\n\nfunction getFormatter(formatObj, separators) {\n  formatObj.decimal = separators.charAt(0);\n  formatObj.thousands = separators.charAt(1);\n  return d3.locale(formatObj);\n}\n\nfunction fillMetaTextHelpers(newFullData, newFullLayout) {\n  var _meta;\n\n  var meta4data = [];\n\n  if (newFullLayout.meta) {\n    _meta = newFullLayout._meta = {\n      meta: newFullLayout.meta,\n      layout: {\n        meta: newFullLayout.meta\n      }\n    };\n  }\n\n  for (var i = 0; i < newFullData.length; i++) {\n    var trace = newFullData[i];\n\n    if (trace.meta) {\n      meta4data[trace.index] = trace._meta = {\n        meta: trace.meta\n      };\n    } else if (newFullLayout.meta) {\n      trace._meta = {\n        meta: newFullLayout.meta\n      };\n    }\n\n    if (newFullLayout.meta) {\n      trace._meta.layout = {\n        meta: newFullLayout.meta\n      };\n    }\n  }\n\n  if (meta4data.length) {\n    if (!_meta) {\n      _meta = newFullLayout._meta = {};\n    }\n\n    _meta.data = meta4data;\n  }\n} // Create storage for all of the data related to frames and transitions:\n\n\nplots.createTransitionData = function (gd) {\n  // Set up the default keyframe if it doesn't exist:\n  if (!gd._transitionData) {\n    gd._transitionData = {};\n  }\n\n  if (!gd._transitionData._frames) {\n    gd._transitionData._frames = [];\n  }\n\n  if (!gd._transitionData._frameHash) {\n    gd._transitionData._frameHash = {};\n  }\n\n  if (!gd._transitionData._counter) {\n    gd._transitionData._counter = 0;\n  }\n\n  if (!gd._transitionData._interruptCallbacks) {\n    gd._transitionData._interruptCallbacks = [];\n  }\n}; // helper function to be bound to fullLayout to check\n// whether a certain plot type is present on plot\n// or trace has a category\n\n\nplots._hasPlotType = function (category) {\n  var i; // check base plot modules\n\n  var basePlotModules = this._basePlotModules || [];\n\n  for (i = 0; i < basePlotModules.length; i++) {\n    if (basePlotModules[i].name === category) return true;\n  } // check trace modules (including non-visible:true)\n\n\n  var modules = this._modules || [];\n\n  for (i = 0; i < modules.length; i++) {\n    var name = modules[i].name;\n    if (name === category) return true; // N.B. this is modules[i] along with 'categories' as a hash object\n\n    var _module = Registry.modules[name];\n    if (_module && _module.categories[category]) return true;\n  }\n\n  return false;\n};\n\nplots.cleanPlot = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var i, j;\n  var basePlotModules = oldFullLayout._basePlotModules || [];\n\n  for (i = 0; i < basePlotModules.length; i++) {\n    var _module = basePlotModules[i];\n\n    if (_module.clean) {\n      _module.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n    }\n  }\n\n  var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n\n  var hasGl = newFullLayout._has && newFullLayout._has('gl');\n\n  if (hadGl && !hasGl) {\n    if (oldFullLayout._glcontainer !== undefined) {\n      oldFullLayout._glcontainer.selectAll('.gl-canvas').remove();\n\n      oldFullLayout._glcontainer.selectAll('.no-webgl').remove();\n\n      oldFullLayout._glcanvas = null;\n    }\n  }\n\n  var hasInfoLayer = !!oldFullLayout._infolayer;\n\n  oldLoop: for (i = 0; i < oldFullData.length; i++) {\n    var oldTrace = oldFullData[i];\n    var oldUid = oldTrace.uid;\n\n    for (j = 0; j < newFullData.length; j++) {\n      var newTrace = newFullData[j];\n      if (oldUid === newTrace.uid) continue oldLoop;\n    } // clean old colorbars\n\n\n    if (hasInfoLayer) {\n      oldFullLayout._infolayer.select('.cb' + oldUid).remove();\n    }\n  }\n};\n\nplots.linkSubplots = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var i, j;\n  var oldSubplots = oldFullLayout._plots || {};\n  var newSubplots = newFullLayout._plots = {};\n  var newSubplotList = newFullLayout._subplots;\n  var mockGd = {\n    _fullData: newFullData,\n    _fullLayout: newFullLayout\n  };\n  var ids = newSubplotList.cartesian.concat(newSubplotList.gl2d || []);\n\n  for (i = 0; i < ids.length; i++) {\n    var id = ids[i];\n    var oldSubplot = oldSubplots[id];\n    var xaxis = axisIDs.getFromId(mockGd, id, 'x');\n    var yaxis = axisIDs.getFromId(mockGd, id, 'y');\n    var plotinfo; // link or create subplot object\n\n    if (oldSubplot) {\n      plotinfo = newSubplots[id] = oldSubplot;\n    } else {\n      plotinfo = newSubplots[id] = {};\n      plotinfo.id = id;\n    } // add these axis ids to each others' subplot lists\n\n\n    xaxis._counterAxes.push(yaxis._id);\n\n    yaxis._counterAxes.push(xaxis._id);\n\n    xaxis._subplotsWith.push(id);\n\n    yaxis._subplotsWith.push(id); // update x and y axis layout object refs\n\n\n    plotinfo.xaxis = xaxis;\n    plotinfo.yaxis = yaxis; // By default, we clip at the subplot level,\n    // but if one trace on a given subplot has *cliponaxis* set to false,\n    // we need to clip at the trace module layer level;\n    // find this out here, once of for all.\n\n    plotinfo._hasClipOnAxisFalse = false;\n\n    for (j = 0; j < newFullData.length; j++) {\n      var trace = newFullData[j];\n\n      if (trace.xaxis === plotinfo.xaxis._id && trace.yaxis === plotinfo.yaxis._id && trace.cliponaxis === false) {\n        plotinfo._hasClipOnAxisFalse = true;\n        break;\n      }\n    }\n  } // while we're at it, link overlaying axes to their main axes and\n  // anchored axes to the axes they're anchored to\n\n\n  var axList = axisIDs.list(mockGd, null, true);\n  var ax;\n\n  for (i = 0; i < axList.length; i++) {\n    ax = axList[i];\n    var mainAx = null;\n\n    if (ax.overlaying) {\n      mainAx = axisIDs.getFromId(mockGd, ax.overlaying); // you cannot overlay an axis that's already overlaying another\n\n      if (mainAx && mainAx.overlaying) {\n        ax.overlaying = false;\n        mainAx = null;\n      }\n    }\n\n    ax._mainAxis = mainAx || ax;\n    /*\n     * For now force overlays to overlay completely... so they\n     * can drag together correctly and share backgrounds.\n     * Later perhaps we make separate axis domain and\n     * tick/line domain or something, so they can still share\n     * the (possibly larger) dragger and background but don't\n     * have to both be drawn over that whole domain\n     */\n\n    if (mainAx) ax.domain = mainAx.domain.slice();\n    ax._anchorAxis = ax.anchor === 'free' ? null : axisIDs.getFromId(mockGd, ax.anchor);\n  } // finally, we can find the main subplot for each axis\n  // (on which the ticks & labels are drawn)\n\n\n  for (i = 0; i < axList.length; i++) {\n    ax = axList[i];\n\n    ax._counterAxes.sort(axisIDs.idSort);\n\n    ax._subplotsWith.sort(Lib.subplotSort);\n\n    ax._mainSubplot = findMainSubplot(ax, newFullLayout); // find \"full\" domain span of counter axes,\n    // this loop can be costly, so only compute it when required\n\n    if (ax._counterAxes.length && (ax.spikemode && ax.spikemode.indexOf('across') !== -1 || ax.automargin && ax.mirror && ax.anchor !== 'free' || Registry.getComponentMethod('rangeslider', 'isVisible')(ax))) {\n      var min = 1;\n      var max = 0;\n\n      for (j = 0; j < ax._counterAxes.length; j++) {\n        var ax2 = axisIDs.getFromId(mockGd, ax._counterAxes[j]);\n        min = Math.min(min, ax2.domain[0]);\n        max = Math.max(max, ax2.domain[1]);\n      }\n\n      if (min < max) {\n        ax._counterDomainMin = min;\n        ax._counterDomainMax = max;\n      }\n    }\n  }\n};\n\nfunction findMainSubplot(ax, fullLayout) {\n  var mockGd = {\n    _fullLayout: fullLayout\n  };\n  var isX = ax._id.charAt(0) === 'x';\n  var anchorAx = ax._mainAxis._anchorAxis;\n  var mainSubplotID = '';\n  var nextBestMainSubplotID = '';\n  var anchorID = ''; // First try the main ID with the anchor\n\n  if (anchorAx) {\n    anchorID = anchorAx._mainAxis._id;\n    mainSubplotID = isX ? ax._id + anchorID : anchorID + ax._id;\n  } // Then look for a subplot with the counteraxis overlaying the anchor\n  // If that fails just use the first subplot including this axis\n\n\n  if (!mainSubplotID || !fullLayout._plots[mainSubplotID]) {\n    mainSubplotID = '';\n    var counterIDs = ax._counterAxes;\n\n    for (var j = 0; j < counterIDs.length; j++) {\n      var counterPart = counterIDs[j];\n      var id = isX ? ax._id + counterPart : counterPart + ax._id;\n      if (!nextBestMainSubplotID) nextBestMainSubplotID = id;\n      var counterAx = axisIDs.getFromId(mockGd, counterPart);\n\n      if (anchorID && counterAx.overlaying === anchorID) {\n        mainSubplotID = id;\n        break;\n      }\n    }\n  }\n\n  return mainSubplotID || nextBestMainSubplotID;\n} // This function clears any trace attributes with valType: color and\n// no set dflt filed in the plot schema. This is needed because groupby (which\n// is the only transform for which this currently applies) supplies parent\n// trace defaults, then expanded trace defaults. The result is that `null`\n// colors are default-supplied and inherited as a color instead of a null.\n// The result is that expanded trace default colors have no effect, with\n// the final result that groups are indistinguishable. This function clears\n// those colors so that individual groupby groups get unique colors.\n\n\nplots.clearExpandedTraceDefaultColors = function (trace) {\n  var colorAttrs, path, i; // This uses weird closure state in order to satisfy the linter rule\n  // that we can't create functions in a loop.\n\n  function locateColorAttrs(attr, attrName, attrs, level) {\n    path[level] = attrName;\n    path.length = level + 1;\n\n    if (attr.valType === 'color' && attr.dflt === undefined) {\n      colorAttrs.push(path.join('.'));\n    }\n  }\n\n  path = []; // Get the cached colorAttrs:\n\n  colorAttrs = trace._module._colorAttrs; // Or else compute and cache the colorAttrs on the module:\n\n  if (!colorAttrs) {\n    trace._module._colorAttrs = colorAttrs = [];\n    PlotSchema.crawl(trace._module.attributes, locateColorAttrs);\n  }\n\n  for (i = 0; i < colorAttrs.length; i++) {\n    var origprop = Lib.nestedProperty(trace, '_input.' + colorAttrs[i]);\n\n    if (!origprop.get()) {\n      Lib.nestedProperty(trace, colorAttrs[i]).set(null);\n    }\n  }\n};\n\nplots.supplyDataDefaults = function (dataIn, dataOut, layout, fullLayout) {\n  var modules = fullLayout._modules;\n  var visibleModules = fullLayout._visibleModules;\n  var basePlotModules = fullLayout._basePlotModules;\n  var cnt = 0;\n  var colorCnt = 0;\n  var i, fullTrace, trace;\n  fullLayout._transformModules = [];\n\n  function pushModule(fullTrace) {\n    dataOut.push(fullTrace);\n    var _module = fullTrace._module;\n    if (!_module) return;\n    Lib.pushUnique(modules, _module);\n    if (fullTrace.visible === true) Lib.pushUnique(visibleModules, _module);\n    Lib.pushUnique(basePlotModules, fullTrace._module.basePlotModule);\n    cnt++; // TODO: do we really want color not to increment for explicitly invisible traces?\n    // This logic is weird, but matches previous behavior: traces that you explicitly\n    // set to visible:false do not increment the color, but traces WE determine to be\n    // empty or invalid (and thus set to visible:false) DO increment color.\n    // I kind of think we should just let all traces increment color, visible or not.\n    // see mock: axes-autotype-empty vs. a test of restyling visible: false that\n    // I can't find right now...\n\n    if (fullTrace._input.visible !== false) colorCnt++;\n  }\n\n  var carpetIndex = {};\n  var carpetDependents = [];\n  var dataTemplate = (layout.template || {}).data || {};\n  var templater = Template.traceTemplater(dataTemplate);\n\n  for (i = 0; i < dataIn.length; i++) {\n    trace = dataIn[i]; // reuse uid we may have pulled out of oldFullData\n    // Note: templater supplies trace type\n\n    fullTrace = templater.newTrace(trace);\n    fullTrace.uid = fullLayout._traceUids[i];\n    plots.supplyTraceDefaults(trace, fullTrace, colorCnt, fullLayout, i);\n    fullTrace.index = i;\n    fullTrace._input = trace;\n    fullTrace._expandedIndex = cnt;\n\n    if (fullTrace.transforms && fullTrace.transforms.length) {\n      var sdInvisible = trace.visible !== false && fullTrace.visible === false;\n      var expandedTraces = applyTransforms(fullTrace, dataOut, layout, fullLayout);\n\n      for (var j = 0; j < expandedTraces.length; j++) {\n        var expandedTrace = expandedTraces[j]; // No further templating during transforms.\n\n        var fullExpandedTrace = {\n          _template: fullTrace._template,\n          type: fullTrace.type,\n          // set uid using parent uid and expanded index\n          // to promote consistency between update calls\n          uid: fullTrace.uid + j\n        }; // If the first supplyDefaults created `visible: false`,\n        // clear it before running supplyDefaults a second time,\n        // because sometimes there are items we still want to coerce\n        // inside trace modules before determining that the trace is\n        // again `visible: false`, for example partial visibilities\n        // in `splom` traces.\n\n        if (sdInvisible && expandedTrace.visible === false) {\n          delete expandedTrace.visible;\n        }\n\n        plots.supplyTraceDefaults(expandedTrace, fullExpandedTrace, cnt, fullLayout, i); // relink private (i.e. underscore) keys expanded trace to full expanded trace so\n        // that transform supply-default methods can set _ keys for future use.\n\n        relinkPrivateKeys(fullExpandedTrace, expandedTrace); // add info about parent data trace\n\n        fullExpandedTrace.index = i;\n        fullExpandedTrace._input = trace;\n        fullExpandedTrace._fullInput = fullTrace; // add info about the expanded data\n\n        fullExpandedTrace._expandedIndex = cnt;\n        fullExpandedTrace._expandedInput = expandedTrace;\n        pushModule(fullExpandedTrace);\n      }\n    } else {\n      // add identify refs for consistency with transformed traces\n      fullTrace._fullInput = fullTrace;\n      fullTrace._expandedInput = fullTrace;\n      pushModule(fullTrace);\n    }\n\n    if (Registry.traceIs(fullTrace, 'carpetAxis')) {\n      carpetIndex[fullTrace.carpet] = fullTrace;\n    }\n\n    if (Registry.traceIs(fullTrace, 'carpetDependent')) {\n      carpetDependents.push(i);\n    }\n  }\n\n  for (i = 0; i < carpetDependents.length; i++) {\n    fullTrace = dataOut[carpetDependents[i]];\n    if (!fullTrace.visible) continue;\n    var carpetAxis = carpetIndex[fullTrace.carpet];\n    fullTrace._carpet = carpetAxis;\n\n    if (!carpetAxis || !carpetAxis.visible) {\n      fullTrace.visible = false;\n      continue;\n    }\n\n    fullTrace.xaxis = carpetAxis.xaxis;\n    fullTrace.yaxis = carpetAxis.yaxis;\n  }\n};\n\nplots.supplyAnimationDefaults = function (opts) {\n  opts = opts || {};\n  var i;\n  var optsOut = {};\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts || {}, optsOut, animationAttrs, attr, dflt);\n  }\n\n  coerce('mode');\n  coerce('direction');\n  coerce('fromcurrent');\n\n  if (Array.isArray(opts.frame)) {\n    optsOut.frame = [];\n\n    for (i = 0; i < opts.frame.length; i++) {\n      optsOut.frame[i] = plots.supplyAnimationFrameDefaults(opts.frame[i] || {});\n    }\n  } else {\n    optsOut.frame = plots.supplyAnimationFrameDefaults(opts.frame || {});\n  }\n\n  if (Array.isArray(opts.transition)) {\n    optsOut.transition = [];\n\n    for (i = 0; i < opts.transition.length; i++) {\n      optsOut.transition[i] = plots.supplyAnimationTransitionDefaults(opts.transition[i] || {});\n    }\n  } else {\n    optsOut.transition = plots.supplyAnimationTransitionDefaults(opts.transition || {});\n  }\n\n  return optsOut;\n};\n\nplots.supplyAnimationFrameDefaults = function (opts) {\n  var optsOut = {};\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts || {}, optsOut, animationAttrs.frame, attr, dflt);\n  }\n\n  coerce('duration');\n  coerce('redraw');\n  return optsOut;\n};\n\nplots.supplyAnimationTransitionDefaults = function (opts) {\n  var optsOut = {};\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts || {}, optsOut, animationAttrs.transition, attr, dflt);\n  }\n\n  coerce('duration');\n  coerce('easing');\n  return optsOut;\n};\n\nplots.supplyFrameDefaults = function (frameIn) {\n  var frameOut = {};\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(frameIn, frameOut, frameAttrs, attr, dflt);\n  }\n\n  coerce('group');\n  coerce('name');\n  coerce('traces');\n  coerce('baseframe');\n  coerce('data');\n  coerce('layout');\n  return frameOut;\n};\n\nplots.supplyTraceDefaults = function (traceIn, traceOut, colorIndex, layout, traceInIndex) {\n  var colorway = layout.colorway || Color.defaults;\n  var defaultColor = colorway[colorIndex % colorway.length];\n  var i;\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, plots.attributes, attr, dflt);\n  }\n\n  var visible = coerce('visible');\n  coerce('type');\n  coerce('name', layout._traceWord + ' ' + traceInIndex);\n  coerce('uirevision', layout.uirevision); // we want even invisible traces to make their would-be subplots visible\n  // so coerce the subplot id(s) now no matter what\n\n  var _module = plots.getModule(traceOut);\n\n  traceOut._module = _module;\n\n  if (_module) {\n    var basePlotModule = _module.basePlotModule;\n    var subplotAttr = basePlotModule.attr;\n    var subplotAttrs = basePlotModule.attributes;\n\n    if (subplotAttr && subplotAttrs) {\n      var subplots = layout._subplots;\n      var subplotId = ''; // TODO - currently if we draw an empty gl2d subplot, it draws\n      // nothing then gets stuck and you can't get it back without newPlot\n      // sort this out in the regl refactor? but for now just drop empty gl2d subplots\n\n      if (basePlotModule.name !== 'gl2d' || visible) {\n        if (Array.isArray(subplotAttr)) {\n          for (i = 0; i < subplotAttr.length; i++) {\n            var attri = subplotAttr[i];\n            var vali = Lib.coerce(traceIn, traceOut, subplotAttrs, attri);\n            if (subplots[attri]) Lib.pushUnique(subplots[attri], vali);\n            subplotId += vali;\n          }\n        } else {\n          subplotId = Lib.coerce(traceIn, traceOut, subplotAttrs, subplotAttr);\n        }\n\n        if (subplots[basePlotModule.name]) {\n          Lib.pushUnique(subplots[basePlotModule.name], subplotId);\n        }\n      }\n    }\n  }\n\n  if (visible) {\n    coerce('customdata');\n    coerce('ids');\n    coerce('meta');\n\n    if (Registry.traceIs(traceOut, 'showLegend')) {\n      traceOut._dfltShowLegend = true;\n      coerce('showlegend');\n      coerce('legendgroup');\n    } else {\n      traceOut._dfltShowLegend = false;\n    }\n\n    if (_module) {\n      _module.supplyDefaults(traceIn, traceOut, defaultColor, layout);\n    }\n\n    if (!Registry.traceIs(traceOut, 'noOpacity')) {\n      coerce('opacity');\n    }\n\n    if (Registry.traceIs(traceOut, 'notLegendIsolatable')) {\n      // This clears out the legendonly state for traces like carpet that\n      // cannot be isolated in the legend\n      traceOut.visible = !!traceOut.visible;\n    }\n\n    if (!Registry.traceIs(traceOut, 'noHover')) {\n      if (!traceOut.hovertemplate) Lib.coerceHoverinfo(traceIn, traceOut, layout); // parcats support hover, but not hoverlabel stylings (yet)\n\n      if (traceOut.type !== 'parcats') {\n        Registry.getComponentMethod('fx', 'supplyDefaults')(traceIn, traceOut, defaultColor, layout);\n      }\n    }\n\n    if (_module && _module.selectPoints) {\n      coerce('selectedpoints');\n    }\n\n    plots.supplyTransformDefaults(traceIn, traceOut, layout);\n  }\n\n  return traceOut;\n};\n/**\n * hasMakesDataTransform: does this trace have a transform that makes its own\n * data, either by grabbing it from somewhere else or by creating it from input\n * parameters? If so, we should still keep going with supplyDefaults\n * even if the trace is invisible, which may just be because it has no data yet.\n */\n\n\nfunction hasMakesDataTransform(trace) {\n  var transforms = trace.transforms;\n\n  if (Array.isArray(transforms) && transforms.length) {\n    for (var i = 0; i < transforms.length; i++) {\n      var ti = transforms[i];\n\n      var _module = ti._module || transformsRegistry[ti.type];\n\n      if (_module && _module.makesData) return true;\n    }\n  }\n\n  return false;\n}\n\nplots.hasMakesDataTransform = hasMakesDataTransform;\n\nplots.supplyTransformDefaults = function (traceIn, traceOut, layout) {\n  // For now we only allow transforms on 1D traces, ie those that specify a _length.\n  // If we were to implement 2D transforms, we'd need to have each transform\n  // describe its own applicability and disable itself when it doesn't apply.\n  // Also allow transforms that make their own data, but not in globalTransforms\n  if (!(traceOut._length || hasMakesDataTransform(traceIn))) return;\n  var globalTransforms = layout._globalTransforms || [];\n  var transformModules = layout._transformModules || [];\n  if (!Array.isArray(traceIn.transforms) && globalTransforms.length === 0) return;\n  var containerIn = traceIn.transforms || [];\n  var transformList = globalTransforms.concat(containerIn);\n  var containerOut = traceOut.transforms = [];\n\n  for (var i = 0; i < transformList.length; i++) {\n    var transformIn = transformList[i];\n    var type = transformIn.type;\n    var _module = transformsRegistry[type];\n    var transformOut;\n    /*\n     * Supply defaults may run twice. First pass runs all supply defaults steps\n     * and adds the _module to any output transforms.\n     * If transforms exist another pass is run so that any generated traces also\n     * go through supply defaults. This has the effect of rerunning\n     * supplyTransformDefaults. If the transform does not have a `transform`\n     * function it could not have generated any new traces and the second stage\n     * is unnecessary. We detect this case with the following variables.\n     */\n\n    var isFirstStage = !(transformIn._module && transformIn._module === _module);\n    var doLaterStages = _module && typeof _module.transform === 'function';\n    if (!_module) Lib.warn('Unrecognized transform type ' + type + '.');\n\n    if (_module && _module.supplyDefaults && (isFirstStage || doLaterStages)) {\n      transformOut = _module.supplyDefaults(transformIn, traceOut, layout, traceIn);\n      transformOut.type = type;\n      transformOut._module = _module;\n      Lib.pushUnique(transformModules, _module);\n    } else {\n      transformOut = Lib.extendFlat({}, transformIn);\n    }\n\n    containerOut.push(transformOut);\n  }\n};\n\nfunction applyTransforms(fullTrace, fullData, layout, fullLayout) {\n  var container = fullTrace.transforms;\n  var dataOut = [fullTrace];\n\n  for (var i = 0; i < container.length; i++) {\n    var transform = container[i];\n    var _module = transformsRegistry[transform.type];\n\n    if (_module && _module.transform) {\n      dataOut = _module.transform(dataOut, {\n        transform: transform,\n        fullTrace: fullTrace,\n        fullData: fullData,\n        layout: layout,\n        fullLayout: fullLayout,\n        transformIndex: i\n      });\n    }\n  }\n\n  return dataOut;\n}\n\nplots.supplyLayoutGlobalDefaults = function (layoutIn, layoutOut, formatObj) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(layoutIn, layoutOut, plots.layoutAttributes, attr, dflt);\n  }\n\n  var template = layoutIn.template;\n\n  if (Lib.isPlainObject(template)) {\n    layoutOut.template = template;\n    layoutOut._template = template.layout;\n    layoutOut._dataTemplate = template.data;\n  }\n\n  var globalFont = Lib.coerceFont(coerce, 'font');\n  coerce('title.text', layoutOut._dfltTitle.plot);\n  Lib.coerceFont(coerce, 'title.font', {\n    family: globalFont.family,\n    size: Math.round(globalFont.size * 1.4),\n    color: globalFont.color\n  });\n  coerce('title.xref');\n  coerce('title.yref');\n  coerce('title.x');\n  coerce('title.y');\n  coerce('title.xanchor');\n  coerce('title.yanchor');\n  coerce('title.pad.t');\n  coerce('title.pad.r');\n  coerce('title.pad.b');\n  coerce('title.pad.l'); // Make sure that autosize is defaulted to *true*\n  // on layouts with no set width and height for backward compatibly,\n  // in particular https://plot.ly/javascript/responsive-fluid-layout/\n  //\n  // Before https://github.com/plotly/plotly.js/pull/635 ,\n  // layouts with no set width and height were set temporary set to 'initial'\n  // to pass through the autosize routine\n  //\n  // This behavior is subject to change in v2.\n\n  coerce('autosize', !(layoutIn.width && layoutIn.height));\n  coerce('width');\n  coerce('height');\n  coerce('margin.l');\n  coerce('margin.r');\n  coerce('margin.t');\n  coerce('margin.b');\n  coerce('margin.pad');\n  coerce('margin.autoexpand');\n  if (layoutIn.width && layoutIn.height) plots.sanitizeMargins(layoutOut);\n  Registry.getComponentMethod('grid', 'sizeDefaults')(layoutIn, layoutOut);\n  coerce('paper_bgcolor');\n  coerce('separators', formatObj.decimal + formatObj.thousands);\n  coerce('hidesources');\n  coerce('colorway');\n  coerce('datarevision');\n  var uirevision = coerce('uirevision');\n  coerce('editrevision', uirevision);\n  coerce('selectionrevision', uirevision);\n  coerce('modebar.orientation');\n  coerce('modebar.bgcolor', Color.addOpacity(layoutOut.paper_bgcolor, 0.5));\n  var modebarDefaultColor = Color.contrast(Color.rgb(layoutOut.modebar.bgcolor));\n  coerce('modebar.color', Color.addOpacity(modebarDefaultColor, 0.3));\n  coerce('modebar.activecolor', Color.addOpacity(modebarDefaultColor, 0.7));\n  coerce('modebar.uirevision', uirevision);\n  coerce('meta'); // do not include defaults in fullLayout when users do not set transition\n\n  if (Lib.isPlainObject(layoutIn.transition)) {\n    coerce('transition.duration');\n    coerce('transition.easing');\n    coerce('transition.ordering');\n  }\n\n  Registry.getComponentMethod('calendars', 'handleDefaults')(layoutIn, layoutOut, 'calendar');\n  Registry.getComponentMethod('fx', 'supplyLayoutGlobalDefaults')(layoutIn, layoutOut, coerce);\n};\n\nplots.plotAutoSize = function plotAutoSize(gd, layout, fullLayout) {\n  var context = gd._context || {};\n  var frameMargins = context.frameMargins;\n  var newWidth;\n  var newHeight;\n  var isPlotDiv = Lib.isPlotDiv(gd);\n  if (isPlotDiv) gd.emit('plotly_autosize'); // embedded in an iframe - just take the full iframe size\n  // if we get to this point, with no aspect ratio restrictions\n\n  if (context.fillFrame) {\n    newWidth = window.innerWidth;\n    newHeight = window.innerHeight; // somehow we get a few extra px height sometimes...\n    // just hide it\n\n    document.body.style.overflow = 'hidden';\n  } else {\n    // plotly.js - let the developers do what they want, either\n    // provide height and width for the container div,\n    // specify size in layout, or take the defaults,\n    // but don't enforce any ratio restrictions\n    var computedStyle = isPlotDiv ? window.getComputedStyle(gd) : {};\n    newWidth = parseFloat(computedStyle.width) || parseFloat(computedStyle.maxWidth) || fullLayout.width;\n    newHeight = parseFloat(computedStyle.height) || parseFloat(computedStyle.maxHeight) || fullLayout.height;\n\n    if (isNumeric(frameMargins) && frameMargins > 0) {\n      var factor = 1 - 2 * frameMargins;\n      newWidth = Math.round(factor * newWidth);\n      newHeight = Math.round(factor * newHeight);\n    }\n  }\n\n  var minWidth = plots.layoutAttributes.width.min;\n  var minHeight = plots.layoutAttributes.height.min;\n  if (newWidth < minWidth) newWidth = minWidth;\n  if (newHeight < minHeight) newHeight = minHeight;\n  var widthHasChanged = !layout.width && Math.abs(fullLayout.width - newWidth) > 1;\n  var heightHasChanged = !layout.height && Math.abs(fullLayout.height - newHeight) > 1;\n\n  if (heightHasChanged || widthHasChanged) {\n    if (widthHasChanged) fullLayout.width = newWidth;\n    if (heightHasChanged) fullLayout.height = newHeight;\n  } // cache initial autosize value, used in relayout when\n  // width or height values are set to null\n\n\n  if (!gd._initialAutoSize) {\n    gd._initialAutoSize = {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  plots.sanitizeMargins(fullLayout);\n};\n\nplots.supplyLayoutModuleDefaults = function (layoutIn, layoutOut, fullData, transitionData) {\n  var componentsRegistry = Registry.componentsRegistry;\n  var basePlotModules = layoutOut._basePlotModules;\n\n  var component, i, _module;\n\n  var Cartesian = Registry.subplotsRegistry.cartesian; // check if any components need to add more base plot modules\n  // that weren't captured by traces\n\n  for (component in componentsRegistry) {\n    _module = componentsRegistry[component];\n\n    if (_module.includeBasePlot) {\n      _module.includeBasePlot(layoutIn, layoutOut);\n    }\n  } // make sure we *at least* have some cartesian axes\n\n\n  if (!basePlotModules.length) {\n    basePlotModules.push(Cartesian);\n  } // ensure all cartesian axes have at least one subplot\n\n\n  if (layoutOut._has('cartesian')) {\n    Registry.getComponentMethod('grid', 'contentDefaults')(layoutIn, layoutOut);\n    Cartesian.finalizeSubplots(layoutIn, layoutOut);\n  } // sort subplot lists\n\n\n  for (var subplotType in layoutOut._subplots) {\n    layoutOut._subplots[subplotType].sort(Lib.subplotSort);\n  } // base plot module layout defaults\n\n\n  for (i = 0; i < basePlotModules.length; i++) {\n    _module = basePlotModules[i]; // e.g. pie does not have a layout-defaults step\n\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n  } // trace module layout defaults\n  // use _modules rather than _visibleModules so that even\n  // legendonly traces can include settings - eg barmode, which affects\n  // legend.traceorder default value.\n\n\n  var modules = layoutOut._modules;\n\n  for (i = 0; i < modules.length; i++) {\n    _module = modules[i];\n\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n  } // transform module layout defaults\n\n\n  var transformModules = layoutOut._transformModules;\n\n  for (i = 0; i < transformModules.length; i++) {\n    _module = transformModules[i];\n\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData, transitionData);\n    }\n  }\n\n  for (component in componentsRegistry) {\n    _module = componentsRegistry[component];\n\n    if (_module.supplyLayoutDefaults) {\n      _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n  }\n}; // Remove all plotly attributes from a div so it can be replotted fresh\n// TODO: these really need to be encapsulated into a much smaller set...\n\n\nplots.purge = function (gd) {\n  // note: we DO NOT remove _context because it doesn't change when we insert\n  // a new plot, and may have been set outside of our scope.\n  var fullLayout = gd._fullLayout || {};\n\n  if (fullLayout._glcontainer !== undefined) {\n    fullLayout._glcontainer.selectAll('.gl-canvas').remove();\n\n    fullLayout._glcontainer.remove();\n\n    fullLayout._glcanvas = null;\n  } // remove modebar\n\n\n  if (fullLayout._modeBar) fullLayout._modeBar.destroy();\n\n  if (gd._transitionData) {\n    // Ensure any dangling callbacks are simply dropped if the plot is purged.\n    // This is more or less only actually important for testing.\n    if (gd._transitionData._interruptCallbacks) {\n      gd._transitionData._interruptCallbacks.length = 0;\n    }\n\n    if (gd._transitionData._animationRaf) {\n      window.cancelAnimationFrame(gd._transitionData._animationRaf);\n    }\n  } // remove any planned throttles\n\n\n  Lib.clearThrottle(); // remove responsive handler\n\n  Lib.clearResponsive(gd); // data and layout\n\n  delete gd.data;\n  delete gd.layout;\n  delete gd._fullData;\n  delete gd._fullLayout;\n  delete gd.calcdata;\n  delete gd.framework;\n  delete gd.empty;\n  delete gd.fid;\n  delete gd.undoqueue; // action queue\n\n  delete gd.undonum;\n  delete gd.autoplay; // are we doing an action that doesn't go in undo queue?\n\n  delete gd.changed; // these get recreated on Plotly.plot anyway, but just to be safe\n  // (and to have a record of them...)\n\n  delete gd._promises;\n  delete gd._redrawTimer;\n  delete gd._hmlumcount;\n  delete gd._hmpixcount;\n  delete gd._transitionData;\n  delete gd._transitioning;\n  delete gd._initialAutoSize;\n  delete gd._transitioningWithDuration; // created during certain events, that *should* clean them up\n  // themselves, but may not if there was an error\n\n  delete gd._dragging;\n  delete gd._dragged;\n  delete gd._dragdata;\n  delete gd._hoverdata;\n  delete gd._snapshotInProgress;\n  delete gd._editing;\n  delete gd._mouseDownTime;\n  delete gd._legendMouseDownTime; // remove all event listeners\n\n  if (gd.removeAllListeners) gd.removeAllListeners();\n};\n\nplots.style = function (gd) {\n  var _modules = gd._fullLayout._visibleModules;\n  var styleModules = [];\n  var i; // some trace modules reuse the same style method,\n  // make sure to not unnecessary call them multiple times.\n\n  for (i = 0; i < _modules.length; i++) {\n    var _module = _modules[i];\n\n    if (_module.style) {\n      Lib.pushUnique(styleModules, _module.style);\n    }\n  }\n\n  for (i = 0; i < styleModules.length; i++) {\n    styleModules[i](gd);\n  }\n};\n\nplots.sanitizeMargins = function (fullLayout) {\n  // polar doesn't do margins...\n  if (!fullLayout || !fullLayout.margin) return;\n  var width = fullLayout.width;\n  var height = fullLayout.height;\n  var margin = fullLayout.margin;\n  var plotWidth = width - (margin.l + margin.r);\n  var plotHeight = height - (margin.t + margin.b);\n  var correction; // if margin.l + margin.r = 0 then plotWidth > 0\n  // as width >= 10 by supplyDefaults\n  // similarly for margin.t + margin.b\n\n  if (plotWidth < 0) {\n    correction = (width - 1) / (margin.l + margin.r);\n    margin.l = Math.floor(correction * margin.l);\n    margin.r = Math.floor(correction * margin.r);\n  }\n\n  if (plotHeight < 0) {\n    correction = (height - 1) / (margin.t + margin.b);\n    margin.t = Math.floor(correction * margin.t);\n    margin.b = Math.floor(correction * margin.b);\n  }\n};\n\nplots.clearAutoMarginIds = function (gd) {\n  gd._fullLayout._pushmarginIds = {};\n};\n\nplots.allowAutoMargin = function (gd, id) {\n  gd._fullLayout._pushmarginIds[id] = 1;\n};\n\nfunction initMargins(fullLayout) {\n  var margin = fullLayout.margin;\n\n  if (!fullLayout._size) {\n    var gs = fullLayout._size = {\n      l: Math.round(margin.l),\n      r: Math.round(margin.r),\n      t: Math.round(margin.t),\n      b: Math.round(margin.b),\n      p: Math.round(margin.pad)\n    };\n    gs.w = Math.round(fullLayout.width) - gs.l - gs.r;\n    gs.h = Math.round(fullLayout.height) - gs.t - gs.b;\n  }\n\n  if (!fullLayout._pushmargin) fullLayout._pushmargin = {};\n  if (!fullLayout._pushmarginIds) fullLayout._pushmarginIds = {};\n}\n/**\n * autoMargin: called by components that may need to expand the margins to\n * be rendered on-plot.\n *\n * @param {DOM element} gd\n * @param {string} id - an identifier unique (within this plot) to this object,\n *     so we can remove a previous margin expansion from the same object.\n * @param {object} o - the margin requirements of this object, or omit to delete\n *     this entry (like if it's hidden). Keys are:\n *     x, y: plot fraction of the anchor point.\n *     xl, xr, yt, yb: if the object has an extent defined in plot fraction,\n *         you can specify both edges as plot fractions in each dimension\n *     l, r, t, b: the pixels to pad past the plot fraction x[l|r] and y[t|b]\n *     pad: extra pixels to add in all directions, default 12 (why?)\n */\n\n\nplots.autoMargin = function (gd, id, o) {\n  var fullLayout = gd._fullLayout;\n  var pushMargin = fullLayout._pushmargin;\n  var pushMarginIds = fullLayout._pushmarginIds;\n\n  if (fullLayout.margin.autoexpand !== false) {\n    if (!o) {\n      delete pushMargin[id];\n      delete pushMarginIds[id];\n    } else {\n      var pad = o.pad;\n\n      if (pad === undefined) {\n        var margin = fullLayout.margin; // if no explicit pad is given, use 12px unless there's a\n        // specified margin that's smaller than that\n\n        pad = Math.min(12, margin.l, margin.r, margin.t, margin.b);\n      } // if the item is too big, just give it enough automargin to\n      // make sure you can still grab it and bring it back\n\n\n      if (o.l + o.r > fullLayout.width * 0.5) {\n        Lib.log('Margin push', id, 'is too big in x, dropping');\n        o.l = o.r = 0;\n      }\n\n      if (o.b + o.t > fullLayout.height * 0.5) {\n        Lib.log('Margin push', id, 'is too big in y, dropping');\n        o.b = o.t = 0;\n      }\n\n      var xl = o.xl !== undefined ? o.xl : o.x;\n      var xr = o.xr !== undefined ? o.xr : o.x;\n      var yt = o.yt !== undefined ? o.yt : o.y;\n      var yb = o.yb !== undefined ? o.yb : o.y;\n      pushMargin[id] = {\n        l: {\n          val: xl,\n          size: o.l + pad\n        },\n        r: {\n          val: xr,\n          size: o.r + pad\n        },\n        b: {\n          val: yb,\n          size: o.b + pad\n        },\n        t: {\n          val: yt,\n          size: o.t + pad\n        }\n      };\n      pushMarginIds[id] = 1;\n    }\n\n    if (!fullLayout._replotting) {\n      return plots.doAutoMargin(gd);\n    }\n  }\n};\n\nplots.doAutoMargin = function (gd) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout._size) fullLayout._size = {};\n  initMargins(fullLayout);\n  var gs = fullLayout._size;\n  var margin = fullLayout.margin;\n  var oldMargins = Lib.extendFlat({}, gs); // adjust margins for outside components\n  // fullLayout.margin is the requested margin,\n  // fullLayout._size has margins and plotsize after adjustment\n\n  var ml = margin.l;\n  var mr = margin.r;\n  var mt = margin.t;\n  var mb = margin.b;\n  var width = fullLayout.width;\n  var height = fullLayout.height;\n  var pushMargin = fullLayout._pushmargin;\n  var pushMarginIds = fullLayout._pushmarginIds;\n\n  if (fullLayout.margin.autoexpand !== false) {\n    for (var k in pushMargin) {\n      if (!pushMarginIds[k]) delete pushMargin[k];\n    } // fill in the requested margins\n\n\n    pushMargin.base = {\n      l: {\n        val: 0,\n        size: ml\n      },\n      r: {\n        val: 1,\n        size: mr\n      },\n      t: {\n        val: 1,\n        size: mt\n      },\n      b: {\n        val: 0,\n        size: mb\n      }\n    }; // now cycle through all the combinations of l and r\n    // (and t and b) to find the required margins\n\n    for (var k1 in pushMargin) {\n      var pushleft = pushMargin[k1].l || {};\n      var pushbottom = pushMargin[k1].b || {};\n      var fl = pushleft.val;\n      var pl = pushleft.size;\n      var fb = pushbottom.val;\n      var pb = pushbottom.size;\n\n      for (var k2 in pushMargin) {\n        if (isNumeric(pl) && pushMargin[k2].r) {\n          var fr = pushMargin[k2].r.val;\n          var pr = pushMargin[k2].r.size;\n\n          if (fr > fl) {\n            var newL = (pl * fr + (pr - width) * fl) / (fr - fl);\n            var newR = (pr * (1 - fl) + (pl - width) * (1 - fr)) / (fr - fl);\n\n            if (newL >= 0 && newR >= 0 && width - (newL + newR) > 0 && newL + newR > ml + mr) {\n              ml = newL;\n              mr = newR;\n            }\n          }\n        }\n\n        if (isNumeric(pb) && pushMargin[k2].t) {\n          var ft = pushMargin[k2].t.val;\n          var pt = pushMargin[k2].t.size;\n\n          if (ft > fb) {\n            var newB = (pb * ft + (pt - height) * fb) / (ft - fb);\n            var newT = (pt * (1 - fb) + (pb - height) * (1 - ft)) / (ft - fb);\n\n            if (newB >= 0 && newT >= 0 && height - (newT + newB) > 0 && newB + newT > mb + mt) {\n              mb = newB;\n              mt = newT;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  gs.l = Math.round(ml);\n  gs.r = Math.round(mr);\n  gs.t = Math.round(mt);\n  gs.b = Math.round(mb);\n  gs.p = Math.round(margin.pad);\n  gs.w = Math.round(width) - gs.l - gs.r;\n  gs.h = Math.round(height) - gs.t - gs.b; // if things changed and we're not already redrawing, trigger a redraw\n\n  if (!fullLayout._replotting && plots.didMarginChange(oldMargins, gs)) {\n    if ('_redrawFromAutoMarginCount' in fullLayout) {\n      fullLayout._redrawFromAutoMarginCount++;\n    } else {\n      fullLayout._redrawFromAutoMarginCount = 1;\n    } // Always allow at least one redraw and give each margin-push\n    // call 3 loops to converge. Of course, for most cases this way too many,\n    // but let's keep things on the safe side until we fix our\n    // auto-margin pipeline problems:\n    // https://github.com/plotly/plotly.js/issues/2704\n\n\n    var maxNumberOfRedraws = 3 * (1 + Object.keys(pushMarginIds).length);\n\n    if (fullLayout._redrawFromAutoMarginCount < maxNumberOfRedraws) {\n      return Registry.call('plot', gd);\n    } else {\n      Lib.warn('Too many auto-margin redraws.');\n    }\n  }\n};\n\nvar marginKeys = ['l', 'r', 't', 'b', 'p', 'w', 'h'];\n\nplots.didMarginChange = function (margin0, margin1) {\n  for (var i = 0; i < marginKeys.length; i++) {\n    var k = marginKeys[i];\n    var m0 = margin0[k];\n    var m1 = margin1[k]; // use 1px tolerance in case we old/new differ only\n    // by rounding errors, which can lead to infinite loops\n\n    if (!isNumeric(m0) || Math.abs(m1 - m0) > 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * JSONify the graph data and layout\n *\n * This function needs to recurse because some src can be inside\n * sub-objects.\n *\n * It also strips out functions and private (starts with _) elements.\n * Therefore, we can add temporary things to data and layout that don't\n * get saved.\n *\n * @param gd The graphDiv\n * @param {Boolean} dataonly If true, don't return layout.\n * @param {'keepref'|'keepdata'|'keepall'} [mode='keepref'] Filter what's kept\n *      keepref: remove data for which there's a src present\n *          eg if there's xsrc present (and xsrc is well-formed,\n *          ie has : and some chars before it), strip out x\n *      keepdata: remove all src tags, don't remove the data itself\n *      keepall: keep data and src\n * @param {String} output If you specify 'object', the result will not be stringified\n * @param {Boolean} useDefaults If truthy, use _fullLayout and _fullData\n * @returns {Object|String}\n */\n\n\nplots.graphJson = function (gd, dataonly, mode, output, useDefaults) {\n  // if the defaults aren't supplied yet, we need to do that...\n  if (useDefaults && dataonly && !gd._fullData || useDefaults && !dataonly && !gd._fullLayout) {\n    plots.supplyDefaults(gd);\n  }\n\n  var data = useDefaults ? gd._fullData : gd.data;\n  var layout = useDefaults ? gd._fullLayout : gd.layout;\n  var frames = (gd._transitionData || {})._frames;\n\n  function stripObj(d) {\n    if (typeof d === 'function') {\n      return null;\n    }\n\n    if (Lib.isPlainObject(d)) {\n      var o = {};\n      var v, src;\n\n      for (v in d) {\n        // remove private elements and functions\n        // _ is for private, [ is a mistake ie [object Object]\n        if (typeof d[v] === 'function' || ['_', '['].indexOf(v.charAt(0)) !== -1) {\n          continue;\n        } // look for src/data matches and remove the appropriate one\n\n\n        if (mode === 'keepdata') {\n          // keepdata: remove all ...src tags\n          if (v.substr(v.length - 3) === 'src') {\n            continue;\n          }\n        } else if (mode === 'keepstream') {\n          // keep sourced data if it's being streamed.\n          // similar to keepref, but if the 'stream' object exists\n          // in a trace, we will keep the data array.\n          src = d[v + 'src'];\n\n          if (typeof src === 'string' && src.indexOf(':') > 0) {\n            if (!Lib.isPlainObject(d.stream)) {\n              continue;\n            }\n          }\n        } else if (mode !== 'keepall') {\n          // keepref: remove sourced data but only\n          // if the source tag is well-formed\n          src = d[v + 'src'];\n\n          if (typeof src === 'string' && src.indexOf(':') > 0) {\n            continue;\n          }\n        } // OK, we're including this... recurse into it\n\n\n        o[v] = stripObj(d[v]);\n      }\n\n      return o;\n    }\n\n    if (Array.isArray(d)) {\n      return d.map(stripObj);\n    }\n\n    if (Lib.isTypedArray(d)) {\n      return Lib.simpleMap(d, Lib.identity);\n    } // convert native dates to date strings...\n    // mostly for external users exporting to plotly\n\n\n    if (Lib.isJSDate(d)) return Lib.ms2DateTimeLocal(+d);\n    return d;\n  }\n\n  var obj = {\n    data: (data || []).map(function (v) {\n      var d = stripObj(v); // fit has some little arrays in it that don't contain data,\n      // just fit params and meta\n\n      if (dataonly) {\n        delete d.fit;\n      }\n\n      return d;\n    })\n  };\n\n  if (!dataonly) {\n    obj.layout = stripObj(layout);\n  }\n\n  if (gd.framework && gd.framework.isPolar) obj = gd.framework.getConfig();\n  if (frames) obj.frames = stripObj(frames);\n  return output === 'object' ? obj : JSON.stringify(obj);\n};\n/**\n * Modify a keyframe using a list of operations:\n *\n * @param {array of objects} operations\n *      Sequence of operations to be performed on the keyframes\n */\n\n\nplots.modifyFrames = function (gd, operations) {\n  var i, op, frame;\n  var _frames = gd._transitionData._frames;\n  var _frameHash = gd._transitionData._frameHash;\n\n  for (i = 0; i < operations.length; i++) {\n    op = operations[i];\n\n    switch (op.type) {\n      // No reason this couldn't exist, but is currently unused/untested:\n\n      /* case 'rename':\n          frame = _frames[op.index];\n          delete _frameHash[frame.name];\n          _frameHash[op.name] = frame;\n          frame.name = op.name;\n          break;*/\n      case 'replace':\n        frame = op.value;\n        var oldName = (_frames[op.index] || {}).name;\n        var newName = frame.name;\n        _frames[op.index] = _frameHash[newName] = frame;\n\n        if (newName !== oldName) {\n          // If name has changed in addition to replacement, then update\n          // the lookup table:\n          delete _frameHash[oldName];\n          _frameHash[newName] = frame;\n        }\n\n        break;\n\n      case 'insert':\n        frame = op.value;\n        _frameHash[frame.name] = frame;\n\n        _frames.splice(op.index, 0, frame);\n\n        break;\n\n      case 'delete':\n        frame = _frames[op.index];\n        delete _frameHash[frame.name];\n\n        _frames.splice(op.index, 1);\n\n        break;\n    }\n  }\n\n  return Promise.resolve();\n};\n/*\n * Compute a keyframe. Merge a keyframe into its base frame(s) and\n * expand properties.\n *\n * @param {object} frameLookup\n *      An object containing frames keyed by name (i.e. gd._transitionData._frameHash)\n * @param {string} frame\n *      The name of the keyframe to be computed\n *\n * Returns: a new object with the merged content\n */\n\n\nplots.computeFrame = function (gd, frameName) {\n  var frameLookup = gd._transitionData._frameHash;\n  var i, traceIndices, traceIndex, destIndex; // Null or undefined will fail on .toString(). We'll allow numbers since we\n  // make it clear frames must be given string names, but we'll allow numbers\n  // here since they're otherwise fine for looking up frames as long as they're\n  // properly cast to strings. We really just want to ensure here that this\n  // 1) doesn't fail, and\n  // 2) doens't give an incorrect answer (which String(frameName) would)\n\n  if (!frameName) {\n    throw new Error('computeFrame must be given a string frame name');\n  }\n\n  var framePtr = frameLookup[frameName.toString()]; // Return false if the name is invalid:\n\n  if (!framePtr) {\n    return false;\n  }\n\n  var frameStack = [framePtr];\n  var frameNameStack = [framePtr.name]; // Follow frame pointers:\n\n  while (framePtr.baseframe && (framePtr = frameLookup[framePtr.baseframe.toString()])) {\n    // Avoid infinite loops:\n    if (frameNameStack.indexOf(framePtr.name) !== -1) break;\n    frameStack.push(framePtr);\n    frameNameStack.push(framePtr.name);\n  } // A new object for the merged result:\n\n\n  var result = {}; // Merge, starting with the last and ending with the desired frame:\n\n  while (framePtr = frameStack.pop()) {\n    if (framePtr.layout) {\n      result.layout = plots.extendLayout(result.layout, framePtr.layout);\n    }\n\n    if (framePtr.data) {\n      if (!result.data) {\n        result.data = [];\n      }\n\n      traceIndices = framePtr.traces;\n\n      if (!traceIndices) {\n        // If not defined, assume serial order starting at zero\n        traceIndices = [];\n\n        for (i = 0; i < framePtr.data.length; i++) {\n          traceIndices[i] = i;\n        }\n      }\n\n      if (!result.traces) {\n        result.traces = [];\n      }\n\n      for (i = 0; i < framePtr.data.length; i++) {\n        // Loop through this frames data, find out where it should go,\n        // and merge it!\n        traceIndex = traceIndices[i];\n\n        if (traceIndex === undefined || traceIndex === null) {\n          continue;\n        }\n\n        destIndex = result.traces.indexOf(traceIndex);\n\n        if (destIndex === -1) {\n          destIndex = result.data.length;\n          result.traces[destIndex] = traceIndex;\n        }\n\n        result.data[destIndex] = plots.extendTrace(result.data[destIndex], framePtr.data[i]);\n      }\n    }\n  }\n\n  return result;\n};\n/*\n * Recompute the lookup table that maps frame name -> frame object. addFrames/\n * deleteFrames already manages this data one at a time, so the only time this\n * is necessary is if you poke around manually in `gd._transitionData._frames`\n * and create and haven't updated the lookup table.\n */\n\n\nplots.recomputeFrameHash = function (gd) {\n  var hash = gd._transitionData._frameHash = {};\n  var frames = gd._transitionData._frames;\n\n  for (var i = 0; i < frames.length; i++) {\n    var frame = frames[i];\n\n    if (frame && frame.name) {\n      hash[frame.name] = frame;\n    }\n  }\n};\n/**\n * Extend an object, treating container arrays very differently by extracting\n * their contents and merging them separately.\n *\n * This exists so that we can extendDeepNoArrays and avoid stepping into data\n * arrays without knowledge of the plot schema, but so that we may also manually\n * recurse into known container arrays, such as transforms.\n *\n * See extendTrace and extendLayout below for usage.\n */\n\n\nplots.extendObjectWithContainers = function (dest, src, containerPaths) {\n  var containerProp, containerVal, i, j, srcProp, destProp, srcContainer, destContainer;\n  var copy = Lib.extendDeepNoArrays({}, src || {});\n  var expandedObj = Lib.expandObjectPaths(copy);\n  var containerObj = {}; // Step through and extract any container properties. Otherwise extendDeepNoArrays\n  // will clobber any existing properties with an empty array and then supplyDefaults\n  // will reset everything to defaults.\n\n  if (containerPaths && containerPaths.length) {\n    for (i = 0; i < containerPaths.length; i++) {\n      containerProp = Lib.nestedProperty(expandedObj, containerPaths[i]);\n      containerVal = containerProp.get();\n\n      if (containerVal === undefined) {\n        Lib.nestedProperty(containerObj, containerPaths[i]).set(null);\n      } else {\n        containerProp.set(null);\n        Lib.nestedProperty(containerObj, containerPaths[i]).set(containerVal);\n      }\n    }\n  }\n\n  dest = Lib.extendDeepNoArrays(dest || {}, expandedObj);\n\n  if (containerPaths && containerPaths.length) {\n    for (i = 0; i < containerPaths.length; i++) {\n      srcProp = Lib.nestedProperty(containerObj, containerPaths[i]);\n      srcContainer = srcProp.get();\n      if (!srcContainer) continue;\n      destProp = Lib.nestedProperty(dest, containerPaths[i]);\n      destContainer = destProp.get();\n\n      if (!Array.isArray(destContainer)) {\n        destContainer = [];\n        destProp.set(destContainer);\n      }\n\n      for (j = 0; j < srcContainer.length; j++) {\n        var srcObj = srcContainer[j];\n        if (srcObj === null) destContainer[j] = null;else {\n          destContainer[j] = plots.extendObjectWithContainers(destContainer[j], srcObj);\n        }\n      }\n\n      destProp.set(destContainer);\n    }\n  }\n\n  return dest;\n};\n\nplots.dataArrayContainers = ['transforms', 'dimensions'];\nplots.layoutArrayContainers = Registry.layoutArrayContainers;\n/*\n * Extend a trace definition. This method:\n *\n *  1. directly transfers any array references\n *  2. manually recurses into container arrays like transforms\n *\n * The result is the original object reference with the new contents merged in.\n */\n\nplots.extendTrace = function (destTrace, srcTrace) {\n  return plots.extendObjectWithContainers(destTrace, srcTrace, plots.dataArrayContainers);\n};\n/*\n * Extend a layout definition. This method:\n *\n *  1. directly transfers any array references (not critically important for\n *     layout since there aren't really data arrays)\n *  2. manually recurses into container arrays like annotations\n *\n * The result is the original object reference with the new contents merged in.\n */\n\n\nplots.extendLayout = function (destLayout, srcLayout) {\n  return plots.extendObjectWithContainers(destLayout, srcLayout, plots.layoutArrayContainers);\n};\n/**\n * Transition to a set of new data and layout properties from Plotly.animate\n *\n * @param {DOM element} gd\n * @param {Object[]} data\n *      an array of data objects following the normal Plotly data definition format\n * @param {Object} layout\n *      a layout object, following normal Plotly layout format\n * @param {Number[]} traces\n *      indices of the corresponding traces specified in `data`\n * @param {Object} frameOpts\n *      options for the frame (i.e. whether to redraw post-transition)\n * @param {Object} transitionOpts\n *      options for the transition\n */\n\n\nplots.transition = function (gd, data, layout, traces, frameOpts, transitionOpts) {\n  var opts = {\n    redraw: frameOpts.redraw\n  };\n  var transitionedTraces = {};\n  var axEdits = [];\n\n  opts.prepareFn = function () {\n    var dataLength = Array.isArray(data) ? data.length : 0;\n    var traceIndices = traces.slice(0, dataLength);\n\n    for (var i = 0; i < traceIndices.length; i++) {\n      var traceIdx = traceIndices[i];\n      var trace = gd._fullData[traceIdx];\n      var _module = trace._module; // There's nothing to do if this module is not defined:\n\n      if (!_module) continue; // Don't register the trace as transitioned if it doesn't know what to do.\n      // If it *is* registered, it will receive a callback that it's responsible\n      // for calling in order to register the transition as having completed.\n\n      if (_module.animatable) {\n        var n = _module.basePlotModule.name;\n        if (!transitionedTraces[n]) transitionedTraces[n] = [];\n        transitionedTraces[n].push(traceIdx);\n      }\n\n      gd.data[traceIndices[i]] = plots.extendTrace(gd.data[traceIndices[i]], data[i]);\n    } // Follow the same procedure. Clone it so we don't mangle the input, then\n    // expand any object paths so we can merge deep into gd.layout:\n\n\n    var layoutUpdate = Lib.expandObjectPaths(Lib.extendDeepNoArrays({}, layout)); // Before merging though, we need to modify the incoming layout. We only\n    // know how to *transition* layout ranges, so it's imperative that a new\n    // range not be sent to the layout before the transition has started. So\n    // we must remove the things we can transition:\n\n    var axisAttrRe = /^[xy]axis[0-9]*$/;\n\n    for (var attr in layoutUpdate) {\n      if (!axisAttrRe.test(attr)) continue;\n      delete layoutUpdate[attr].range;\n    }\n\n    plots.extendLayout(gd.layout, layoutUpdate); // Supply defaults after applying the incoming properties. Note that any attempt\n    // to simplify this step and reduce the amount of work resulted in the reconstruction\n    // of essentially the whole supplyDefaults step, so that it seems sensible to just use\n    // supplyDefaults even though it's heavier than would otherwise be desired for\n    // transitions:\n    // first delete calcdata so supplyDefaults knows a calc step is coming\n\n    delete gd.calcdata;\n    plots.supplyDefaults(gd);\n    plots.doCalcdata(gd);\n    var newLayout = Lib.expandObjectPaths(layout);\n\n    if (newLayout) {\n      var subplots = gd._fullLayout._plots;\n\n      for (var k in subplots) {\n        var plotinfo = subplots[k];\n        var xa = plotinfo.xaxis;\n        var ya = plotinfo.yaxis;\n        var xr0 = xa.range.slice();\n        var yr0 = ya.range.slice();\n        var xr1 = null;\n        var yr1 = null;\n        var editX = null;\n        var editY = null;\n\n        if (Array.isArray(newLayout[xa._name + '.range'])) {\n          xr1 = newLayout[xa._name + '.range'].slice();\n        } else if (Array.isArray((newLayout[xa._name] || {}).range)) {\n          xr1 = newLayout[xa._name].range.slice();\n        }\n\n        if (Array.isArray(newLayout[ya._name + '.range'])) {\n          yr1 = newLayout[ya._name + '.range'].slice();\n        } else if (Array.isArray((newLayout[ya._name] || {}).range)) {\n          yr1 = newLayout[ya._name].range.slice();\n        }\n\n        if (xr0 && xr1 && (xa.r2l(xr0[0]) !== xa.r2l(xr1[0]) || xa.r2l(xr0[1]) !== xa.r2l(xr1[1]))) {\n          editX = {\n            xr0: xr0,\n            xr1: xr1\n          };\n        }\n\n        if (yr0 && yr1 && (ya.r2l(yr0[0]) !== ya.r2l(yr1[0]) || ya.r2l(yr0[1]) !== ya.r2l(yr1[1]))) {\n          editY = {\n            yr0: yr0,\n            yr1: yr1\n          };\n        }\n\n        if (editX || editY) {\n          axEdits.push(Lib.extendFlat({\n            plotinfo: plotinfo\n          }, editX, editY));\n        }\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  opts.runFn = function (makeCallback) {\n    var traceTransitionOpts;\n    var basePlotModules = gd._fullLayout._basePlotModules;\n    var hasAxisTransition = axEdits.length;\n    var i;\n\n    if (layout) {\n      for (i = 0; i < basePlotModules.length; i++) {\n        if (basePlotModules[i].transitionAxes) {\n          basePlotModules[i].transitionAxes(gd, axEdits, transitionOpts, makeCallback);\n        }\n      }\n    } // Here handle the exception that we refuse to animate scales and axes at the same\n    // time. In other words, if there's an axis transition, then set the data transition\n    // to instantaneous.\n\n\n    if (hasAxisTransition) {\n      traceTransitionOpts = Lib.extendFlat({}, transitionOpts);\n      traceTransitionOpts.duration = 0; // This means do not transition cartesian traces,\n      // this happens on layout-only (e.g. axis range) animations\n\n      delete transitionedTraces.cartesian;\n    } else {\n      traceTransitionOpts = transitionOpts;\n    } // Note that we pass a callback to *create* the callback that must be invoked on completion.\n    // This is since not all traces know about transitions, so it greatly simplifies matters if\n    // the trace is responsible for creating a callback, if needed, and then executing it when\n    // the time is right.\n\n\n    for (var n in transitionedTraces) {\n      var traceIndices = transitionedTraces[n];\n      var _module = gd._fullData[traceIndices[0]]._module;\n\n      _module.basePlotModule.plot(gd, traceIndices, traceTransitionOpts, makeCallback);\n    }\n  };\n\n  return _transition(gd, transitionOpts, opts);\n};\n/**\n * Transition to a set of new data and layout properties from Plotly.react\n *\n * @param {DOM element} gd\n * @param {object} restyleFlags\n * - anim {'all'|'some'}\n * @param {object} relayoutFlags\n * - anim {'all'|'some'}\n * @param {object} oldFullLayout : old (pre Plotly.react) fullLayout\n */\n\n\nplots.transitionFromReact = function (gd, restyleFlags, relayoutFlags, oldFullLayout) {\n  var fullLayout = gd._fullLayout;\n  var transitionOpts = fullLayout.transition;\n  var opts = {};\n  var axEdits = [];\n\n  opts.prepareFn = function () {\n    var subplots = fullLayout._plots; // no need to redraw at end of transition,\n    // if all changes are animatable\n\n    opts.redraw = false;\n    if (restyleFlags.anim === 'some') opts.redraw = true;\n    if (relayoutFlags.anim === 'some') opts.redraw = true;\n\n    for (var k in subplots) {\n      var plotinfo = subplots[k];\n      var xa = plotinfo.xaxis;\n      var ya = plotinfo.yaxis;\n\n      var xr0 = oldFullLayout[xa._name].range.slice();\n\n      var yr0 = oldFullLayout[ya._name].range.slice();\n\n      var xr1 = xa.range.slice();\n      var yr1 = ya.range.slice();\n      xa.setScale();\n      ya.setScale();\n      var editX = null;\n      var editY = null;\n\n      if (xa.r2l(xr0[0]) !== xa.r2l(xr1[0]) || xa.r2l(xr0[1]) !== xa.r2l(xr1[1])) {\n        editX = {\n          xr0: xr0,\n          xr1: xr1\n        };\n      }\n\n      if (ya.r2l(yr0[0]) !== ya.r2l(yr1[0]) || ya.r2l(yr0[1]) !== ya.r2l(yr1[1])) {\n        editY = {\n          yr0: yr0,\n          yr1: yr1\n        };\n      }\n\n      if (editX || editY) {\n        axEdits.push(Lib.extendFlat({\n          plotinfo: plotinfo\n        }, editX, editY));\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  opts.runFn = function (makeCallback) {\n    var fullData = gd._fullData;\n    var fullLayout = gd._fullLayout;\n    var basePlotModules = fullLayout._basePlotModules;\n    var axisTransitionOpts;\n    var traceTransitionOpts;\n    var transitionedTraces;\n    var allTraceIndices = [];\n\n    for (var i = 0; i < fullData.length; i++) {\n      allTraceIndices.push(i);\n    }\n\n    function transitionAxes() {\n      for (var j = 0; j < basePlotModules.length; j++) {\n        if (basePlotModules[j].transitionAxes) {\n          basePlotModules[j].transitionAxes(gd, axEdits, axisTransitionOpts, makeCallback);\n        }\n      }\n    }\n\n    function transitionTraces() {\n      for (var j = 0; j < basePlotModules.length; j++) {\n        basePlotModules[j].plot(gd, transitionedTraces, traceTransitionOpts, makeCallback);\n      }\n    }\n\n    if (axEdits.length && restyleFlags.anim) {\n      if (transitionOpts.ordering === 'traces first') {\n        axisTransitionOpts = Lib.extendFlat({}, transitionOpts, {\n          duration: 0\n        });\n        transitionedTraces = allTraceIndices;\n        traceTransitionOpts = transitionOpts;\n        setTimeout(transitionAxes, transitionOpts.duration);\n        transitionTraces();\n      } else {\n        axisTransitionOpts = transitionOpts;\n        transitionedTraces = null;\n        traceTransitionOpts = Lib.extendFlat({}, transitionOpts, {\n          duration: 0\n        });\n        setTimeout(transitionTraces, axisTransitionOpts.duration);\n        transitionAxes();\n      }\n    } else if (axEdits.length) {\n      axisTransitionOpts = transitionOpts;\n      transitionAxes();\n    } else if (restyleFlags.anim) {\n      transitionedTraces = allTraceIndices;\n      traceTransitionOpts = transitionOpts;\n      transitionTraces();\n    }\n  };\n\n  return _transition(gd, transitionOpts, opts);\n};\n/**\n * trace/layout transition wrapper that works\n * for transitions initiated by Plotly.animate and Plotly.react.\n *\n * @param {DOM element} gd\n * @param {object} transitionOpts\n * @param {object} opts\n * - redraw {boolean}\n * - prepareFn {function} *should return a Promise*\n * - runFn {function} ran inside executeTransitions\n */\n\n\nfunction _transition(gd, transitionOpts, opts) {\n  var aborted = false;\n\n  function executeCallbacks(list) {\n    var p = Promise.resolve();\n    if (!list) return p;\n\n    while (list.length) {\n      p = p.then(list.shift());\n    }\n\n    return p;\n  }\n\n  function flushCallbacks(list) {\n    if (!list) return;\n\n    while (list.length) {\n      list.shift();\n    }\n  }\n\n  function executeTransitions() {\n    gd.emit('plotly_transitioning', []);\n    return new Promise(function (resolve) {\n      // This flag is used to disabled things like autorange:\n      gd._transitioning = true; // When instantaneous updates are coming through quickly, it's too much to simply disable\n      // all interaction, so store this flag so we can disambiguate whether mouse interactions\n      // should be fully disabled or not:\n\n      if (transitionOpts.duration > 0) {\n        gd._transitioningWithDuration = true;\n      } // If another transition is triggered, this callback will be executed simply because it's\n      // in the interruptCallbacks queue. If this transition completes, it will instead flush\n      // that queue and forget about this callback.\n\n\n      gd._transitionData._interruptCallbacks.push(function () {\n        aborted = true;\n      });\n\n      if (opts.redraw) {\n        gd._transitionData._interruptCallbacks.push(function () {\n          return Registry.call('redraw', gd);\n        });\n      } // Emit this and make sure it happens last:\n\n\n      gd._transitionData._interruptCallbacks.push(function () {\n        gd.emit('plotly_transitioninterrupted', []);\n      }); // Construct callbacks that are executed on transition end. This ensures the d3 transitions\n      // are *complete* before anything else is done.\n\n\n      var numCallbacks = 0;\n      var numCompleted = 0;\n\n      function makeCallback() {\n        numCallbacks++;\n        return function () {\n          numCompleted++; // When all are complete, perform a redraw:\n\n          if (!aborted && numCompleted === numCallbacks) {\n            completeTransition(resolve);\n          }\n        };\n      }\n\n      opts.runFn(makeCallback); // If nothing else creates a callback, then this will trigger the completion in the next tick:\n\n      setTimeout(makeCallback());\n    });\n  }\n\n  function completeTransition(callback) {\n    // This a simple workaround for tests which purge the graph before animations\n    // have completed. That's not a very common case, so this is the simplest\n    // fix.\n    if (!gd._transitionData) return;\n    flushCallbacks(gd._transitionData._interruptCallbacks);\n    return Promise.resolve().then(function () {\n      if (opts.redraw) {\n        return Registry.call('redraw', gd);\n      }\n    }).then(function () {\n      // Set transitioning false again once the redraw has occurred. This is used, for example,\n      // to prevent the trailing redraw from autoranging:\n      gd._transitioning = false;\n      gd._transitioningWithDuration = false;\n      gd.emit('plotly_transitioned', []);\n    }).then(callback);\n  }\n\n  function interruptPreviousTransitions() {\n    // Fail-safe against purged plot:\n    if (!gd._transitionData) return; // If a transition is interrupted, set this to false. At the moment, the only thing that would\n    // interrupt a transition is another transition, so that it will momentarily be set to true\n    // again, but this determines whether autorange or dragbox work, so it's for the sake of\n    // cleanliness:\n\n    gd._transitioning = false;\n    return executeCallbacks(gd._transitionData._interruptCallbacks);\n  }\n\n  var seq = [plots.previousPromises, interruptPreviousTransitions, opts.prepareFn, plots.rehover, executeTransitions];\n  var transitionStarting = Lib.syncOrAsync(seq, gd);\n\n  if (!transitionStarting || !transitionStarting.then) {\n    transitionStarting = Promise.resolve();\n  }\n\n  return transitionStarting.then(function () {\n    return gd;\n  });\n}\n\nplots.doCalcdata = function (gd, traces) {\n  var axList = axisIDs.list(gd);\n  var fullData = gd._fullData;\n  var fullLayout = gd._fullLayout;\n\n  var trace, _module, i, j; // XXX: Is this correct? Needs a closer look so that *some* traces can be recomputed without\n  // *all* needing doCalcdata:\n\n\n  var calcdata = new Array(fullData.length);\n  var oldCalcdata = (gd.calcdata || []).slice();\n  gd.calcdata = calcdata; // extra helper variables\n  // how many box/violins plots do we have (in case they're grouped)\n\n  fullLayout._numBoxes = 0;\n  fullLayout._numViolins = 0; // initialize violin per-scale-group stats container\n\n  fullLayout._violinScaleGroupStats = {}; // for calculating avg luminosity of heatmaps\n\n  gd._hmpixcount = 0;\n  gd._hmlumcount = 0; // for sharing colors across pies / sunbursts / treemap / funnelarea (and for legend)\n\n  fullLayout._piecolormap = {};\n  fullLayout._sunburstcolormap = {};\n  fullLayout._treemapcolormap = {};\n  fullLayout._funnelareacolormap = {}; // If traces were specified and this trace was not included,\n  // then transfer it over from the old calcdata:\n\n  for (i = 0; i < fullData.length; i++) {\n    if (Array.isArray(traces) && traces.indexOf(i) === -1) {\n      calcdata[i] = oldCalcdata[i];\n      continue;\n    }\n  }\n\n  for (i = 0; i < fullData.length; i++) {\n    trace = fullData[i];\n    trace._arrayAttrs = PlotSchema.findArrayAttributes(trace); // keep track of trace extremes (for autorange) in here\n\n    trace._extremes = {};\n  } // add polar axes to axis list\n\n\n  var polarIds = fullLayout._subplots.polar || [];\n\n  for (i = 0; i < polarIds.length; i++) {\n    axList.push(fullLayout[polarIds[i]].radialaxis, fullLayout[polarIds[i]].angularaxis);\n  }\n\n  var hasCalcTransform = false;\n\n  function transformCalci(i) {\n    trace = fullData[i];\n    _module = trace._module;\n\n    if (trace.visible === true && trace.transforms) {\n      // we need one round of trace module calc before\n      // the calc transform to 'fill in' the categories list\n      // used for example in the data-to-coordinate method\n      if (_module && _module.calc) {\n        var cdi = _module.calc(gd, trace); // must clear scene 'batches', so that 2nd\n        // _module.calc call starts from scratch\n\n\n        if (cdi[0] && cdi[0].t && cdi[0].t._scene) {\n          delete cdi[0].t._scene.dirty;\n        }\n      }\n\n      for (j = 0; j < trace.transforms.length; j++) {\n        var transform = trace.transforms[j];\n        _module = transformsRegistry[transform.type];\n\n        if (_module && _module.calcTransform) {\n          trace._hasCalcTransform = true;\n          hasCalcTransform = true;\n\n          _module.calcTransform(gd, trace, transform);\n        }\n      }\n    }\n  }\n\n  function calci(i, isContainer) {\n    trace = fullData[i];\n    _module = trace._module;\n    if (!!_module.isContainer !== isContainer) return;\n    var cd = [];\n\n    if (trace.visible === true && trace._length !== 0) {\n      // clear existing ref in case it got relinked\n      delete trace._indexToPoints; // keep ref of index-to-points map object of the *last* enabled transform,\n      // this index-to-points map object is required to determine the calcdata indices\n      // that correspond to input indices (e.g. from 'selectedpoints')\n\n      var transforms = trace.transforms || [];\n\n      for (j = transforms.length - 1; j >= 0; j--) {\n        if (transforms[j].enabled) {\n          trace._indexToPoints = transforms[j]._indexToPoints;\n          break;\n        }\n      }\n\n      if (_module && _module.calc) {\n        cd = _module.calc(gd, trace);\n      }\n    } // Make sure there is a first point.\n    //\n    // This ensures there is a calcdata item for every trace,\n    // even if cartesian logic doesn't handle it (for things like legends).\n\n\n    if (!Array.isArray(cd) || !cd[0]) {\n      cd = [{\n        x: BADNUM,\n        y: BADNUM\n      }];\n    } // add the trace-wide properties to the first point,\n    // per point properties to every point\n    // t is the holder for trace-wide properties\n\n\n    if (!cd[0].t) cd[0].t = {};\n    cd[0].trace = trace;\n    calcdata[i] = cd;\n  }\n\n  setupAxisCategories(axList, fullData); // 'transform' loop - must calc container traces first\n  // so that if their dependent traces can get transform properly\n\n  for (i = 0; i < fullData.length; i++) calci(i, true);\n\n  for (i = 0; i < fullData.length; i++) transformCalci(i); // clear stuff that should recomputed in 'regular' loop\n\n\n  if (hasCalcTransform) setupAxisCategories(axList, fullData); // 'regular' loop - make sure container traces (eg carpet) calc before\n  // contained traces (eg contourcarpet)\n\n  for (i = 0; i < fullData.length; i++) calci(i, true);\n\n  for (i = 0; i < fullData.length; i++) calci(i, false);\n\n  doCrossTraceCalc(gd); // Sort axis categories per value if specified\n\n  var sorted = sortAxisCategoriesByValue(axList, gd);\n\n  if (sorted.length) {\n    // how many box/violins plots do we have (in case they're grouped)\n    fullLayout._numBoxes = 0;\n    fullLayout._numViolins = 0; // If a sort operation was performed, run calc() again\n\n    for (i = 0; i < sorted.length; i++) calci(sorted[i], true);\n\n    for (i = 0; i < sorted.length; i++) calci(sorted[i], false);\n\n    doCrossTraceCalc(gd);\n  }\n\n  Registry.getComponentMethod('fx', 'calc')(gd);\n  Registry.getComponentMethod('errorbars', 'calc')(gd);\n};\n\nvar sortAxisCategoriesByValueRegex = /(total|sum|min|max|mean|median) (ascending|descending)/;\n\nfunction sortAxisCategoriesByValue(axList, gd) {\n  var affectedTraces = [];\n  var i, j, k, l, o;\n\n  function zMapCategory(type, ax, value) {\n    var axLetter = ax._id.charAt(0);\n\n    if (type === 'histogram2dcontour') {\n      var counterAxLetter = ax._counterAxes[0];\n      var counterAx = axisIDs.getFromId(gd, counterAxLetter);\n      var xCategorical = axLetter === 'x' || counterAxLetter === 'x' && counterAx.type === 'category';\n      var yCategorical = axLetter === 'y' || counterAxLetter === 'y' && counterAx.type === 'category';\n      return function (o, l) {\n        if (o === 0 || l === 0) return -1; // Skip first row and column\n\n        if (xCategorical && o === value[l].length - 1) return -1;\n        if (yCategorical && l === value.length - 1) return -1;\n        return (axLetter === 'y' ? l : o) - 1;\n      };\n    } else {\n      return function (o, l) {\n        return axLetter === 'y' ? l : o;\n      };\n    }\n  }\n\n  var aggFn = {\n    'min': function (values) {\n      return Lib.aggNums(Math.min, null, values);\n    },\n    'max': function (values) {\n      return Lib.aggNums(Math.max, null, values);\n    },\n    'sum': function (values) {\n      return Lib.aggNums(function (a, b) {\n        return a + b;\n      }, null, values);\n    },\n    'total': function (values) {\n      return Lib.aggNums(function (a, b) {\n        return a + b;\n      }, null, values);\n    },\n    'mean': function (values) {\n      return Lib.mean(values);\n    },\n    'median': function (values) {\n      return Lib.median(values);\n    }\n  };\n\n  for (i = 0; i < axList.length; i++) {\n    var ax = axList[i];\n    if (ax.type !== 'category') continue; // Order by value\n\n    var match = ax.categoryorder.match(sortAxisCategoriesByValueRegex);\n\n    if (match) {\n      var aggregator = match[1];\n      var order = match[2]; // Store values associated with each category\n\n      var categoriesValue = [];\n\n      for (j = 0; j < ax._categories.length; j++) {\n        categoriesValue.push([ax._categories[j], []]);\n      } // Collect values across traces\n\n\n      for (j = 0; j < ax._traceIndices.length; j++) {\n        var traceIndex = ax._traceIndices[j];\n        var fullTrace = gd._fullData[traceIndex];\n\n        var axLetter = ax._id.charAt(0); // Skip over invisible traces\n\n\n        if (fullTrace.visible !== true) continue;\n        var type = fullTrace.type;\n\n        if (Registry.traceIs(fullTrace, 'histogram')) {\n          delete fullTrace._xautoBinFinished;\n          delete fullTrace._yautoBinFinished;\n        }\n\n        var cd = gd.calcdata[traceIndex];\n\n        for (k = 0; k < cd.length; k++) {\n          var cdi = cd[k];\n          var cat, catIndex, value;\n\n          if (type === 'splom') {\n            // If `splom`, collect values across dimensions\n            // Find which dimension the current axis is representing\n            var currentDimensionIndex = fullTrace._axesDim[ax._id]; // Apply logic to associated x axis if it's defined\n\n            if (axLetter === 'y') {\n              var associatedXAxisID = fullTrace._diag[currentDimensionIndex][0];\n              if (associatedXAxisID) ax = gd._fullLayout[axisIDs.id2name(associatedXAxisID)];\n            }\n\n            var categories = cdi.trace.dimensions[currentDimensionIndex].values;\n\n            for (l = 0; l < categories.length; l++) {\n              cat = categories[l];\n              catIndex = ax._categoriesMap[cat]; // Collect associated values at index `l` over all other dimensions\n\n              for (o = 0; o < cdi.trace.dimensions.length; o++) {\n                if (o === currentDimensionIndex) continue;\n                var dimension = cdi.trace.dimensions[o];\n                categoriesValue[catIndex][1].push(dimension.values[l]);\n              }\n            }\n          } else if (type === 'scattergl') {\n            // If `scattergl`, collect all values stashed under cdi.t\n            for (l = 0; l < cdi.t.x.length; l++) {\n              if (axLetter === 'x') {\n                cat = cdi.t.x[l];\n                catIndex = cat;\n                value = cdi.t.y[l];\n              }\n\n              if (axLetter === 'y') {\n                cat = cdi.t.y[l];\n                catIndex = cat;\n                value = cdi.t.x[l];\n              }\n\n              categoriesValue[catIndex][1].push(value);\n            } // must clear scene 'batches', so that 2nd\n            // _module.calc call starts from scratch\n\n\n            if (cdi.t && cdi.t._scene) {\n              delete cdi.t._scene.dirty;\n            }\n          } else if (cdi.hasOwnProperty('z')) {\n            // If 2dMap, collect values in `z`\n            value = cdi.z;\n            var mapping = zMapCategory(fullTrace.type, ax, value);\n\n            for (l = 0; l < value.length; l++) {\n              for (o = 0; o < value[l].length; o++) {\n                catIndex = mapping(o, l);\n                if (catIndex + 1) categoriesValue[catIndex][1].push(value[l][o]);\n              }\n            }\n          } else {\n            // For all other 2d cartesian traces\n            if (axLetter === 'x') {\n              cat = cdi.p + 1 ? cdi.p : cdi.x;\n              value = cdi.s || cdi.v || cdi.y;\n            } else if (axLetter === 'y') {\n              cat = cdi.p + 1 ? cdi.p : cdi.y;\n              value = cdi.s || cdi.v || cdi.x;\n            }\n\n            if (!Array.isArray(value)) value = [value];\n\n            for (l = 0; l < value.length; l++) {\n              categoriesValue[cat][1].push(value[l]);\n            }\n          }\n        }\n      }\n\n      ax._categoriesValue = categoriesValue;\n      var categoriesAggregatedValue = [];\n\n      for (j = 0; j < categoriesValue.length; j++) {\n        categoriesAggregatedValue.push([categoriesValue[j][0], aggFn[aggregator](categoriesValue[j][1])]);\n      } // Sort by aggregated value\n\n\n      categoriesAggregatedValue.sort(function (a, b) {\n        return a[1] - b[1];\n      });\n      ax._categoriesAggregatedValue = categoriesAggregatedValue; // Set new category order\n\n      ax._initialCategories = categoriesAggregatedValue.map(function (c) {\n        return c[0];\n      }); // Reverse if descending\n\n      if (order === 'descending') {\n        ax._initialCategories.reverse();\n      } // Sort all matching axes\n\n\n      affectedTraces = affectedTraces.concat(ax.sortByInitialCategories());\n    }\n  }\n\n  return affectedTraces;\n}\n\nfunction setupAxisCategories(axList, fullData) {\n  for (var i = 0; i < axList.length; i++) {\n    var ax = axList[i];\n    ax.clearCalc();\n\n    if (ax.type === 'multicategory') {\n      ax.setupMultiCategory(fullData);\n    }\n  }\n}\n\nfunction doCrossTraceCalc(gd) {\n  var fullLayout = gd._fullLayout;\n  var modules = fullLayout._visibleModules;\n  var hash = {};\n  var i, j, k; // position and range calculations for traces that\n  // depend on each other ie bars (stacked or grouped)\n  // and boxes (grouped) push each other out of the way\n\n  for (j = 0; j < modules.length; j++) {\n    var _module = modules[j];\n    var fn = _module.crossTraceCalc;\n\n    if (fn) {\n      var spType = _module.basePlotModule.name;\n\n      if (hash[spType]) {\n        Lib.pushUnique(hash[spType], fn);\n      } else {\n        hash[spType] = [fn];\n      }\n    }\n  }\n\n  for (k in hash) {\n    var methods = hash[k];\n    var subplots = fullLayout._subplots[k];\n\n    if (Array.isArray(subplots)) {\n      for (i = 0; i < subplots.length; i++) {\n        var sp = subplots[i];\n        var spInfo = k === 'cartesian' ? fullLayout._plots[sp] : fullLayout[sp];\n\n        for (j = 0; j < methods.length; j++) {\n          methods[j](gd, spInfo, sp);\n        }\n      }\n    } else {\n      for (j = 0; j < methods.length; j++) {\n        methods[j](gd);\n      }\n    }\n  }\n}\n\nplots.rehover = function (gd) {\n  if (gd._fullLayout._rehover) {\n    gd._fullLayout._rehover();\n  }\n};\n\nplots.redrag = function (gd) {\n  if (gd._fullLayout._redrag) {\n    gd._fullLayout._redrag();\n  }\n};\n\nplots.generalUpdatePerTraceModule = function (gd, subplot, subplotCalcData, subplotLayout) {\n  var traceHashOld = subplot.traceHash;\n  var traceHash = {};\n  var i; // build up moduleName -> calcData hash\n\n  for (i = 0; i < subplotCalcData.length; i++) {\n    var calcTraces = subplotCalcData[i];\n    var trace = calcTraces[0].trace; // skip over visible === false traces\n    // as they don't have `_module` ref\n\n    if (trace.visible) {\n      traceHash[trace.type] = traceHash[trace.type] || [];\n      traceHash[trace.type].push(calcTraces);\n    }\n  } // when a trace gets deleted, make sure that its module's\n  // plot method is called so that it is properly\n  // removed from the DOM.\n\n\n  for (var moduleNameOld in traceHashOld) {\n    if (!traceHash[moduleNameOld]) {\n      var fakeCalcTrace = traceHashOld[moduleNameOld][0];\n      var fakeTrace = fakeCalcTrace[0].trace;\n      fakeTrace.visible = false;\n      traceHash[moduleNameOld] = [fakeCalcTrace];\n    }\n  } // call module plot method\n\n\n  for (var moduleName in traceHash) {\n    var moduleCalcData = traceHash[moduleName];\n    var _module = moduleCalcData[0][0].trace._module;\n\n    _module.plot(gd, subplot, Lib.filterVisible(moduleCalcData), subplotLayout);\n  } // update moduleName -> calcData hash\n\n\n  subplot.traceHash = traceHash;\n};\n\nplots.plotBasePlot = function (desiredType, gd, traces, transitionOpts, makeOnCompleteCallback) {\n  var _module = Registry.getModule(desiredType);\n\n  var cdmodule = getModuleCalcData(gd.calcdata, _module)[0];\n\n  _module.plot(gd, cdmodule, transitionOpts, makeOnCompleteCallback);\n};\n\nplots.cleanBasePlot = function (desiredType, newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var had = oldFullLayout._has && oldFullLayout._has(desiredType);\n\n  var has = newFullLayout._has && newFullLayout._has(desiredType);\n\n  if (had && !has) {\n    oldFullLayout['_' + desiredType + 'layer'].selectAll('g.trace').remove();\n  }\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/plots.js"],"names":["d3","require","isNumeric","Registry","PlotSchema","Template","Lib","Color","BADNUM","axisIDs","animationAttrs","frameAttrs","getModuleCalcData","relinkPrivateKeys","_","plots","module","exports","extendFlat","attributes","type","values","allTypes","fontAttrs","layoutAttributes","fontWeight","transformsRegistry","commandModule","executeAPICommand","computeAPICommandBindings","manageCommandObserver","hasSimpleAPICommandBindings","redrawText","gd","getGraphDiv","fullLayout","_fullLayout","hasPolar","_has","hasLegacyPolar","data","r","Promise","resolve","setTimeout","getComponentMethod","previousPromises","resize","reject","isHidden","Error","_redrawTimer","clearTimeout","layout","width","height","oldchanged","changed","autoplay","call","autosize","then","_promises","length","all","addLinks","_context","showLink","showSources","linkContainer","ensureSingle","_paper","s","style","defaultLine","each","links","select","append","classed","text","node","attrs","y","attr","document","body","contains","getComputedTextLength","x","toolspan","spacespan","sourcespan","positionPlayWithData","container","link","linkText","String","fromCharCode","sendData","on","sendDataToCloud","path","window","location","pathname","split","query","search","emit","baseUrl","PLOTLYENV","BASE_URL","plotlyServerURL","hiddenformDiv","hiddenform","action","method","target","hiddenformInput","name","value","graphJson","submit","remove","d3FormatKeys","extraFormatKeys","supplyDefaults","opts","skipUpdateCalc","oldFullLayout","_skipDefaults","newFullLayout","newLayout","oldFullData","_fullData","newFullData","newData","oldCalcdata","calcdata","context","i","_transitionData","createTransitionData","_dfltTitle","plot","colorbar","annotation","_traceWord","formatObj","getFormatObj","_mapboxAccessToken","mapboxAccessToken","_initialAutoSizeIsDone","oldWidth","oldHeight","supplyLayoutGlobalDefaults","sanitizeMargins","missingWidthOrHeight","autosizable","initialAutoSize","plotAutoSize","_d3locale","getFormatter","separators","_extraFormat","_dataLength","_modules","_visibleModules","_basePlotModules","subplots","_subplots","emptySubplotLists","splomAxes","_splomAxes","splomSubplots","_splomSubplots","_splomGridDflt","_scatterStackOpts","_firstScatter","_alignmentOpts","_colorAxes","_requestRangeslider","_traceUids","getTraceUids","_globalTransforms","globalTransforms","supplyDataDefaults","splomXa","Object","keys","splomYa","pushUnique","xaxis","yaxis","k","cartesian","_hasPlotType","bind","supplyLayoutModuleDefaults","crossTraceDefaultsFuncs","funci","crossTraceDefaults","_hasOnlyLargeSploms","shapes","images","_hasCartesian","_hasGeo","_hasGL3D","_hasGL2D","_hasTernary","_hasPie","linkSubplots","cleanPlot","_zoomlayer","_dragging","selectAll","fillMetaTextHelpers","_preGUI","_tracePreGUI","tracePreGUI","uids","uid","_fullInput","initMargins","supplyDefaultsUpdateCalc","newTrace","cd0","trace","oldTrace","_hasCalcTransform","arrayAttrs","_arrayAttrs","j","astr","oldArrayVal","nestedProperty","get","slice","set","len","oldFullInput","prevFullInput","thisFullInput","push","oldLen","out","Array","seenUids","setUid","tryUid","newUid","randstr","collectableSubplotTypes","subplotsRegistry","subplotType","subplotModule","subplotAttr","isArray","formatKeys","locale","formatDone","includeFormat","newFormat","formatFinished","formatKey","locales","formatj","format","localeRegistry","baseLocale","en","decimal","charAt","thousands","_meta","meta4data","meta","index","_frames","_frameHash","_counter","_interruptCallbacks","category","basePlotModules","modules","_module","categories","clean","hadGl","hasGl","_glcontainer","undefined","_glcanvas","hasInfoLayer","_infolayer","oldLoop","oldUid","oldSubplots","_plots","newSubplots","newSubplotList","mockGd","ids","concat","gl2d","id","oldSubplot","getFromId","plotinfo","_counterAxes","_id","_subplotsWith","_hasClipOnAxisFalse","cliponaxis","axList","list","ax","mainAx","overlaying","_mainAxis","domain","_anchorAxis","anchor","sort","idSort","subplotSort","_mainSubplot","findMainSubplot","spikemode","indexOf","automargin","mirror","min","max","ax2","Math","_counterDomainMin","_counterDomainMax","isX","anchorAx","mainSubplotID","nextBestMainSubplotID","anchorID","counterIDs","counterPart","counterAx","clearExpandedTraceDefaultColors","colorAttrs","locateColorAttrs","attrName","level","valType","dflt","join","_colorAttrs","crawl","origprop","dataIn","dataOut","visibleModules","cnt","colorCnt","fullTrace","_transformModules","pushModule","visible","basePlotModule","_input","carpetIndex","carpetDependents","dataTemplate","template","templater","traceTemplater","supplyTraceDefaults","_expandedIndex","transforms","sdInvisible","expandedTraces","applyTransforms","expandedTrace","fullExpandedTrace","_template","_expandedInput","traceIs","carpet","carpetAxis","_carpet","supplyAnimationDefaults","optsOut","coerce","frame","supplyAnimationFrameDefaults","transition","supplyAnimationTransitionDefaults","supplyFrameDefaults","frameIn","frameOut","traceIn","traceOut","colorIndex","traceInIndex","colorway","defaults","defaultColor","uirevision","getModule","subplotAttrs","subplotId","attri","vali","_dfltShowLegend","hovertemplate","coerceHoverinfo","selectPoints","supplyTransformDefaults","hasMakesDataTransform","ti","makesData","_length","transformModules","containerIn","transformList","containerOut","transformIn","transformOut","isFirstStage","doLaterStages","transform","warn","fullData","transformIndex","layoutIn","layoutOut","isPlainObject","_dataTemplate","globalFont","coerceFont","family","size","round","color","addOpacity","paper_bgcolor","modebarDefaultColor","contrast","rgb","modebar","bgcolor","frameMargins","newWidth","newHeight","isPlotDiv","fillFrame","innerWidth","innerHeight","overflow","computedStyle","getComputedStyle","parseFloat","maxWidth","maxHeight","factor","minWidth","minHeight","widthHasChanged","abs","heightHasChanged","_initialAutoSize","transitionData","componentsRegistry","component","Cartesian","includeBasePlot","finalizeSubplots","supplyLayoutDefaults","purge","_modeBar","destroy","_animationRaf","cancelAnimationFrame","clearThrottle","clearResponsive","framework","empty","fid","undoqueue","undonum","_hmlumcount","_hmpixcount","_transitioning","_transitioningWithDuration","_dragged","_dragdata","_hoverdata","_snapshotInProgress","_editing","_mouseDownTime","_legendMouseDownTime","removeAllListeners","styleModules","margin","plotWidth","l","plotHeight","t","b","correction","floor","clearAutoMarginIds","_pushmarginIds","allowAutoMargin","_size","gs","p","pad","w","h","_pushmargin","autoMargin","o","pushMargin","pushMarginIds","autoexpand","log","xl","xr","yt","yb","val","_replotting","doAutoMargin","oldMargins","ml","mr","mt","mb","base","k1","pushleft","pushbottom","fl","pl","fb","pb","k2","fr","pr","newL","newR","ft","pt","newB","newT","didMarginChange","_redrawFromAutoMarginCount","maxNumberOfRedraws","marginKeys","margin0","margin1","m0","m1","dataonly","mode","output","useDefaults","frames","stripObj","d","v","src","substr","stream","map","isTypedArray","simpleMap","identity","isJSDate","ms2DateTimeLocal","obj","fit","isPolar","getConfig","JSON","stringify","modifyFrames","operations","op","oldName","newName","splice","computeFrame","frameName","frameLookup","traceIndices","traceIndex","destIndex","framePtr","toString","frameStack","frameNameStack","baseframe","result","pop","extendLayout","traces","extendTrace","recomputeFrameHash","hash","extendObjectWithContainers","dest","containerPaths","containerProp","containerVal","srcProp","destProp","srcContainer","destContainer","copy","extendDeepNoArrays","expandedObj","expandObjectPaths","containerObj","srcObj","dataArrayContainers","layoutArrayContainers","destTrace","srcTrace","destLayout","srcLayout","frameOpts","transitionOpts","redraw","transitionedTraces","axEdits","prepareFn","dataLength","traceIdx","animatable","n","layoutUpdate","axisAttrRe","test","range","doCalcdata","xa","ya","xr0","yr0","xr1","yr1","editX","editY","_name","r2l","runFn","makeCallback","traceTransitionOpts","hasAxisTransition","transitionAxes","duration","_transition","transitionFromReact","restyleFlags","relayoutFlags","anim","setScale","axisTransitionOpts","allTraceIndices","transitionTraces","ordering","aborted","executeCallbacks","shift","flushCallbacks","executeTransitions","numCallbacks","numCompleted","completeTransition","callback","interruptPreviousTransitions","seq","rehover","transitionStarting","syncOrAsync","_numBoxes","_numViolins","_violinScaleGroupStats","_piecolormap","_sunburstcolormap","_treemapcolormap","_funnelareacolormap","findArrayAttributes","_extremes","polarIds","polar","radialaxis","angularaxis","hasCalcTransform","transformCalci","calc","cdi","_scene","dirty","calcTransform","calci","isContainer","cd","_indexToPoints","enabled","setupAxisCategories","doCrossTraceCalc","sorted","sortAxisCategoriesByValue","sortAxisCategoriesByValueRegex","affectedTraces","zMapCategory","axLetter","counterAxLetter","xCategorical","yCategorical","aggFn","aggNums","a","mean","median","match","categoryorder","aggregator","order","categoriesValue","_categories","_traceIndices","_xautoBinFinished","_yautoBinFinished","cat","catIndex","currentDimensionIndex","_axesDim","associatedXAxisID","_diag","id2name","dimensions","_categoriesMap","dimension","hasOwnProperty","z","mapping","_categoriesValue","categoriesAggregatedValue","_categoriesAggregatedValue","_initialCategories","c","reverse","sortByInitialCategories","clearCalc","setupMultiCategory","fn","crossTraceCalc","spType","methods","sp","spInfo","_rehover","redrag","_redrag","generalUpdatePerTraceModule","subplot","subplotCalcData","subplotLayout","traceHashOld","traceHash","calcTraces","moduleNameOld","fakeCalcTrace","fakeTrace","moduleName","moduleCalcData","filterVisible","plotBasePlot","desiredType","makeOnCompleteCallback","cdmodule","cleanBasePlot","had","has"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,2BAAD,CAAtB;;AACA,IAAIK,GAAG,GAAGL,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAIO,MAAM,GAAGP,OAAO,CAAC,wBAAD,CAAP,CAAkCO,MAA/C;;AAEA,IAAIC,OAAO,GAAGR,OAAO,CAAC,sBAAD,CAArB;;AAEA,IAAIS,cAAc,GAAGT,OAAO,CAAC,wBAAD,CAA5B;;AACA,IAAIU,UAAU,GAAGV,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIW,iBAAiB,GAAGX,OAAO,CAAC,mBAAD,CAAP,CAA6BW,iBAArD;;AAEA,IAAIC,iBAAiB,GAAGP,GAAG,CAACO,iBAA5B;AACA,IAAIC,CAAC,GAAGR,GAAG,CAACQ,CAAZ;AAEA,IAAIC,KAAK,GAAGC,MAAM,CAACC,OAAP,GAAiB,EAA7B,C,CAEA;;AACAX,GAAG,CAACY,UAAJ,CAAeH,KAAf,EAAsBZ,QAAtB;AAEAY,KAAK,CAACI,UAAN,GAAmBlB,OAAO,CAAC,cAAD,CAA1B;AACAc,KAAK,CAACI,UAAN,CAAiBC,IAAjB,CAAsBC,MAAtB,GAA+BN,KAAK,CAACO,QAArC;AACAP,KAAK,CAACQ,SAAN,GAAkBtB,OAAO,CAAC,mBAAD,CAAzB;AACAc,KAAK,CAACS,gBAAN,GAAyBvB,OAAO,CAAC,qBAAD,CAAhC,C,CAEA;;AACAc,KAAK,CAACU,UAAN,GAAmB,QAAnB;AAEA,IAAIC,kBAAkB,GAAGX,KAAK,CAACW,kBAA/B;;AAEA,IAAIC,aAAa,GAAG1B,OAAO,CAAC,WAAD,CAA3B;;AACAc,KAAK,CAACa,iBAAN,GAA0BD,aAAa,CAACC,iBAAxC;AACAb,KAAK,CAACc,yBAAN,GAAkCF,aAAa,CAACE,yBAAhD;AACAd,KAAK,CAACe,qBAAN,GAA8BH,aAAa,CAACG,qBAA5C;AACAf,KAAK,CAACgB,2BAAN,GAAoCJ,aAAa,CAACI,2BAAlD,C,CAEA;AACA;AACA;;AACAhB,KAAK,CAACiB,UAAN,GAAmB,UAASC,EAAT,EAAa;AAC5BA,EAAAA,EAAE,GAAG3B,GAAG,CAAC4B,WAAJ,CAAgBD,EAAhB,CAAL;AAEA,MAAIE,UAAU,GAAGF,EAAE,CAACG,WAAH,IAAkB,EAAnC;;AACA,MAAIC,QAAQ,GAAGF,UAAU,CAACG,IAAX,IAAmBH,UAAU,CAACG,IAAX,CAAgB,OAAhB,CAAlC;;AACA,MAAIC,cAAc,GAAG,CAACF,QAAD,IAAaJ,EAAE,CAACO,IAAhB,IAAwBP,EAAE,CAACO,IAAH,CAAQ,CAAR,CAAxB,IAAsCP,EAAE,CAACO,IAAH,CAAQ,CAAR,EAAWC,CAAtE,CAL4B,CAO5B;;AACA,MAAGF,cAAH,EAAmB;AAEnB,SAAO,IAAIG,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACjCC,IAAAA,UAAU,CAAC,YAAW;AAClBzC,MAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,aAA5B,EAA2C,MAA3C,EAAmDZ,EAAnD;AACA9B,MAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,QAA5B,EAAsC,MAAtC,EAA8CZ,EAA9C;AACA9B,MAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,UAA5B,EAAwC,MAAxC,EAAgDZ,EAAhD;AACAU,MAAAA,OAAO,CAAC5B,KAAK,CAAC+B,gBAAN,CAAuBb,EAAvB,CAAD,CAAP;AACH,KALS,EAKP,GALO,CAAV;AAMH,GAPM,CAAP;AAQH,CAlBD,C,CAoBA;;;AACAlB,KAAK,CAACgC,MAAN,GAAe,UAASd,EAAT,EAAa;AACxBA,EAAAA,EAAE,GAAG3B,GAAG,CAAC4B,WAAJ,CAAgBD,EAAhB,CAAL;AAEA,SAAO,IAAIS,OAAJ,CAAY,UAASC,OAAT,EAAkBK,MAAlB,EAA0B;AACzC,QAAG,CAACf,EAAD,IAAO3B,GAAG,CAAC2C,QAAJ,CAAahB,EAAb,CAAV,EAA4B;AACxBe,MAAAA,MAAM,CAAC,IAAIE,KAAJ,CAAU,qDAAV,CAAD,CAAN;AACH;;AAED,QAAGjB,EAAE,CAACkB,YAAN,EAAoBC,YAAY,CAACnB,EAAE,CAACkB,YAAJ,CAAZ;AAEpBlB,IAAAA,EAAE,CAACkB,YAAH,GAAkBP,UAAU,CAAC,YAAW;AACpC;AACA,UAAG,CAACX,EAAE,CAACoB,MAAJ,IAAepB,EAAE,CAACoB,MAAH,CAAUC,KAAV,IAAmBrB,EAAE,CAACoB,MAAH,CAAUE,MAA5C,IAAuDjD,GAAG,CAAC2C,QAAJ,CAAahB,EAAb,CAA1D,EAA4E;AACxEU,QAAAA,OAAO,CAACV,EAAD,CAAP;AACA;AACH;;AAED,aAAOA,EAAE,CAACoB,MAAH,CAAUC,KAAjB;AACA,aAAOrB,EAAE,CAACoB,MAAH,CAAUE,MAAjB,CARoC,CAUpC;;AACA,UAAIC,UAAU,GAAGvB,EAAE,CAACwB,OAApB,CAXoC,CAapC;;AACAxB,MAAAA,EAAE,CAACyB,QAAH,GAAc,IAAd;AAEAvD,MAAAA,QAAQ,CAACwD,IAAT,CAAc,UAAd,EAA0B1B,EAA1B,EAA8B;AAAC2B,QAAAA,QAAQ,EAAE;AAAX,OAA9B,EAAgDC,IAAhD,CAAqD,YAAW;AAC5D5B,QAAAA,EAAE,CAACwB,OAAH,GAAaD,UAAb;AACAb,QAAAA,OAAO,CAACV,EAAD,CAAP;AACH,OAHD;AAIH,KApB2B,EAoBzB,GApByB,CAA5B;AAqBH,GA5BM,CAAP;AA6BH,CAhCD,C,CAmCA;AACA;;;AACAlB,KAAK,CAAC+B,gBAAN,GAAyB,UAASb,EAAT,EAAa;AAClC,MAAG,CAACA,EAAE,CAAC6B,SAAH,IAAgB,EAAjB,EAAqBC,MAAxB,EAAgC;AAC5B,WAAOrB,OAAO,CAACsB,GAAR,CAAY/B,EAAE,CAAC6B,SAAf,EACFD,IADE,CACG,YAAW;AAAE5B,MAAAA,EAAE,CAAC6B,SAAH,GAAe,EAAf;AAAoB,KADpC,CAAP;AAEH;AACJ,CALD;AAOA;;;;;;;;AAMA/C,KAAK,CAACkD,QAAN,GAAiB,UAAShC,EAAT,EAAa;AAC1B;AACA,MAAG,CAACA,EAAE,CAACiC,QAAH,CAAYC,QAAb,IAAyB,CAAClC,EAAE,CAACiC,QAAH,CAAYE,WAAzC,EAAsD;AAEtD,MAAIjC,UAAU,GAAGF,EAAE,CAACG,WAApB;AAEA,MAAIiC,aAAa,GAAG/D,GAAG,CAACgE,YAAJ,CAAiBnC,UAAU,CAACoC,MAA5B,EAAoC,MAApC,EAA4C,wBAA5C,EAAsE,UAASC,CAAT,EAAY;AAClGA,IAAAA,CAAC,CAACC,KAAF,CAAQ;AACJ,qBAAe,gCADX;AAEJ,mBAAa,MAFT;AAGJ,cAAQlE,KAAK,CAACmE,WAHV;AAIJ,wBAAkB;AAJd,KAAR,EAMCC,IAND,CAMM,YAAW;AACb,UAAIC,KAAK,GAAG5E,EAAE,CAAC6E,MAAH,CAAU,IAAV,CAAZ;AACAD,MAAAA,KAAK,CAACE,MAAN,CAAa,OAAb,EAAsBC,OAAtB,CAA8B,iBAA9B,EAAiD,IAAjD;AACAH,MAAAA,KAAK,CAACE,MAAN,CAAa,OAAb,EAAsBC,OAAtB,CAA8B,gBAA9B,EAAgD,IAAhD;AACAH,MAAAA,KAAK,CAACE,MAAN,CAAa,OAAb,EAAsBC,OAAtB,CAA8B,gBAA9B,EAAgD,IAAhD;AACH,KAXD;AAYH,GAbmB,CAApB,CAN0B,CAqB1B;;AACA,MAAIC,IAAI,GAAGX,aAAa,CAACY,IAAd,EAAX;AACA,MAAIC,KAAK,GAAG;AAACC,IAAAA,CAAC,EAAEhD,UAAU,CAACoC,MAAX,CAAkBa,IAAlB,CAAuB,QAAvB,IAAmC;AAAvC,GAAZ,CAvB0B,CAyB1B;AACA;AACA;AACA;AACA;;AACA,MAAGC,QAAQ,CAACC,IAAT,CAAcC,QAAd,CAAuBP,IAAvB,KAAgCA,IAAI,CAACQ,qBAAL,MAAiCrD,UAAU,CAACmB,KAAX,GAAmB,EAAvF,EAA4F;AACxF;AACA4B,IAAAA,KAAK,CAAC,aAAD,CAAL,GAAuB,OAAvB;AACAA,IAAAA,KAAK,CAACO,CAAN,GAAU,CAAV;AACH,GAJD,MAIO;AACH;AACAP,IAAAA,KAAK,CAAC,aAAD,CAAL,GAAuB,KAAvB;AACAA,IAAAA,KAAK,CAACO,CAAN,GAAUtD,UAAU,CAACoC,MAAX,CAAkBa,IAAlB,CAAuB,OAAvB,IAAkC,CAA5C;AACH;;AAEDf,EAAAA,aAAa,CAACe,IAAd,CAAmBF,KAAnB;AAEA,MAAIQ,QAAQ,GAAGrB,aAAa,CAACQ,MAAd,CAAqB,kBAArB,CAAf;AACA,MAAIc,SAAS,GAAGtB,aAAa,CAACQ,MAAd,CAAqB,iBAArB,CAAhB;AACA,MAAIe,UAAU,GAAGvB,aAAa,CAACQ,MAAd,CAAqB,iBAArB,CAAjB;AAEA,MAAG5C,EAAE,CAACiC,QAAH,CAAYE,WAAf,EAA4BnC,EAAE,CAACiC,QAAH,CAAYE,WAAZ,CAAwBnC,EAAxB,EA9CF,CAgD1B;;AACA,MAAGA,EAAE,CAACiC,QAAH,CAAYC,QAAf,EAAyB0B,oBAAoB,CAAC5D,EAAD,EAAKyD,QAAL,CAApB,CAjDC,CAmD1B;;AACAC,EAAAA,SAAS,CAACX,IAAV,CAAgBU,QAAQ,CAACV,IAAT,MAAmBY,UAAU,CAACZ,IAAX,EAApB,GAAyC,KAAzC,GAAiD,EAAhE;AACH,CArDD,C,CAuDA;AACA;;;AACA,SAASa,oBAAT,CAA8B5D,EAA9B,EAAkC6D,SAAlC,EAA6C;AACzCA,EAAAA,SAAS,CAACd,IAAV,CAAe,EAAf;AACA,MAAIe,IAAI,GAAGD,SAAS,CAAChB,MAAV,CAAiB,GAAjB,EACNM,IADM,CACD;AACF,wBAAoB,GADlB;AAEF,aAAS,4BAFP;AAGF,mBAAe;AAHb,GADC,EAMNJ,IANM,CAMD/C,EAAE,CAACiC,QAAH,CAAY8B,QAAZ,GAAuB,GAAvB,GAA6BC,MAAM,CAACC,YAAP,CAAoB,GAApB,CAN5B,CAAX;;AAQA,MAAGjE,EAAE,CAACiC,QAAH,CAAYiC,QAAf,EAAyB;AACrBJ,IAAAA,IAAI,CAACK,EAAL,CAAQ,OAAR,EAAiB,YAAW;AACxBrF,MAAAA,KAAK,CAACsF,eAAN,CAAsBpE,EAAtB;AACH,KAFD;AAGH,GAJD,MAIO;AACH,QAAIqE,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,CAAX;AACA,QAAIC,KAAK,GAAGJ,MAAM,CAACC,QAAP,CAAgBI,MAA5B;AACAb,IAAAA,IAAI,CAACX,IAAL,CAAU;AACN,0BAAoB,KADd;AAEN,0BAAoB,MAAMkB,IAAI,CAAC,CAAD,CAAJ,CAAQI,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAN,GAA8B,GAA9B,GAAoCJ,IAAI,CAAC,CAAD,CAAxC,GAA8CK;AAF5D,KAAV;AAIH;AACJ;;AAED5F,KAAK,CAACsF,eAAN,GAAwB,UAASpE,EAAT,EAAa;AACjCA,EAAAA,EAAE,CAAC4E,IAAH,CAAQ,qBAAR;AAEA,MAAIC,OAAO,GAAG,CAACP,MAAM,CAACQ,SAAP,IAAoB,EAArB,EAAyBC,QAAzB,IAAqC/E,EAAE,CAACiC,QAAH,CAAY+C,eAA/D;AAEA,MAAIC,aAAa,GAAGlH,EAAE,CAAC6E,MAAH,CAAU5C,EAAV,EACf6C,MADe,CACR,KADQ,EAEfM,IAFe,CAEV,IAFU,EAEJ,YAFI,EAGfX,KAHe,CAGT,SAHS,EAGE,MAHF,CAApB;AAKA,MAAI0C,UAAU,GAAGD,aAAa,CACzBpC,MADY,CACL,MADK,EAEZM,IAFY,CAEP;AACFgC,IAAAA,MAAM,EAAEN,OAAO,GAAG,WADhB;AAEFO,IAAAA,MAAM,EAAE,MAFN;AAGFC,IAAAA,MAAM,EAAE;AAHN,GAFO,CAAjB;AAQA,MAAIC,eAAe,GAAGJ,UAAU,CAC3BrC,MADiB,CACV,OADU,EAEjBM,IAFiB,CAEZ;AACFhE,IAAAA,IAAI,EAAE,MADJ;AAEFoG,IAAAA,IAAI,EAAE;AAFJ,GAFY,CAAtB;AAOAD,EAAAA,eAAe,CAACtC,IAAhB,GAAuBwC,KAAvB,GAA+B1G,KAAK,CAAC2G,SAAN,CAAgBzF,EAAhB,EAAoB,KAApB,EAA2B,UAA3B,CAA/B;AACAkF,EAAAA,UAAU,CAAClC,IAAX,GAAkB0C,MAAlB;AACAT,EAAAA,aAAa,CAACU,MAAd;AAEA3F,EAAAA,EAAE,CAAC4E,IAAH,CAAQ,oBAAR;AACA,SAAO,KAAP;AACH,CA/BD;;AAiCA,IAAIgB,YAAY,GAAG,CACf,MADe,EACP,WADO,EACM,QADN,EACgB,aADhB,EAC+B,SAD/B,EAEf,UAFe,EAEH,MAFG,EAEK,MAFL,EAGf,SAHe,EAGJ,WAHI,EAGS,UAHT,EAGqB,UAHrB,CAAnB;AAMA,IAAIC,eAAe,GAAG,CAClB,MADkB,EACV,OADU,EACD,UADC,EACW,cADX,CAAtB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA/G,KAAK,CAACgH,cAAN,GAAuB,UAAS9F,EAAT,EAAa+F,IAAb,EAAmB;AACtC,MAAIC,cAAc,GAAGD,IAAI,IAAIA,IAAI,CAACC,cAAlC;AACA,MAAIC,aAAa,GAAGjG,EAAE,CAACG,WAAH,IAAkB,EAAtC;;AAEA,MAAG8F,aAAa,CAACC,aAAjB,EAAgC;AAC5B,WAAOD,aAAa,CAACC,aAArB;AACA;AACH;;AAED,MAAIC,aAAa,GAAGnG,EAAE,CAACG,WAAH,GAAiB,EAArC;AACA,MAAIiG,SAAS,GAAGpG,EAAE,CAACoB,MAAH,IAAa,EAA7B;AAEA,MAAIiF,WAAW,GAAGrG,EAAE,CAACsG,SAAH,IAAgB,EAAlC;AACA,MAAIC,WAAW,GAAGvG,EAAE,CAACsG,SAAH,GAAe,EAAjC;AACA,MAAIE,OAAO,GAAGxG,EAAE,CAACO,IAAH,IAAW,EAAzB;AAEA,MAAIkG,WAAW,GAAGzG,EAAE,CAAC0G,QAAH,IAAe,EAAjC;AAEA,MAAIC,OAAO,GAAG3G,EAAE,CAACiC,QAAH,IAAe,EAA7B;AAEA,MAAI2E,CAAJ,CApBsC,CAsBtC;;AACA,MAAG,CAAC5G,EAAE,CAAC6G,eAAP,EAAwB/H,KAAK,CAACgI,oBAAN,CAA2B9G,EAA3B,EAvBc,CAyBtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAmG,EAAAA,aAAa,CAACY,UAAd,GAA2B;AACvBC,IAAAA,IAAI,EAAEnI,CAAC,CAACmB,EAAD,EAAK,2BAAL,CADgB;AAEvBwD,IAAAA,CAAC,EAAE3E,CAAC,CAACmB,EAAD,EAAK,6BAAL,CAFmB;AAGvBkD,IAAAA,CAAC,EAAErE,CAAC,CAACmB,EAAD,EAAK,6BAAL,CAHmB;AAIvBiH,IAAAA,QAAQ,EAAEpI,CAAC,CAACmB,EAAD,EAAK,iCAAL,CAJY;AAKvBkH,IAAAA,UAAU,EAAErI,CAAC,CAACmB,EAAD,EAAK,UAAL;AALU,GAA3B;AAOAmG,EAAAA,aAAa,CAACgB,UAAd,GAA2BtI,CAAC,CAACmB,EAAD,EAAK,OAAL,CAA5B;AAEA,MAAIoH,SAAS,GAAGC,YAAY,CAACrH,EAAD,EAAK4F,YAAL,CAA5B,CA7CsC,CA+CtC;;AACAO,EAAAA,aAAa,CAACmB,kBAAd,GAAmCX,OAAO,CAACY,iBAA3C,CAhDsC,CAkDtC;AACA;;AACA,MAAGtB,aAAa,CAACuB,sBAAjB,EAAyC;AACrC;AACA,QAAIC,QAAQ,GAAGxB,aAAa,CAAC5E,KAA7B;AACA,QAAIqG,SAAS,GAAGzB,aAAa,CAAC3E,MAA9B;AAEAxC,IAAAA,KAAK,CAAC6I,0BAAN,CAAiCvB,SAAjC,EAA4CD,aAA5C,EAA2DiB,SAA3D;AAEA,QAAG,CAAChB,SAAS,CAAC/E,KAAd,EAAqB8E,aAAa,CAAC9E,KAAd,GAAsBoG,QAAtB;AACrB,QAAG,CAACrB,SAAS,CAAC9E,MAAd,EAAsB6E,aAAa,CAAC7E,MAAd,GAAuBoG,SAAvB;AACtB5I,IAAAA,KAAK,CAAC8I,eAAN,CAAsBzB,aAAtB;AACH,GAVD,MAUO;AACH;AACArH,IAAAA,KAAK,CAAC6I,0BAAN,CAAiCvB,SAAjC,EAA4CD,aAA5C,EAA2DiB,SAA3D;AAEA,QAAIS,oBAAoB,GAAI,CAACzB,SAAS,CAAC/E,KAAX,IAAoB,CAAC+E,SAAS,CAAC9E,MAA3D;AACA,QAAIK,QAAQ,GAAGwE,aAAa,CAACxE,QAA7B;AACA,QAAImG,WAAW,GAAGnB,OAAO,CAACmB,WAA1B;AACA,QAAIC,eAAe,GAAGF,oBAAoB,KAAKlG,QAAQ,IAAImG,WAAjB,CAA1C;AAEA,QAAGC,eAAH,EAAoBjJ,KAAK,CAACkJ,YAAN,CAAmBhI,EAAnB,EAAuBoG,SAAvB,EAAkCD,aAAlC,EAApB,KACK,IAAG0B,oBAAH,EAAyB/I,KAAK,CAAC8I,eAAN,CAAsBzB,aAAtB,EAV3B,CAYH;;AACA,QAAG,CAACxE,QAAD,IAAakG,oBAAhB,EAAsC;AAClCzB,MAAAA,SAAS,CAAC/E,KAAV,GAAkB8E,aAAa,CAAC9E,KAAhC;AACA+E,MAAAA,SAAS,CAAC9E,MAAV,GAAmB6E,aAAa,CAAC7E,MAAjC;AACH;AACJ;;AAED6E,EAAAA,aAAa,CAAC8B,SAAd,GAA0BC,YAAY,CAACd,SAAD,EAAYjB,aAAa,CAACgC,UAA1B,CAAtC;AACAhC,EAAAA,aAAa,CAACiC,YAAd,GAA6Bf,YAAY,CAACrH,EAAD,EAAK6F,eAAL,CAAzC;AAEAM,EAAAA,aAAa,CAACqB,sBAAd,GAAuC,IAAvC,CApFsC,CAsFtC;;AACArB,EAAAA,aAAa,CAACkC,WAAd,GAA4B7B,OAAO,CAAC1E,MAApC,CAvFsC,CAyFtC;;AACAqE,EAAAA,aAAa,CAACmC,QAAd,GAAyB,EAAzB;AACAnC,EAAAA,aAAa,CAACoC,eAAd,GAAgC,EAAhC;AACApC,EAAAA,aAAa,CAACqC,gBAAd,GAAiC,EAAjC;AACA,MAAIC,QAAQ,GAAGtC,aAAa,CAACuC,SAAd,GAA0BC,iBAAiB,EAA1D,CA7FsC,CA+FtC;;AACA,MAAIC,SAAS,GAAGzC,aAAa,CAAC0C,UAAd,GAA2B;AAACrF,IAAAA,CAAC,EAAE,EAAJ;AAAQN,IAAAA,CAAC,EAAE;AAAX,GAA3C;AACA,MAAI4F,aAAa,GAAG3C,aAAa,CAAC4C,cAAd,GAA+B,EAAnD,CAjGsC,CAkGtC;;AACA5C,EAAAA,aAAa,CAAC6C,cAAd,GAA+B,EAA/B,CAnGsC,CAqGtC;;AACA7C,EAAAA,aAAa,CAAC8C,iBAAd,GAAkC,EAAlC,CAtGsC,CAuGtC;;AACA9C,EAAAA,aAAa,CAAC+C,aAAd,GAA8B,EAA9B,CAxGsC,CAyGtC;;AACA/C,EAAAA,aAAa,CAACgD,cAAd,GAA+B,EAA/B,CA1GsC,CA2GtC;;AACAhD,EAAAA,aAAa,CAACiD,UAAd,GAA2B,EAA3B,CA5GsC,CA8GtC;AACA;;AACAjD,EAAAA,aAAa,CAACkD,mBAAd,GAAoC,EAApC,CAhHsC,CAkHtC;;AACAlD,EAAAA,aAAa,CAACmD,UAAd,GAA2BC,YAAY,CAAClD,WAAD,EAAcG,OAAd,CAAvC,CAnHsC,CAqHtC;;AACAL,EAAAA,aAAa,CAACqD,iBAAd,GAAkC,CAACxJ,EAAE,CAACiC,QAAH,IAAe,EAAhB,EAAoBwH,gBAAtD;AACA3K,EAAAA,KAAK,CAAC4K,kBAAN,CAAyBlD,OAAzB,EAAkCD,WAAlC,EAA+CH,SAA/C,EAA0DD,aAA1D,EAvHsC,CAyHtC;AACA;;AACA,MAAIwD,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYjB,SAAS,CAACpF,CAAtB,CAAd;AACA,MAAIsG,OAAO,GAAGF,MAAM,CAACC,IAAP,CAAYjB,SAAS,CAAC1F,CAAtB,CAAd;;AACA,MAAGyG,OAAO,CAAC7H,MAAR,GAAiB,CAAjB,IAAsBgI,OAAO,CAAChI,MAAR,GAAiB,CAA1C,EAA6C;AACzC5D,IAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,MAA5B,EAAoC,cAApC,EAAoDwF,SAApD,EAA+DD,aAA/D;;AAEA,SAAIS,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG+C,OAAO,CAAC7H,MAAvB,EAA+B8E,CAAC,EAAhC,EAAoC;AAChCvI,MAAAA,GAAG,CAAC0L,UAAJ,CAAetB,QAAQ,CAACuB,KAAxB,EAA+BL,OAAO,CAAC/C,CAAD,CAAtC;AACH;;AACD,SAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkD,OAAO,CAAChI,MAAvB,EAA+B8E,CAAC,EAAhC,EAAoC;AAChCvI,MAAAA,GAAG,CAAC0L,UAAJ,CAAetB,QAAQ,CAACwB,KAAxB,EAA+BH,OAAO,CAAClD,CAAD,CAAtC;AACH;;AACD,SAAI,IAAIsD,CAAR,IAAapB,aAAb,EAA4B;AACxBzK,MAAAA,GAAG,CAAC0L,UAAJ,CAAetB,QAAQ,CAAC0B,SAAxB,EAAmCD,CAAnC;AACH;AACJ,GAzIqC,CA2ItC;;;AACA/D,EAAAA,aAAa,CAAC9F,IAAd,GAAqBvB,KAAK,CAACsL,YAAN,CAAmBC,IAAnB,CAAwBlE,aAAxB,CAArB;;AAEA,MAAGE,WAAW,CAACvE,MAAZ,KAAuByE,WAAW,CAACzE,MAAtC,EAA8C;AAC1C,SAAI8E,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGL,WAAW,CAACzE,MAA3B,EAAmC8E,CAAC,EAApC,EAAwC;AACpChI,MAAAA,iBAAiB,CAAC2H,WAAW,CAACK,CAAD,CAAZ,EAAiBP,WAAW,CAACO,CAAD,CAA5B,CAAjB;AACH;AACJ,GAlJqC,CAoJtC;;;AACA9H,EAAAA,KAAK,CAACwL,0BAAN,CAAiClE,SAAjC,EAA4CD,aAA5C,EAA2DI,WAA3D,EAAwEvG,EAAE,CAAC6G,eAA3E,EArJsC,CAuJtC;AACA;AACA;;AACA,MAAIyB,QAAQ,GAAGnC,aAAa,CAACoC,eAA7B;AACA,MAAIgC,uBAAuB,GAAG,EAA9B;;AACA,OAAI3D,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG0B,QAAQ,CAACxG,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqC;AACjC,QAAI4D,KAAK,GAAGlC,QAAQ,CAAC1B,CAAD,CAAR,CAAY6D,kBAAxB,CADiC,CAEjC;;AACA,QAAGD,KAAH,EAAUnM,GAAG,CAAC0L,UAAJ,CAAeQ,uBAAf,EAAwCC,KAAxC;AACb;;AACD,OAAI5D,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG2D,uBAAuB,CAACzI,MAAvC,EAA+C8E,CAAC,EAAhD,EAAoD;AAChD2D,IAAAA,uBAAuB,CAAC3D,CAAD,CAAvB,CAA2BL,WAA3B,EAAwCJ,aAAxC;AACH,GAnKqC,CAqKtC;AACA;;;AACAA,EAAAA,aAAa,CAACuE,mBAAd,GACIvE,aAAa,CAACqC,gBAAd,CAA+B1G,MAA/B,KAA0C,CAA1C,IACAqE,aAAa,CAACqC,gBAAd,CAA+B,CAA/B,EAAkCjD,IAAlC,KAA2C,OAD3C,IAEAoE,OAAO,CAAC7H,MAAR,GAAiB,EAFjB,IAGAgI,OAAO,CAAChI,MAAR,GAAiB,EAHjB,IAIAqE,aAAa,CAACwE,MAAd,CAAqB7I,MAArB,KAAgC,CAJhC,IAKAqE,aAAa,CAACyE,MAAd,CAAqB9I,MAArB,KAAgC,CANpC,CAvKsC,CAgLtC;AACA;;AACAqE,EAAAA,aAAa,CAAC0E,aAAd,GAA8B1E,aAAa,CAAC9F,IAAd,CAAmB,WAAnB,CAA9B;AACA8F,EAAAA,aAAa,CAAC2E,OAAd,GAAwB3E,aAAa,CAAC9F,IAAd,CAAmB,KAAnB,CAAxB;AACA8F,EAAAA,aAAa,CAAC4E,QAAd,GAAyB5E,aAAa,CAAC9F,IAAd,CAAmB,MAAnB,CAAzB;AACA8F,EAAAA,aAAa,CAAC6E,QAAd,GAAyB7E,aAAa,CAAC9F,IAAd,CAAmB,MAAnB,CAAzB;AACA8F,EAAAA,aAAa,CAAC8E,WAAd,GAA4B9E,aAAa,CAAC9F,IAAd,CAAmB,SAAnB,CAA5B;AACA8F,EAAAA,aAAa,CAAC+E,OAAd,GAAwB/E,aAAa,CAAC9F,IAAd,CAAmB,KAAnB,CAAxB,CAvLsC,CAyLtC;;AACAvB,EAAAA,KAAK,CAACqM,YAAN,CAAmB5E,WAAnB,EAAgCJ,aAAhC,EAA+CE,WAA/C,EAA4DJ,aAA5D,EA1LsC,CA4LtC;;AACAnH,EAAAA,KAAK,CAACsM,SAAN,CAAgB7E,WAAhB,EAA6BJ,aAA7B,EAA4CE,WAA5C,EAAyDJ,aAAzD,EA7LsC,CA+LtC;AACA;AACA;AACA;AACA;;AACA,MAAGA,aAAa,CAACoF,UAAd,IAA4B,CAACrL,EAAE,CAACsL,SAAnC,EAA8C;AAC1CrF,IAAAA,aAAa,CAACoF,UAAd,CAAyBE,SAAzB,CAAmC,iBAAnC,EAAsD5F,MAAtD;AACH,GAtMqC,CAyMtC;;;AACA6F,EAAAA,mBAAmB,CAACjF,WAAD,EAAcJ,aAAd,CAAnB,CA1MsC,CA4MtC;;AACAvH,EAAAA,iBAAiB,CAACuH,aAAD,EAAgBF,aAAhB,CAAjB,CA7MsC,CA+MtC;;AACA/H,EAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,YAA5B,EAA0C,oBAA1C,EAAgE2F,WAAhE,EAA6EJ,aAA7E,EAhNsC,CAkNtC;AACA;;AACA,MAAG,CAACA,aAAa,CAACsF,OAAlB,EAA2BtF,aAAa,CAACsF,OAAd,GAAwB,EAAxB,CApNW,CAqNtC;;AACA,MAAG,CAACtF,aAAa,CAACuF,YAAlB,EAAgCvF,aAAa,CAACuF,YAAd,GAA6B,EAA7B;AAChC,MAAIC,WAAW,GAAGxF,aAAa,CAACuF,YAAhC;AACA,MAAIE,IAAI,GAAG,EAAX;AACA,MAAIC,GAAJ;;AACA,OAAIA,GAAJ,IAAWF,WAAX,EAAwBC,IAAI,CAACC,GAAD,CAAJ,GAAY,KAAZ;;AACxB,OAAIjF,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGL,WAAW,CAACzE,MAA3B,EAAmC8E,CAAC,EAApC,EAAwC;AACpCiF,IAAAA,GAAG,GAAGtF,WAAW,CAACK,CAAD,CAAX,CAAekF,UAAf,CAA0BD,GAAhC;AACA,QAAG,CAACD,IAAI,CAACC,GAAD,CAAR,EAAeF,WAAW,CAACE,GAAD,CAAX,GAAmB,EAAnB;AACfD,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,KAAZ;AACH;;AACD,OAAIA,GAAJ,IAAWD,IAAX,EAAiB;AACb,QAAGA,IAAI,CAACC,GAAD,CAAJ,KAAc,KAAjB,EAAwB,OAAOF,WAAW,CAACE,GAAD,CAAlB;AAC3B,GAlOqC,CAoOtC;;;AACAE,EAAAA,WAAW,CAAC5F,aAAD,CAAX,CArOsC,CAuOtC;;AACAjI,EAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,aAA5B,EAA2C,UAA3C,EAAuDuF,aAAvD,EAxOsC,CA0OtC;;AACA,MAAG,CAACH,cAAD,IAAmBS,WAAW,CAAC3E,MAAZ,KAAuByE,WAAW,CAACzE,MAAzD,EAAiE;AAC7DhD,IAAAA,KAAK,CAACkN,wBAAN,CAA+BvF,WAA/B,EAA4CF,WAA5C;AACH;AACJ,CA9OD;;AAgPAzH,KAAK,CAACkN,wBAAN,GAAiC,UAASvF,WAAT,EAAsBF,WAAtB,EAAmC;AAChE,OAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,WAAW,CAACzE,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxC,QAAIqF,QAAQ,GAAG1F,WAAW,CAACK,CAAD,CAA1B;AACA,QAAIsF,GAAG,GAAG,CAACzF,WAAW,CAACG,CAAD,CAAX,IAAkB,EAAnB,EAAuB,CAAvB,CAAV;;AACA,QAAGsF,GAAG,IAAIA,GAAG,CAACC,KAAd,EAAqB;AACjB,UAAIC,QAAQ,GAAGF,GAAG,CAACC,KAAnB;;AACA,UAAGC,QAAQ,CAACC,iBAAZ,EAA+B;AAC3B,YAAIC,UAAU,GAAGF,QAAQ,CAACG,WAA1B;AACA,YAAIC,CAAJ,EAAOC,IAAP,EAAaC,WAAb;;AAEA,aAAIF,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGF,UAAU,CAACxK,MAA1B,EAAkC0K,CAAC,EAAnC,EAAuC;AACnCC,UAAAA,IAAI,GAAGH,UAAU,CAACE,CAAD,CAAjB;AACAE,UAAAA,WAAW,GAAGrO,GAAG,CAACsO,cAAJ,CAAmBP,QAAnB,EAA6BK,IAA7B,EAAmCG,GAAnC,GAAyCC,KAAzC,EAAd;AACAxO,UAAAA,GAAG,CAACsO,cAAJ,CAAmBV,QAAnB,EAA6BQ,IAA7B,EAAmCK,GAAnC,CAAuCJ,WAAvC;AACH;AACJ;;AACDR,MAAAA,GAAG,CAACC,KAAJ,GAAYF,QAAZ;AACH;AACJ;AACJ,CAnBD;AAqBA;;;;;;;;AAMA,SAAS1C,YAAT,CAAsBlD,WAAtB,EAAmCG,OAAnC,EAA4C;AACxC,MAAIuG,GAAG,GAAGvG,OAAO,CAAC1E,MAAlB;AACA,MAAIkL,YAAY,GAAG,EAAnB;AACA,MAAIpG,CAAJ,EAAOqG,aAAP;;AACA,OAAIrG,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGP,WAAW,CAACvE,MAA3B,EAAmC8E,CAAC,EAApC,EAAwC;AACpC,QAAIsG,aAAa,GAAG7G,WAAW,CAACO,CAAD,CAAX,CAAekF,UAAnC;AACA,QAAGoB,aAAa,KAAKD,aAArB,EAAoCD,YAAY,CAACG,IAAb,CAAkBD,aAAlB;AACpCD,IAAAA,aAAa,GAAGC,aAAhB;AACH;;AACD,MAAIE,MAAM,GAAGJ,YAAY,CAAClL,MAA1B;AACA,MAAIuL,GAAG,GAAG,IAAIC,KAAJ,CAAUP,GAAV,CAAV;AACA,MAAIQ,QAAQ,GAAG,EAAf;;AAEA,WAASC,MAAT,CAAgB3B,GAAhB,EAAqBjF,CAArB,EAAwB;AACpByG,IAAAA,GAAG,CAACzG,CAAD,CAAH,GAASiF,GAAT;AACA0B,IAAAA,QAAQ,CAAC1B,GAAD,CAAR,GAAgB,CAAhB;AACH;;AAED,WAAS4B,MAAT,CAAgB5B,GAAhB,EAAqBjF,CAArB,EAAwB;AACpB,QAAGiF,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkC,CAAC0B,QAAQ,CAAC1B,GAAD,CAA9C,EAAqD;AACjD2B,MAAAA,MAAM,CAAC3B,GAAD,EAAMjF,CAAN,CAAN;AACA,aAAO,IAAP;AACH;AACJ;;AAED,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGmG,GAAf,EAAoBnG,CAAC,EAArB,EAAyB;AACrB,QAAI8G,MAAM,GAAGlH,OAAO,CAACI,CAAD,CAAP,CAAWiF,GAAxB;AACA,QAAG,OAAO6B,MAAP,KAAkB,QAArB,EAA+BA,MAAM,GAAG1J,MAAM,CAAC0J,MAAD,CAAf;AAE/B,QAAGD,MAAM,CAACC,MAAD,EAAS9G,CAAT,CAAT,EAAsB;AACtB,QAAGA,CAAC,GAAGwG,MAAJ,IAAcK,MAAM,CAACT,YAAY,CAACpG,CAAD,CAAZ,CAAgBiF,GAAjB,EAAsBjF,CAAtB,CAAvB,EAAiD;AACjD4G,IAAAA,MAAM,CAACnP,GAAG,CAACsP,OAAJ,CAAYJ,QAAZ,CAAD,EAAwB3G,CAAxB,CAAN;AACH;;AAED,SAAOyG,GAAP;AACH;AAED;;;;;;;;;;AAQA,SAAS1E,iBAAT,GAA6B;AACzB,MAAIiF,uBAAuB,GAAG1P,QAAQ,CAAC0P,uBAAvC;AACA,MAAIP,GAAG,GAAG,EAAV;AACA,MAAIzG,CAAJ,EAAO4F,CAAP;;AAEA,MAAG,CAACoB,uBAAJ,EAA6B;AACzBA,IAAAA,uBAAuB,GAAG,EAA1B;AAEA,QAAIC,gBAAgB,GAAG3P,QAAQ,CAAC2P,gBAAhC;;AAEA,SAAI,IAAIC,WAAR,IAAuBD,gBAAvB,EAAyC;AACrC,UAAIE,aAAa,GAAGF,gBAAgB,CAACC,WAAD,CAApC;AACA,UAAIE,WAAW,GAAGD,aAAa,CAAC5K,IAAhC;;AAEA,UAAG6K,WAAH,EAAgB;AACZJ,QAAAA,uBAAuB,CAACT,IAAxB,CAA6BW,WAA7B,EADY,CAGZ;AACA;;AACA,YAAGR,KAAK,CAACW,OAAN,CAAcD,WAAd,CAAH,EAA+B;AAC3B,eAAIxB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGwB,WAAW,CAAClM,MAA3B,EAAmC0K,CAAC,EAApC,EAAwC;AACpCnO,YAAAA,GAAG,CAAC0L,UAAJ,CAAe6D,uBAAf,EAAwCI,WAAW,CAACxB,CAAD,CAAnD;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,OAAI5F,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGgH,uBAAuB,CAAC9L,MAAvC,EAA+C8E,CAAC,EAAhD,EAAoD;AAChDyG,IAAAA,GAAG,CAACO,uBAAuB,CAAChH,CAAD,CAAxB,CAAH,GAAkC,EAAlC;AACH;;AACD,SAAOyG,GAAP;AACH;AAED;;;;;;;;;;;;;AAWA,SAAShG,YAAT,CAAsBrH,EAAtB,EAA0BkO,UAA1B,EAAsC;AAClC,MAAIC,MAAM,GAAGnO,EAAE,CAACiC,QAAH,CAAYkM,MAAzB;AACA,MAAG,CAACA,MAAJ,EAAYA,MAAM,KAAK,OAAX;AAEZ,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIhH,SAAS,GAAG,EAAhB;;AAEA,WAASiH,aAAT,CAAuBC,SAAvB,EAAkC;AAC9B,QAAIC,cAAc,GAAG,IAArB;;AACA,SAAI,IAAI3H,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsH,UAAU,CAACpM,MAA9B,EAAsC8E,CAAC,EAAvC,EAA2C;AACvC,UAAI4H,SAAS,GAAGN,UAAU,CAACtH,CAAD,CAA1B;;AACA,UAAG,CAACQ,SAAS,CAACoH,SAAD,CAAb,EAA0B;AACtB,YAAGF,SAAS,CAACE,SAAD,CAAZ,EAAyB;AACrBpH,UAAAA,SAAS,CAACoH,SAAD,CAAT,GAAuBF,SAAS,CAACE,SAAD,CAAhC;AACH,SAFD,MAEOD,cAAc,GAAG,KAAjB;AACV;AACJ;;AACD,QAAGA,cAAH,EAAmBH,UAAU,GAAG,IAAb;AACtB,GAlBiC,CAoBlC;;;AACA,OAAI,IAAIxH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,QAAI6H,OAAO,GAAGzO,EAAE,CAACiC,QAAH,CAAYwM,OAA1B;;AACA,SAAI,IAAIjC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,UAAIkC,OAAO,GAAG,CAACD,OAAO,CAACN,MAAD,CAAP,IAAmB,EAApB,EAAwBQ,MAAtC;;AACA,UAAGD,OAAH,EAAY;AACRL,QAAAA,aAAa,CAACK,OAAD,CAAb;AACA,YAAGN,UAAH,EAAe;AAClB;;AACDK,MAAAA,OAAO,GAAGvQ,QAAQ,CAAC0Q,cAAnB;AACH;;AAED,QAAIC,UAAU,GAAGV,MAAM,CAAC1J,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAjB;AACA,QAAG2J,UAAU,IAAIS,UAAU,KAAKV,MAAhC,EAAwC;AACxCA,IAAAA,MAAM,GAAGU,UAAT;AACH,GAnCiC,CAqClC;;;AACA,MAAG,CAACT,UAAJ,EAAgBC,aAAa,CAACnQ,QAAQ,CAAC0Q,cAAT,CAAwBE,EAAxB,CAA2BH,MAA5B,CAAb;AAEhB,SAAOvH,SAAP;AACH;AAED;;;;;;;;;;;;;;AAYA,SAASc,YAAT,CAAsBd,SAAtB,EAAiCe,UAAjC,EAA6C;AACzCf,EAAAA,SAAS,CAAC2H,OAAV,GAAoB5G,UAAU,CAAC6G,MAAX,CAAkB,CAAlB,CAApB;AACA5H,EAAAA,SAAS,CAAC6H,SAAV,GAAsB9G,UAAU,CAAC6G,MAAX,CAAkB,CAAlB,CAAtB;AAEA,SAAOjR,EAAE,CAACoQ,MAAH,CAAU/G,SAAV,CAAP;AACH;;AAED,SAASoE,mBAAT,CAA6BjF,WAA7B,EAA0CJ,aAA1C,EAAyD;AACrD,MAAI+I,KAAJ;;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAGhJ,aAAa,CAACiJ,IAAjB,EAAuB;AACnBF,IAAAA,KAAK,GAAG/I,aAAa,CAAC+I,KAAd,GAAsB;AAC1BE,MAAAA,IAAI,EAAEjJ,aAAa,CAACiJ,IADM;AAE1BhO,MAAAA,MAAM,EAAE;AAACgO,QAAAA,IAAI,EAAEjJ,aAAa,CAACiJ;AAArB;AAFkB,KAA9B;AAIH;;AAED,OAAI,IAAIxI,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGL,WAAW,CAACzE,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxC,QAAIuF,KAAK,GAAG5F,WAAW,CAACK,CAAD,CAAvB;;AAEA,QAAGuF,KAAK,CAACiD,IAAT,EAAe;AACXD,MAAAA,SAAS,CAAChD,KAAK,CAACkD,KAAP,CAAT,GAAyBlD,KAAK,CAAC+C,KAAN,GAAc;AAACE,QAAAA,IAAI,EAAEjD,KAAK,CAACiD;AAAb,OAAvC;AACH,KAFD,MAEO,IAAGjJ,aAAa,CAACiJ,IAAjB,EAAuB;AAC1BjD,MAAAA,KAAK,CAAC+C,KAAN,GAAc;AAACE,QAAAA,IAAI,EAAEjJ,aAAa,CAACiJ;AAArB,OAAd;AACH;;AACD,QAAGjJ,aAAa,CAACiJ,IAAjB,EAAuB;AACnBjD,MAAAA,KAAK,CAAC+C,KAAN,CAAY9N,MAAZ,GAAqB;AAACgO,QAAAA,IAAI,EAAEjJ,aAAa,CAACiJ;AAArB,OAArB;AACH;AACJ;;AAED,MAAGD,SAAS,CAACrN,MAAb,EAAqB;AACjB,QAAG,CAACoN,KAAJ,EAAW;AACPA,MAAAA,KAAK,GAAG/I,aAAa,CAAC+I,KAAd,GAAsB,EAA9B;AACH;;AACDA,IAAAA,KAAK,CAAC3O,IAAN,GAAa4O,SAAb;AACH;AACJ,C,CAED;;;AACArQ,KAAK,CAACgI,oBAAN,GAA6B,UAAS9G,EAAT,EAAa;AACtC;AACA,MAAG,CAACA,EAAE,CAAC6G,eAAP,EAAwB;AACpB7G,IAAAA,EAAE,CAAC6G,eAAH,GAAqB,EAArB;AACH;;AAED,MAAG,CAAC7G,EAAE,CAAC6G,eAAH,CAAmByI,OAAvB,EAAgC;AAC5BtP,IAAAA,EAAE,CAAC6G,eAAH,CAAmByI,OAAnB,GAA6B,EAA7B;AACH;;AAED,MAAG,CAACtP,EAAE,CAAC6G,eAAH,CAAmB0I,UAAvB,EAAmC;AAC/BvP,IAAAA,EAAE,CAAC6G,eAAH,CAAmB0I,UAAnB,GAAgC,EAAhC;AACH;;AAED,MAAG,CAACvP,EAAE,CAAC6G,eAAH,CAAmB2I,QAAvB,EAAiC;AAC7BxP,IAAAA,EAAE,CAAC6G,eAAH,CAAmB2I,QAAnB,GAA8B,CAA9B;AACH;;AAED,MAAG,CAACxP,EAAE,CAAC6G,eAAH,CAAmB4I,mBAAvB,EAA4C;AACxCzP,IAAAA,EAAE,CAAC6G,eAAH,CAAmB4I,mBAAnB,GAAyC,EAAzC;AACH;AACJ,CArBD,C,CAuBA;AACA;AACA;;;AACA3Q,KAAK,CAACsL,YAAN,GAAqB,UAASsF,QAAT,EAAmB;AACpC,MAAI9I,CAAJ,CADoC,CAGpC;;AACA,MAAI+I,eAAe,GAAG,KAAKnH,gBAAL,IAAyB,EAA/C;;AACA,OAAI5B,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG+I,eAAe,CAAC7N,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxC,QAAG+I,eAAe,CAAC/I,CAAD,CAAf,CAAmBrB,IAAnB,KAA4BmK,QAA/B,EAAyC,OAAO,IAAP;AAC5C,GAPmC,CASpC;;;AACA,MAAIE,OAAO,GAAG,KAAKtH,QAAL,IAAiB,EAA/B;;AACA,OAAI1B,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGgJ,OAAO,CAAC9N,MAAvB,EAA+B8E,CAAC,EAAhC,EAAoC;AAChC,QAAIrB,IAAI,GAAGqK,OAAO,CAAChJ,CAAD,CAAP,CAAWrB,IAAtB;AACA,QAAGA,IAAI,KAAKmK,QAAZ,EAAsB,OAAO,IAAP,CAFU,CAGhC;;AACA,QAAIG,OAAO,GAAG3R,QAAQ,CAAC0R,OAAT,CAAiBrK,IAAjB,CAAd;AACA,QAAGsK,OAAO,IAAIA,OAAO,CAACC,UAAR,CAAmBJ,QAAnB,CAAd,EAA4C,OAAO,IAAP;AAC/C;;AAED,SAAO,KAAP;AACH,CApBD;;AAsBA5Q,KAAK,CAACsM,SAAN,GAAkB,UAAS7E,WAAT,EAAsBJ,aAAtB,EAAqCE,WAArC,EAAkDJ,aAAlD,EAAiE;AAC/E,MAAIW,CAAJ,EAAO4F,CAAP;AAEA,MAAImD,eAAe,GAAG1J,aAAa,CAACuC,gBAAd,IAAkC,EAAxD;;AACA,OAAI5B,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG+I,eAAe,CAAC7N,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxC,QAAIiJ,OAAO,GAAGF,eAAe,CAAC/I,CAAD,CAA7B;;AAEA,QAAGiJ,OAAO,CAACE,KAAX,EAAkB;AACdF,MAAAA,OAAO,CAACE,KAAR,CAAcxJ,WAAd,EAA2BJ,aAA3B,EAA0CE,WAA1C,EAAuDJ,aAAvD;AACH;AACJ;;AAED,MAAI+J,KAAK,GAAG/J,aAAa,CAAC5F,IAAd,IAAsB4F,aAAa,CAAC5F,IAAd,CAAmB,IAAnB,CAAlC;;AACA,MAAI4P,KAAK,GAAG9J,aAAa,CAAC9F,IAAd,IAAsB8F,aAAa,CAAC9F,IAAd,CAAmB,IAAnB,CAAlC;;AAEA,MAAG2P,KAAK,IAAI,CAACC,KAAb,EAAoB;AAChB,QAAGhK,aAAa,CAACiK,YAAd,KAA+BC,SAAlC,EAA6C;AACzClK,MAAAA,aAAa,CAACiK,YAAd,CAA2B3E,SAA3B,CAAqC,YAArC,EAAmD5F,MAAnD;;AACAM,MAAAA,aAAa,CAACiK,YAAd,CAA2B3E,SAA3B,CAAqC,WAArC,EAAkD5F,MAAlD;;AACAM,MAAAA,aAAa,CAACmK,SAAd,GAA0B,IAA1B;AACH;AACJ;;AAED,MAAIC,YAAY,GAAG,CAAC,CAACpK,aAAa,CAACqK,UAAnC;;AAEAC,EAAAA,OAAO,EACP,KAAI3J,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGP,WAAW,CAACvE,MAA3B,EAAmC8E,CAAC,EAApC,EAAwC;AACpC,QAAIwF,QAAQ,GAAG/F,WAAW,CAACO,CAAD,CAA1B;AACA,QAAI4J,MAAM,GAAGpE,QAAQ,CAACP,GAAtB;;AAEA,SAAIW,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGjG,WAAW,CAACzE,MAA3B,EAAmC0K,CAAC,EAApC,EAAwC;AACpC,UAAIP,QAAQ,GAAG1F,WAAW,CAACiG,CAAD,CAA1B;AAEA,UAAGgE,MAAM,KAAKvE,QAAQ,CAACJ,GAAvB,EAA4B,SAAS0E,OAAT;AAC/B,KARmC,CAUpC;;;AACA,QAAGF,YAAH,EAAiB;AACbpK,MAAAA,aAAa,CAACqK,UAAd,CAAyB1N,MAAzB,CAAgC,QAAQ4N,MAAxC,EAAgD7K,MAAhD;AACH;AACJ;AACJ,CAzCD;;AA2CA7G,KAAK,CAACqM,YAAN,GAAqB,UAAS5E,WAAT,EAAsBJ,aAAtB,EAAqCE,WAArC,EAAkDJ,aAAlD,EAAiE;AAClF,MAAIW,CAAJ,EAAO4F,CAAP;AAEA,MAAIiE,WAAW,GAAGxK,aAAa,CAACyK,MAAd,IAAwB,EAA1C;AACA,MAAIC,WAAW,GAAGxK,aAAa,CAACuK,MAAd,GAAuB,EAAzC;AACA,MAAIE,cAAc,GAAGzK,aAAa,CAACuC,SAAnC;AAEA,MAAImI,MAAM,GAAG;AACTvK,IAAAA,SAAS,EAAEC,WADF;AAETpG,IAAAA,WAAW,EAAEgG;AAFJ,GAAb;AAKA,MAAI2K,GAAG,GAAGF,cAAc,CAACzG,SAAf,CAAyB4G,MAAzB,CAAgCH,cAAc,CAACI,IAAf,IAAuB,EAAvD,CAAV;;AAEA,OAAIpK,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkK,GAAG,CAAChP,MAAnB,EAA2B8E,CAAC,EAA5B,EAAgC;AAC5B,QAAIqK,EAAE,GAAGH,GAAG,CAAClK,CAAD,CAAZ;AACA,QAAIsK,UAAU,GAAGT,WAAW,CAACQ,EAAD,CAA5B;AACA,QAAIjH,KAAK,GAAGxL,OAAO,CAAC2S,SAAR,CAAkBN,MAAlB,EAA0BI,EAA1B,EAA8B,GAA9B,CAAZ;AACA,QAAIhH,KAAK,GAAGzL,OAAO,CAAC2S,SAAR,CAAkBN,MAAlB,EAA0BI,EAA1B,EAA8B,GAA9B,CAAZ;AACA,QAAIG,QAAJ,CAL4B,CAO5B;;AACA,QAAGF,UAAH,EAAe;AACXE,MAAAA,QAAQ,GAAGT,WAAW,CAACM,EAAD,CAAX,GAAkBC,UAA7B;AACH,KAFD,MAEO;AACHE,MAAAA,QAAQ,GAAGT,WAAW,CAACM,EAAD,CAAX,GAAkB,EAA7B;AACAG,MAAAA,QAAQ,CAACH,EAAT,GAAcA,EAAd;AACH,KAb2B,CAe5B;;;AACAjH,IAAAA,KAAK,CAACqH,YAAN,CAAmBlE,IAAnB,CAAwBlD,KAAK,CAACqH,GAA9B;;AACArH,IAAAA,KAAK,CAACoH,YAAN,CAAmBlE,IAAnB,CAAwBnD,KAAK,CAACsH,GAA9B;;AACAtH,IAAAA,KAAK,CAACuH,aAAN,CAAoBpE,IAApB,CAAyB8D,EAAzB;;AACAhH,IAAAA,KAAK,CAACsH,aAAN,CAAoBpE,IAApB,CAAyB8D,EAAzB,EAnB4B,CAqB5B;;;AACAG,IAAAA,QAAQ,CAACpH,KAAT,GAAiBA,KAAjB;AACAoH,IAAAA,QAAQ,CAACnH,KAAT,GAAiBA,KAAjB,CAvB4B,CAyB5B;AACA;AACA;AACA;;AACAmH,IAAAA,QAAQ,CAACI,mBAAT,GAA+B,KAA/B;;AAEA,SAAIhF,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGjG,WAAW,CAACzE,MAA3B,EAAmC0K,CAAC,EAApC,EAAwC;AACpC,UAAIL,KAAK,GAAG5F,WAAW,CAACiG,CAAD,CAAvB;;AAEA,UACIL,KAAK,CAACnC,KAAN,KAAgBoH,QAAQ,CAACpH,KAAT,CAAesH,GAA/B,IACAnF,KAAK,CAAClC,KAAN,KAAgBmH,QAAQ,CAACnH,KAAT,CAAeqH,GAD/B,IAEAnF,KAAK,CAACsF,UAAN,KAAqB,KAHzB,EAIE;AACEL,QAAAA,QAAQ,CAACI,mBAAT,GAA+B,IAA/B;AACA;AACH;AACJ;AACJ,GAzDiF,CA2DlF;AACA;;;AACA,MAAIE,MAAM,GAAGlT,OAAO,CAACmT,IAAR,CAAad,MAAb,EAAqB,IAArB,EAA2B,IAA3B,CAAb;AACA,MAAIe,EAAJ;;AACA,OAAIhL,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG8K,MAAM,CAAC5P,MAAtB,EAA8B8E,CAAC,EAA/B,EAAmC;AAC/BgL,IAAAA,EAAE,GAAGF,MAAM,CAAC9K,CAAD,CAAX;AACA,QAAIiL,MAAM,GAAG,IAAb;;AAEA,QAAGD,EAAE,CAACE,UAAN,EAAkB;AACdD,MAAAA,MAAM,GAAGrT,OAAO,CAAC2S,SAAR,CAAkBN,MAAlB,EAA0Be,EAAE,CAACE,UAA7B,CAAT,CADc,CAGd;;AACA,UAAGD,MAAM,IAAIA,MAAM,CAACC,UAApB,EAAgC;AAC5BF,QAAAA,EAAE,CAACE,UAAH,GAAgB,KAAhB;AACAD,QAAAA,MAAM,GAAG,IAAT;AACH;AACJ;;AACDD,IAAAA,EAAE,CAACG,SAAH,GAAeF,MAAM,IAAID,EAAzB;AAEA;;;;;;;;;AAQA,QAAGC,MAAH,EAAWD,EAAE,CAACI,MAAH,GAAYH,MAAM,CAACG,MAAP,CAAcnF,KAAd,EAAZ;AAEX+E,IAAAA,EAAE,CAACK,WAAH,GAAiBL,EAAE,CAACM,MAAH,KAAc,MAAd,GACb,IADa,GAEb1T,OAAO,CAAC2S,SAAR,CAAkBN,MAAlB,EAA0Be,EAAE,CAACM,MAA7B,CAFJ;AAGH,GA3FiF,CA6FlF;AACA;;;AACA,OAAItL,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG8K,MAAM,CAAC5P,MAAtB,EAA8B8E,CAAC,EAA/B,EAAmC;AAC/BgL,IAAAA,EAAE,GAAGF,MAAM,CAAC9K,CAAD,CAAX;;AACAgL,IAAAA,EAAE,CAACP,YAAH,CAAgBc,IAAhB,CAAqB3T,OAAO,CAAC4T,MAA7B;;AACAR,IAAAA,EAAE,CAACL,aAAH,CAAiBY,IAAjB,CAAsB9T,GAAG,CAACgU,WAA1B;;AACAT,IAAAA,EAAE,CAACU,YAAH,GAAkBC,eAAe,CAACX,EAAD,EAAKzL,aAAL,CAAjC,CAJ+B,CAM/B;AACA;;AACA,QAAGyL,EAAE,CAACP,YAAH,CAAgBvP,MAAhB,KACE8P,EAAE,CAACY,SAAH,IAAgBZ,EAAE,CAACY,SAAH,CAAaC,OAAb,CAAqB,QAArB,MAAmC,CAAC,CAArD,IACCb,EAAE,CAACc,UAAH,IAAiBd,EAAE,CAACe,MAApB,IAA8Bf,EAAE,CAACM,MAAH,KAAc,MAD7C,IAEAhU,QAAQ,CAAC0C,kBAAT,CAA4B,aAA5B,EAA2C,WAA3C,EAAwDgR,EAAxD,CAHD,CAAH,EAIG;AACC,UAAIgB,GAAG,GAAG,CAAV;AACA,UAAIC,GAAG,GAAG,CAAV;;AACA,WAAIrG,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGoF,EAAE,CAACP,YAAH,CAAgBvP,MAA/B,EAAuC0K,CAAC,EAAxC,EAA4C;AACxC,YAAIsG,GAAG,GAAGtU,OAAO,CAAC2S,SAAR,CAAkBN,MAAlB,EAA0Be,EAAE,CAACP,YAAH,CAAgB7E,CAAhB,CAA1B,CAAV;AACAoG,QAAAA,GAAG,GAAGG,IAAI,CAACH,GAAL,CAASA,GAAT,EAAcE,GAAG,CAACd,MAAJ,CAAW,CAAX,CAAd,CAAN;AACAa,QAAAA,GAAG,GAAGE,IAAI,CAACF,GAAL,CAASA,GAAT,EAAcC,GAAG,CAACd,MAAJ,CAAW,CAAX,CAAd,CAAN;AACH;;AACD,UAAGY,GAAG,GAAGC,GAAT,EAAc;AACVjB,QAAAA,EAAE,CAACoB,iBAAH,GAAuBJ,GAAvB;AACAhB,QAAAA,EAAE,CAACqB,iBAAH,GAAuBJ,GAAvB;AACH;AACJ;AACJ;AACJ,CAzHD;;AA2HA,SAASN,eAAT,CAAyBX,EAAzB,EAA6B1R,UAA7B,EAAyC;AACrC,MAAI2Q,MAAM,GAAG;AAAC1Q,IAAAA,WAAW,EAAED;AAAd,GAAb;AAEA,MAAIgT,GAAG,GAAGtB,EAAE,CAACN,GAAH,CAAOtC,MAAP,CAAc,CAAd,MAAqB,GAA/B;AACA,MAAImE,QAAQ,GAAGvB,EAAE,CAACG,SAAH,CAAaE,WAA5B;AACA,MAAImB,aAAa,GAAG,EAApB;AACA,MAAIC,qBAAqB,GAAG,EAA5B;AACA,MAAIC,QAAQ,GAAG,EAAf,CAPqC,CASrC;;AACA,MAAGH,QAAH,EAAa;AACTG,IAAAA,QAAQ,GAAGH,QAAQ,CAACpB,SAAT,CAAmBT,GAA9B;AACA8B,IAAAA,aAAa,GAAGF,GAAG,GAAItB,EAAE,CAACN,GAAH,GAASgC,QAAb,GAA0BA,QAAQ,GAAG1B,EAAE,CAACN,GAA3D;AACH,GAboC,CAerC;AACA;;;AACA,MAAG,CAAC8B,aAAD,IAAkB,CAAClT,UAAU,CAACwQ,MAAX,CAAkB0C,aAAlB,CAAtB,EAAwD;AACpDA,IAAAA,aAAa,GAAG,EAAhB;AAEA,QAAIG,UAAU,GAAG3B,EAAE,CAACP,YAApB;;AACA,SAAI,IAAI7E,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG+G,UAAU,CAACzR,MAA9B,EAAsC0K,CAAC,EAAvC,EAA2C;AACvC,UAAIgH,WAAW,GAAGD,UAAU,CAAC/G,CAAD,CAA5B;AACA,UAAIyE,EAAE,GAAGiC,GAAG,GAAItB,EAAE,CAACN,GAAH,GAASkC,WAAb,GAA6BA,WAAW,GAAG5B,EAAE,CAACN,GAA1D;AACA,UAAG,CAAC+B,qBAAJ,EAA2BA,qBAAqB,GAAGpC,EAAxB;AAC3B,UAAIwC,SAAS,GAAGjV,OAAO,CAAC2S,SAAR,CAAkBN,MAAlB,EAA0B2C,WAA1B,CAAhB;;AACA,UAAGF,QAAQ,IAAIG,SAAS,CAAC3B,UAAV,KAAyBwB,QAAxC,EAAkD;AAC9CF,QAAAA,aAAa,GAAGnC,EAAhB;AACA;AACH;AACJ;AACJ;;AAED,SAAOmC,aAAa,IAAIC,qBAAxB;AACH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvU,KAAK,CAAC4U,+BAAN,GAAwC,UAASvH,KAAT,EAAgB;AACpD,MAAIwH,UAAJ,EAAgBtP,IAAhB,EAAsBuC,CAAtB,CADoD,CAGpD;AACA;;AACA,WAASgN,gBAAT,CAA0BzQ,IAA1B,EAAgC0Q,QAAhC,EAA0C5Q,KAA1C,EAAiD6Q,KAAjD,EAAwD;AACpDzP,IAAAA,IAAI,CAACyP,KAAD,CAAJ,GAAcD,QAAd;AACAxP,IAAAA,IAAI,CAACvC,MAAL,GAAcgS,KAAK,GAAG,CAAtB;;AACA,QAAG3Q,IAAI,CAAC4Q,OAAL,KAAiB,OAAjB,IAA4B5Q,IAAI,CAAC6Q,IAAL,KAAc7D,SAA7C,EAAwD;AACpDwD,MAAAA,UAAU,CAACxG,IAAX,CAAgB9I,IAAI,CAAC4P,IAAL,CAAU,GAAV,CAAhB;AACH;AACJ;;AAED5P,EAAAA,IAAI,GAAG,EAAP,CAboD,CAepD;;AACAsP,EAAAA,UAAU,GAAGxH,KAAK,CAAC0D,OAAN,CAAcqE,WAA3B,CAhBoD,CAkBpD;;AACA,MAAG,CAACP,UAAJ,EAAgB;AACZxH,IAAAA,KAAK,CAAC0D,OAAN,CAAcqE,WAAd,GAA4BP,UAAU,GAAG,EAAzC;AACAxV,IAAAA,UAAU,CAACgW,KAAX,CACIhI,KAAK,CAAC0D,OAAN,CAAc3Q,UADlB,EAEI0U,gBAFJ;AAIH;;AAED,OAAIhN,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG+M,UAAU,CAAC7R,MAA1B,EAAkC8E,CAAC,EAAnC,EAAuC;AACnC,QAAIwN,QAAQ,GAAG/V,GAAG,CAACsO,cAAJ,CAAmBR,KAAnB,EAA0B,YAAYwH,UAAU,CAAC/M,CAAD,CAAhD,CAAf;;AAEA,QAAG,CAACwN,QAAQ,CAACxH,GAAT,EAAJ,EAAoB;AAChBvO,MAAAA,GAAG,CAACsO,cAAJ,CAAmBR,KAAnB,EAA0BwH,UAAU,CAAC/M,CAAD,CAApC,EAAyCkG,GAAzC,CAA6C,IAA7C;AACH;AACJ;AACJ,CAlCD;;AAqCAhO,KAAK,CAAC4K,kBAAN,GAA2B,UAAS2K,MAAT,EAAiBC,OAAjB,EAA0BlT,MAA1B,EAAkClB,UAAlC,EAA8C;AACrE,MAAI0P,OAAO,GAAG1P,UAAU,CAACoI,QAAzB;AACA,MAAIiM,cAAc,GAAGrU,UAAU,CAACqI,eAAhC;AACA,MAAIoH,eAAe,GAAGzP,UAAU,CAACsI,gBAAjC;AACA,MAAIgM,GAAG,GAAG,CAAV;AACA,MAAIC,QAAQ,GAAG,CAAf;AAEA,MAAI7N,CAAJ,EAAO8N,SAAP,EAAkBvI,KAAlB;AAEAjM,EAAAA,UAAU,CAACyU,iBAAX,GAA+B,EAA/B;;AAEA,WAASC,UAAT,CAAoBF,SAApB,EAA+B;AAC3BJ,IAAAA,OAAO,CAACnH,IAAR,CAAauH,SAAb;AAEA,QAAI7E,OAAO,GAAG6E,SAAS,CAAC7E,OAAxB;AACA,QAAG,CAACA,OAAJ,EAAa;AAEbxR,IAAAA,GAAG,CAAC0L,UAAJ,CAAe6F,OAAf,EAAwBC,OAAxB;AACA,QAAG6E,SAAS,CAACG,OAAV,KAAsB,IAAzB,EAA+BxW,GAAG,CAAC0L,UAAJ,CAAewK,cAAf,EAA+B1E,OAA/B;AAC/BxR,IAAAA,GAAG,CAAC0L,UAAJ,CAAe4F,eAAf,EAAgC+E,SAAS,CAAC7E,OAAV,CAAkBiF,cAAlD;AACAN,IAAAA,GAAG,GATwB,CAW3B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAGE,SAAS,CAACK,MAAV,CAAiBF,OAAjB,KAA6B,KAAhC,EAAuCJ,QAAQ;AAClD;;AAED,MAAIO,WAAW,GAAG,EAAlB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,YAAY,GAAG,CAAC9T,MAAM,CAAC+T,QAAP,IAAmB,EAApB,EAAwB5U,IAAxB,IAAgC,EAAnD;AACA,MAAI6U,SAAS,GAAGhX,QAAQ,CAACiX,cAAT,CAAwBH,YAAxB,CAAhB;;AAEA,OAAItO,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGyN,MAAM,CAACvS,MAAtB,EAA8B8E,CAAC,EAA/B,EAAmC;AAC/BuF,IAAAA,KAAK,GAAGkI,MAAM,CAACzN,CAAD,CAAd,CAD+B,CAG/B;AACA;;AACA8N,IAAAA,SAAS,GAAGU,SAAS,CAACnJ,QAAV,CAAmBE,KAAnB,CAAZ;AACAuI,IAAAA,SAAS,CAAC7I,GAAV,GAAgB3L,UAAU,CAACoJ,UAAX,CAAsB1C,CAAtB,CAAhB;AACA9H,IAAAA,KAAK,CAACwW,mBAAN,CAA0BnJ,KAA1B,EAAiCuI,SAAjC,EAA4CD,QAA5C,EAAsDvU,UAAtD,EAAkE0G,CAAlE;AAEA8N,IAAAA,SAAS,CAACrF,KAAV,GAAkBzI,CAAlB;AACA8N,IAAAA,SAAS,CAACK,MAAV,GAAmB5I,KAAnB;AACAuI,IAAAA,SAAS,CAACa,cAAV,GAA2Bf,GAA3B;;AAEA,QAAGE,SAAS,CAACc,UAAV,IAAwBd,SAAS,CAACc,UAAV,CAAqB1T,MAAhD,EAAwD;AACpD,UAAI2T,WAAW,GAAGtJ,KAAK,CAAC0I,OAAN,KAAkB,KAAlB,IAA2BH,SAAS,CAACG,OAAV,KAAsB,KAAnE;AAEA,UAAIa,cAAc,GAAGC,eAAe,CAACjB,SAAD,EAAYJ,OAAZ,EAAqBlT,MAArB,EAA6BlB,UAA7B,CAApC;;AAEA,WAAI,IAAIsM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGkJ,cAAc,CAAC5T,MAAlC,EAA0C0K,CAAC,EAA3C,EAA+C;AAC3C,YAAIoJ,aAAa,GAAGF,cAAc,CAAClJ,CAAD,CAAlC,CAD2C,CAG3C;;AACA,YAAIqJ,iBAAiB,GAAG;AACpBC,UAAAA,SAAS,EAAEpB,SAAS,CAACoB,SADD;AAEpB3W,UAAAA,IAAI,EAAEuV,SAAS,CAACvV,IAFI;AAGpB;AACA;AACA0M,UAAAA,GAAG,EAAE6I,SAAS,CAAC7I,GAAV,GAAgBW;AALD,SAAxB,CAJ2C,CAY3C;AACA;AACA;AACA;AACA;AACA;;AACA,YAAGiJ,WAAW,IAAIG,aAAa,CAACf,OAAd,KAA0B,KAA5C,EAAmD;AAC/C,iBAAOe,aAAa,CAACf,OAArB;AACH;;AAED/V,QAAAA,KAAK,CAACwW,mBAAN,CAA0BM,aAA1B,EAAyCC,iBAAzC,EAA4DrB,GAA5D,EAAiEtU,UAAjE,EAA6E0G,CAA7E,EAtB2C,CAwB3C;AACA;;AACAhI,QAAAA,iBAAiB,CAACiX,iBAAD,EAAoBD,aAApB,CAAjB,CA1B2C,CA4B3C;;AACAC,QAAAA,iBAAiB,CAACxG,KAAlB,GAA0BzI,CAA1B;AACAiP,QAAAA,iBAAiB,CAACd,MAAlB,GAA2B5I,KAA3B;AACA0J,QAAAA,iBAAiB,CAAC/J,UAAlB,GAA+B4I,SAA/B,CA/B2C,CAiC3C;;AACAmB,QAAAA,iBAAiB,CAACN,cAAlB,GAAmCf,GAAnC;AACAqB,QAAAA,iBAAiB,CAACE,cAAlB,GAAmCH,aAAnC;AAEAhB,QAAAA,UAAU,CAACiB,iBAAD,CAAV;AACH;AACJ,KA5CD,MA4CO;AACH;AACAnB,MAAAA,SAAS,CAAC5I,UAAV,GAAuB4I,SAAvB;AACAA,MAAAA,SAAS,CAACqB,cAAV,GAA2BrB,SAA3B;AAEAE,MAAAA,UAAU,CAACF,SAAD,CAAV;AACH;;AAED,QAAGxW,QAAQ,CAAC8X,OAAT,CAAiBtB,SAAjB,EAA4B,YAA5B,CAAH,EAA8C;AAC1CM,MAAAA,WAAW,CAACN,SAAS,CAACuB,MAAX,CAAX,GAAgCvB,SAAhC;AACH;;AAED,QAAGxW,QAAQ,CAAC8X,OAAT,CAAiBtB,SAAjB,EAA4B,iBAA5B,CAAH,EAAmD;AAC/CO,MAAAA,gBAAgB,CAAC9H,IAAjB,CAAsBvG,CAAtB;AACH;AACJ;;AAED,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGqO,gBAAgB,CAACnT,MAAhC,EAAwC8E,CAAC,EAAzC,EAA6C;AACzC8N,IAAAA,SAAS,GAAGJ,OAAO,CAACW,gBAAgB,CAACrO,CAAD,CAAjB,CAAnB;AAEA,QAAG,CAAC8N,SAAS,CAACG,OAAd,EAAuB;AAEvB,QAAIqB,UAAU,GAAGlB,WAAW,CAACN,SAAS,CAACuB,MAAX,CAA5B;AACAvB,IAAAA,SAAS,CAACyB,OAAV,GAAoBD,UAApB;;AAEA,QAAG,CAACA,UAAD,IAAe,CAACA,UAAU,CAACrB,OAA9B,EAAuC;AACnCH,MAAAA,SAAS,CAACG,OAAV,GAAoB,KAApB;AACA;AACH;;AAEDH,IAAAA,SAAS,CAAC1K,KAAV,GAAkBkM,UAAU,CAAClM,KAA7B;AACA0K,IAAAA,SAAS,CAACzK,KAAV,GAAkBiM,UAAU,CAACjM,KAA7B;AACH;AACJ,CA/HD;;AAiIAnL,KAAK,CAACsX,uBAAN,GAAgC,UAASrQ,IAAT,EAAe;AAC3CA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,MAAIa,CAAJ;AACA,MAAIyP,OAAO,GAAG,EAAd;;AAEA,WAASC,MAAT,CAAgBnT,IAAhB,EAAsB6Q,IAAtB,EAA4B;AACxB,WAAO3V,GAAG,CAACiY,MAAJ,CAAWvQ,IAAI,IAAI,EAAnB,EAAuBsQ,OAAvB,EAAgC5X,cAAhC,EAAgD0E,IAAhD,EAAsD6Q,IAAtD,CAAP;AACH;;AAEDsC,EAAAA,MAAM,CAAC,MAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,WAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,aAAD,CAAN;;AAEA,MAAGhJ,KAAK,CAACW,OAAN,CAAclI,IAAI,CAACwQ,KAAnB,CAAH,EAA8B;AAC1BF,IAAAA,OAAO,CAACE,KAAR,GAAgB,EAAhB;;AACA,SAAI3P,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGb,IAAI,CAACwQ,KAAL,CAAWzU,MAA1B,EAAkC8E,CAAC,EAAnC,EAAuC;AACnCyP,MAAAA,OAAO,CAACE,KAAR,CAAc3P,CAAd,IAAmB9H,KAAK,CAAC0X,4BAAN,CAAmCzQ,IAAI,CAACwQ,KAAL,CAAW3P,CAAX,KAAiB,EAApD,CAAnB;AACH;AACJ,GALD,MAKO;AACHyP,IAAAA,OAAO,CAACE,KAAR,GAAgBzX,KAAK,CAAC0X,4BAAN,CAAmCzQ,IAAI,CAACwQ,KAAL,IAAc,EAAjD,CAAhB;AACH;;AAED,MAAGjJ,KAAK,CAACW,OAAN,CAAclI,IAAI,CAAC0Q,UAAnB,CAAH,EAAmC;AAC/BJ,IAAAA,OAAO,CAACI,UAAR,GAAqB,EAArB;;AACA,SAAI7P,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGb,IAAI,CAAC0Q,UAAL,CAAgB3U,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxCyP,MAAAA,OAAO,CAACI,UAAR,CAAmB7P,CAAnB,IAAwB9H,KAAK,CAAC4X,iCAAN,CAAwC3Q,IAAI,CAAC0Q,UAAL,CAAgB7P,CAAhB,KAAsB,EAA9D,CAAxB;AACH;AACJ,GALD,MAKO;AACHyP,IAAAA,OAAO,CAACI,UAAR,GAAqB3X,KAAK,CAAC4X,iCAAN,CAAwC3Q,IAAI,CAAC0Q,UAAL,IAAmB,EAA3D,CAArB;AACH;;AAED,SAAOJ,OAAP;AACH,CAhCD;;AAkCAvX,KAAK,CAAC0X,4BAAN,GAAqC,UAASzQ,IAAT,EAAe;AAChD,MAAIsQ,OAAO,GAAG,EAAd;;AAEA,WAASC,MAAT,CAAgBnT,IAAhB,EAAsB6Q,IAAtB,EAA4B;AACxB,WAAO3V,GAAG,CAACiY,MAAJ,CAAWvQ,IAAI,IAAI,EAAnB,EAAuBsQ,OAAvB,EAAgC5X,cAAc,CAAC8X,KAA/C,EAAsDpT,IAAtD,EAA4D6Q,IAA5D,CAAP;AACH;;AAEDsC,EAAAA,MAAM,CAAC,UAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,QAAD,CAAN;AAEA,SAAOD,OAAP;AACH,CAXD;;AAaAvX,KAAK,CAAC4X,iCAAN,GAA0C,UAAS3Q,IAAT,EAAe;AACrD,MAAIsQ,OAAO,GAAG,EAAd;;AAEA,WAASC,MAAT,CAAgBnT,IAAhB,EAAsB6Q,IAAtB,EAA4B;AACxB,WAAO3V,GAAG,CAACiY,MAAJ,CAAWvQ,IAAI,IAAI,EAAnB,EAAuBsQ,OAAvB,EAAgC5X,cAAc,CAACgY,UAA/C,EAA2DtT,IAA3D,EAAiE6Q,IAAjE,CAAP;AACH;;AAEDsC,EAAAA,MAAM,CAAC,UAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,QAAD,CAAN;AAEA,SAAOD,OAAP;AACH,CAXD;;AAaAvX,KAAK,CAAC6X,mBAAN,GAA4B,UAASC,OAAT,EAAkB;AAC1C,MAAIC,QAAQ,GAAG,EAAf;;AAEA,WAASP,MAAT,CAAgBnT,IAAhB,EAAsB6Q,IAAtB,EAA4B;AACxB,WAAO3V,GAAG,CAACiY,MAAJ,CAAWM,OAAX,EAAoBC,QAApB,EAA8BnY,UAA9B,EAA0CyE,IAA1C,EAAgD6Q,IAAhD,CAAP;AACH;;AAEDsC,EAAAA,MAAM,CAAC,OAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,MAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,QAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,WAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,MAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,QAAD,CAAN;AAEA,SAAOO,QAAP;AACH,CAfD;;AAiBA/X,KAAK,CAACwW,mBAAN,GAA4B,UAASwB,OAAT,EAAkBC,QAAlB,EAA4BC,UAA5B,EAAwC5V,MAAxC,EAAgD6V,YAAhD,EAA8D;AACtF,MAAIC,QAAQ,GAAG9V,MAAM,CAAC8V,QAAP,IAAmB5Y,KAAK,CAAC6Y,QAAxC;AACA,MAAIC,YAAY,GAAGF,QAAQ,CAACF,UAAU,GAAGE,QAAQ,CAACpV,MAAvB,CAA3B;AAEA,MAAI8E,CAAJ;;AAEA,WAAS0P,MAAT,CAAgBnT,IAAhB,EAAsB6Q,IAAtB,EAA4B;AACxB,WAAO3V,GAAG,CAACiY,MAAJ,CAAWQ,OAAX,EAAoBC,QAApB,EAA8BjY,KAAK,CAACI,UAApC,EAAgDiE,IAAhD,EAAsD6Q,IAAtD,CAAP;AACH;;AAED,MAAIa,OAAO,GAAGyB,MAAM,CAAC,SAAD,CAApB;AAEAA,EAAAA,MAAM,CAAC,MAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,MAAD,EAASlV,MAAM,CAAC+F,UAAP,GAAoB,GAApB,GAA0B8P,YAAnC,CAAN;AAEAX,EAAAA,MAAM,CAAC,YAAD,EAAelV,MAAM,CAACiW,UAAtB,CAAN,CAfsF,CAiBtF;AACA;;AACA,MAAIxH,OAAO,GAAG/Q,KAAK,CAACwY,SAAN,CAAgBP,QAAhB,CAAd;;AAEAA,EAAAA,QAAQ,CAAClH,OAAT,GAAmBA,OAAnB;;AACA,MAAGA,OAAH,EAAY;AACR,QAAIiF,cAAc,GAAGjF,OAAO,CAACiF,cAA7B;AACA,QAAI9G,WAAW,GAAG8G,cAAc,CAAC3R,IAAjC;AACA,QAAIoU,YAAY,GAAGzC,cAAc,CAAC5V,UAAlC;;AACA,QAAG8O,WAAW,IAAIuJ,YAAlB,EAAgC;AAC5B,UAAI9O,QAAQ,GAAGrH,MAAM,CAACsH,SAAtB;AACA,UAAI8O,SAAS,GAAG,EAAhB,CAF4B,CAI5B;AACA;AACA;;AACA,UAAG1C,cAAc,CAACvP,IAAf,KAAwB,MAAxB,IAAkCsP,OAArC,EAA8C;AAC1C,YAAGvH,KAAK,CAACW,OAAN,CAAcD,WAAd,CAAH,EAA+B;AAC3B,eAAIpH,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGoH,WAAW,CAAClM,MAA3B,EAAmC8E,CAAC,EAApC,EAAwC;AACpC,gBAAI6Q,KAAK,GAAGzJ,WAAW,CAACpH,CAAD,CAAvB;AACA,gBAAI8Q,IAAI,GAAGrZ,GAAG,CAACiY,MAAJ,CAAWQ,OAAX,EAAoBC,QAApB,EAA8BQ,YAA9B,EAA4CE,KAA5C,CAAX;AAEA,gBAAGhP,QAAQ,CAACgP,KAAD,CAAX,EAAoBpZ,GAAG,CAAC0L,UAAJ,CAAetB,QAAQ,CAACgP,KAAD,CAAvB,EAAgCC,IAAhC;AACpBF,YAAAA,SAAS,IAAIE,IAAb;AACH;AACJ,SARD,MAQO;AACHF,UAAAA,SAAS,GAAGnZ,GAAG,CAACiY,MAAJ,CAAWQ,OAAX,EAAoBC,QAApB,EAA8BQ,YAA9B,EAA4CvJ,WAA5C,CAAZ;AACH;;AAED,YAAGvF,QAAQ,CAACqM,cAAc,CAACvP,IAAhB,CAAX,EAAkC;AAC9BlH,UAAAA,GAAG,CAAC0L,UAAJ,CAAetB,QAAQ,CAACqM,cAAc,CAACvP,IAAhB,CAAvB,EAA8CiS,SAA9C;AACH;AACJ;AACJ;AACJ;;AAED,MAAG3C,OAAH,EAAY;AACRyB,IAAAA,MAAM,CAAC,YAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,KAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,MAAD,CAAN;;AAEA,QAAGpY,QAAQ,CAAC8X,OAAT,CAAiBe,QAAjB,EAA2B,YAA3B,CAAH,EAA6C;AACzCA,MAAAA,QAAQ,CAACY,eAAT,GAA2B,IAA3B;AACArB,MAAAA,MAAM,CAAC,YAAD,CAAN;AACAA,MAAAA,MAAM,CAAC,aAAD,CAAN;AACH,KAJD,MAIO;AACHS,MAAAA,QAAQ,CAACY,eAAT,GAA2B,KAA3B;AACH;;AAED,QAAG9H,OAAH,EAAY;AACRA,MAAAA,OAAO,CAAC/J,cAAR,CAAuBgR,OAAvB,EAAgCC,QAAhC,EAA0CK,YAA1C,EAAwDhW,MAAxD;AACH;;AAED,QAAG,CAAClD,QAAQ,CAAC8X,OAAT,CAAiBe,QAAjB,EAA2B,WAA3B,CAAJ,EAA6C;AACzCT,MAAAA,MAAM,CAAC,SAAD,CAAN;AACH;;AAED,QAAGpY,QAAQ,CAAC8X,OAAT,CAAiBe,QAAjB,EAA2B,qBAA3B,CAAH,EAAsD;AAClD;AACA;AACAA,MAAAA,QAAQ,CAAClC,OAAT,GAAmB,CAAC,CAACkC,QAAQ,CAAClC,OAA9B;AACH;;AAED,QAAG,CAAC3W,QAAQ,CAAC8X,OAAT,CAAiBe,QAAjB,EAA2B,SAA3B,CAAJ,EAA2C;AACvC,UAAG,CAACA,QAAQ,CAACa,aAAb,EAA4BvZ,GAAG,CAACwZ,eAAJ,CAAoBf,OAApB,EAA6BC,QAA7B,EAAuC3V,MAAvC,EADW,CAGvC;;AACA,UAAG2V,QAAQ,CAAC5X,IAAT,KAAkB,SAArB,EAAgC;AAC5BjB,QAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,IAA5B,EAAkC,gBAAlC,EAAoDkW,OAApD,EAA6DC,QAA7D,EAAuEK,YAAvE,EAAqFhW,MAArF;AACH;AACJ;;AAED,QAAGyO,OAAO,IAAIA,OAAO,CAACiI,YAAtB,EAAoC;AAChCxB,MAAAA,MAAM,CAAC,gBAAD,CAAN;AACH;;AAEDxX,IAAAA,KAAK,CAACiZ,uBAAN,CAA8BjB,OAA9B,EAAuCC,QAAvC,EAAiD3V,MAAjD;AACH;;AAED,SAAO2V,QAAP;AACH,CAjGD;AAmGA;;;;;;;;AAMA,SAASiB,qBAAT,CAA+B7L,KAA/B,EAAsC;AAClC,MAAIqJ,UAAU,GAAGrJ,KAAK,CAACqJ,UAAvB;;AACA,MAAGlI,KAAK,CAACW,OAAN,CAAcuH,UAAd,KAA6BA,UAAU,CAAC1T,MAA3C,EAAmD;AAC/C,SAAI,IAAI8E,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG4O,UAAU,CAAC1T,MAA9B,EAAsC8E,CAAC,EAAvC,EAA2C;AACvC,UAAIqR,EAAE,GAAGzC,UAAU,CAAC5O,CAAD,CAAnB;;AACA,UAAIiJ,OAAO,GAAGoI,EAAE,CAACpI,OAAH,IAAcpQ,kBAAkB,CAACwY,EAAE,CAAC9Y,IAAJ,CAA9C;;AACA,UAAG0Q,OAAO,IAAIA,OAAO,CAACqI,SAAtB,EAAiC,OAAO,IAAP;AACpC;AACJ;;AACD,SAAO,KAAP;AACH;;AAEDpZ,KAAK,CAACkZ,qBAAN,GAA8BA,qBAA9B;;AAEAlZ,KAAK,CAACiZ,uBAAN,GAAgC,UAASjB,OAAT,EAAkBC,QAAlB,EAA4B3V,MAA5B,EAAoC;AAChE;AACA;AACA;AACA;AACA,MAAG,EAAE2V,QAAQ,CAACoB,OAAT,IAAoBH,qBAAqB,CAAClB,OAAD,CAA3C,CAAH,EAA0D;AAE1D,MAAIrN,gBAAgB,GAAGrI,MAAM,CAACoI,iBAAP,IAA4B,EAAnD;AACA,MAAI4O,gBAAgB,GAAGhX,MAAM,CAACuT,iBAAP,IAA4B,EAAnD;AAEA,MAAG,CAACrH,KAAK,CAACW,OAAN,CAAc6I,OAAO,CAACtB,UAAtB,CAAD,IAAsC/L,gBAAgB,CAAC3H,MAAjB,KAA4B,CAArE,EAAwE;AAExE,MAAIuW,WAAW,GAAGvB,OAAO,CAACtB,UAAR,IAAsB,EAAxC;AACA,MAAI8C,aAAa,GAAG7O,gBAAgB,CAACsH,MAAjB,CAAwBsH,WAAxB,CAApB;AACA,MAAIE,YAAY,GAAGxB,QAAQ,CAACvB,UAAT,GAAsB,EAAzC;;AAEA,OAAI,IAAI5O,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG0R,aAAa,CAACxW,MAAjC,EAAyC8E,CAAC,EAA1C,EAA8C;AAC1C,QAAI4R,WAAW,GAAGF,aAAa,CAAC1R,CAAD,CAA/B;AACA,QAAIzH,IAAI,GAAGqZ,WAAW,CAACrZ,IAAvB;AACA,QAAI0Q,OAAO,GAAGpQ,kBAAkB,CAACN,IAAD,CAAhC;AACA,QAAIsZ,YAAJ;AAEA;;;;;;;;;;AASA,QAAIC,YAAY,GAAG,EAAEF,WAAW,CAAC3I,OAAZ,IAAuB2I,WAAW,CAAC3I,OAAZ,KAAwBA,OAAjD,CAAnB;AACA,QAAI8I,aAAa,GAAG9I,OAAO,IAAI,OAAOA,OAAO,CAAC+I,SAAf,KAA6B,UAA5D;AAEA,QAAG,CAAC/I,OAAJ,EAAaxR,GAAG,CAACwa,IAAJ,CAAS,iCAAiC1Z,IAAjC,GAAwC,GAAjD;;AAEb,QAAG0Q,OAAO,IAAIA,OAAO,CAAC/J,cAAnB,KAAsC4S,YAAY,IAAIC,aAAtD,CAAH,EAAyE;AACrEF,MAAAA,YAAY,GAAG5I,OAAO,CAAC/J,cAAR,CAAuB0S,WAAvB,EAAoCzB,QAApC,EAA8C3V,MAA9C,EAAsD0V,OAAtD,CAAf;AACA2B,MAAAA,YAAY,CAACtZ,IAAb,GAAoBA,IAApB;AACAsZ,MAAAA,YAAY,CAAC5I,OAAb,GAAuBA,OAAvB;AAEAxR,MAAAA,GAAG,CAAC0L,UAAJ,CAAeqO,gBAAf,EAAiCvI,OAAjC;AACH,KAND,MAMO;AACH4I,MAAAA,YAAY,GAAGpa,GAAG,CAACY,UAAJ,CAAe,EAAf,EAAmBuZ,WAAnB,CAAf;AACH;;AAEDD,IAAAA,YAAY,CAACpL,IAAb,CAAkBsL,YAAlB;AACH;AACJ,CAhDD;;AAkDA,SAAS9C,eAAT,CAAyBjB,SAAzB,EAAoCoE,QAApC,EAA8C1X,MAA9C,EAAsDlB,UAAtD,EAAkE;AAC9D,MAAI2D,SAAS,GAAG6Q,SAAS,CAACc,UAA1B;AACA,MAAIlB,OAAO,GAAG,CAACI,SAAD,CAAd;;AAEA,OAAI,IAAI9N,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG/C,SAAS,CAAC/B,MAA7B,EAAqC8E,CAAC,EAAtC,EAA0C;AACtC,QAAIgS,SAAS,GAAG/U,SAAS,CAAC+C,CAAD,CAAzB;AACA,QAAIiJ,OAAO,GAAGpQ,kBAAkB,CAACmZ,SAAS,CAACzZ,IAAX,CAAhC;;AAEA,QAAG0Q,OAAO,IAAIA,OAAO,CAAC+I,SAAtB,EAAiC;AAC7BtE,MAAAA,OAAO,GAAGzE,OAAO,CAAC+I,SAAR,CAAkBtE,OAAlB,EAA2B;AACjCsE,QAAAA,SAAS,EAAEA,SADsB;AAEjClE,QAAAA,SAAS,EAAEA,SAFsB;AAGjCoE,QAAAA,QAAQ,EAAEA,QAHuB;AAIjC1X,QAAAA,MAAM,EAAEA,MAJyB;AAKjClB,QAAAA,UAAU,EAAEA,UALqB;AAMjC6Y,QAAAA,cAAc,EAAEnS;AANiB,OAA3B,CAAV;AAQH;AACJ;;AAED,SAAO0N,OAAP;AACH;;AAEDxV,KAAK,CAAC6I,0BAAN,GAAmC,UAASqR,QAAT,EAAmBC,SAAnB,EAA8B7R,SAA9B,EAAyC;AACxE,WAASkP,MAAT,CAAgBnT,IAAhB,EAAsB6Q,IAAtB,EAA4B;AACxB,WAAO3V,GAAG,CAACiY,MAAJ,CAAW0C,QAAX,EAAqBC,SAArB,EAAgCna,KAAK,CAACS,gBAAtC,EAAwD4D,IAAxD,EAA8D6Q,IAA9D,CAAP;AACH;;AAED,MAAImB,QAAQ,GAAG6D,QAAQ,CAAC7D,QAAxB;;AACA,MAAG9W,GAAG,CAAC6a,aAAJ,CAAkB/D,QAAlB,CAAH,EAAgC;AAC5B8D,IAAAA,SAAS,CAAC9D,QAAV,GAAqBA,QAArB;AACA8D,IAAAA,SAAS,CAACnD,SAAV,GAAsBX,QAAQ,CAAC/T,MAA/B;AACA6X,IAAAA,SAAS,CAACE,aAAV,GAA0BhE,QAAQ,CAAC5U,IAAnC;AACH;;AAED,MAAI6Y,UAAU,GAAG/a,GAAG,CAACgb,UAAJ,CAAe/C,MAAf,EAAuB,MAAvB,CAAjB;AAEAA,EAAAA,MAAM,CAAC,YAAD,EAAe2C,SAAS,CAAClS,UAAV,CAAqBC,IAApC,CAAN;AAEA3I,EAAAA,GAAG,CAACgb,UAAJ,CAAe/C,MAAf,EAAuB,YAAvB,EAAqC;AACjCgD,IAAAA,MAAM,EAAEF,UAAU,CAACE,MADc;AAEjCC,IAAAA,IAAI,EAAExG,IAAI,CAACyG,KAAL,CAAWJ,UAAU,CAACG,IAAX,GAAkB,GAA7B,CAF2B;AAGjCE,IAAAA,KAAK,EAAEL,UAAU,CAACK;AAHe,GAArC;AAMAnD,EAAAA,MAAM,CAAC,YAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,YAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,SAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,SAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,eAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,eAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,aAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,aAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,aAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,aAAD,CAAN,CA/BwE,CAiCxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,EAAAA,MAAM,CAAC,UAAD,EAAa,EAAE0C,QAAQ,CAAC3X,KAAT,IAAkB2X,QAAQ,CAAC1X,MAA7B,CAAb,CAAN;AAEAgV,EAAAA,MAAM,CAAC,OAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,QAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,UAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,UAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,UAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,UAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,YAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,mBAAD,CAAN;AAEA,MAAG0C,QAAQ,CAAC3X,KAAT,IAAkB2X,QAAQ,CAAC1X,MAA9B,EAAsCxC,KAAK,CAAC8I,eAAN,CAAsBqR,SAAtB;AAEtC/a,EAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,MAA5B,EAAoC,cAApC,EAAoDoY,QAApD,EAA8DC,SAA9D;AAEA3C,EAAAA,MAAM,CAAC,eAAD,CAAN;AAEAA,EAAAA,MAAM,CAAC,YAAD,EAAelP,SAAS,CAAC2H,OAAV,GAAoB3H,SAAS,CAAC6H,SAA7C,CAAN;AACAqH,EAAAA,MAAM,CAAC,aAAD,CAAN;AAEAA,EAAAA,MAAM,CAAC,UAAD,CAAN;AAEAA,EAAAA,MAAM,CAAC,cAAD,CAAN;AACA,MAAIe,UAAU,GAAGf,MAAM,CAAC,YAAD,CAAvB;AACAA,EAAAA,MAAM,CAAC,cAAD,EAAiBe,UAAjB,CAAN;AACAf,EAAAA,MAAM,CAAC,mBAAD,EAAsBe,UAAtB,CAAN;AAEAf,EAAAA,MAAM,CAAC,qBAAD,CAAN;AACAA,EAAAA,MAAM,CAAC,iBAAD,EAAoBhY,KAAK,CAACob,UAAN,CAAiBT,SAAS,CAACU,aAA3B,EAA0C,GAA1C,CAApB,CAAN;AACA,MAAIC,mBAAmB,GAAGtb,KAAK,CAACub,QAAN,CAAevb,KAAK,CAACwb,GAAN,CAAUb,SAAS,CAACc,OAAV,CAAkBC,OAA5B,CAAf,CAA1B;AACA1D,EAAAA,MAAM,CAAC,eAAD,EAAkBhY,KAAK,CAACob,UAAN,CAAiBE,mBAAjB,EAAsC,GAAtC,CAAlB,CAAN;AACAtD,EAAAA,MAAM,CAAC,qBAAD,EAAwBhY,KAAK,CAACob,UAAN,CAAiBE,mBAAjB,EAAsC,GAAtC,CAAxB,CAAN;AACAtD,EAAAA,MAAM,CAAC,oBAAD,EAAuBe,UAAvB,CAAN;AAEAf,EAAAA,MAAM,CAAC,MAAD,CAAN,CA5EwE,CA8ExE;;AACA,MAAGjY,GAAG,CAAC6a,aAAJ,CAAkBF,QAAQ,CAACvC,UAA3B,CAAH,EAA2C;AACvCH,IAAAA,MAAM,CAAC,qBAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,mBAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,qBAAD,CAAN;AACH;;AAEDpY,EAAAA,QAAQ,CAAC0C,kBAAT,CACI,WADJ,EAEI,gBAFJ,EAGEoY,QAHF,EAGYC,SAHZ,EAGuB,UAHvB;AAKA/a,EAAAA,QAAQ,CAAC0C,kBAAT,CACI,IADJ,EAEI,4BAFJ,EAGEoY,QAHF,EAGYC,SAHZ,EAGuB3C,MAHvB;AAIH,CA9FD;;AAgGAxX,KAAK,CAACkJ,YAAN,GAAqB,SAASA,YAAT,CAAsBhI,EAAtB,EAA0BoB,MAA1B,EAAkClB,UAAlC,EAA8C;AAC/D,MAAIyG,OAAO,GAAG3G,EAAE,CAACiC,QAAH,IAAe,EAA7B;AACA,MAAIgY,YAAY,GAAGtT,OAAO,CAACsT,YAA3B;AACA,MAAIC,QAAJ;AACA,MAAIC,SAAJ;AAEA,MAAIC,SAAS,GAAG/b,GAAG,CAAC+b,SAAJ,CAAcpa,EAAd,CAAhB;AAEA,MAAGoa,SAAH,EAAcpa,EAAE,CAAC4E,IAAH,CAAQ,iBAAR,EARiD,CAU/D;AACA;;AACA,MAAG+B,OAAO,CAAC0T,SAAX,EAAsB;AAClBH,IAAAA,QAAQ,GAAG5V,MAAM,CAACgW,UAAlB;AACAH,IAAAA,SAAS,GAAG7V,MAAM,CAACiW,WAAnB,CAFkB,CAIlB;AACA;;AACAnX,IAAAA,QAAQ,CAACC,IAAT,CAAcb,KAAd,CAAoBgY,QAApB,GAA+B,QAA/B;AACH,GAPD,MAOO;AACH;AACA;AACA;AACA;AACA,QAAIC,aAAa,GAAGL,SAAS,GAAG9V,MAAM,CAACoW,gBAAP,CAAwB1a,EAAxB,CAAH,GAAiC,EAA9D;AAEAka,IAAAA,QAAQ,GAAGS,UAAU,CAACF,aAAa,CAACpZ,KAAf,CAAV,IAAmCsZ,UAAU,CAACF,aAAa,CAACG,QAAf,CAA7C,IAAyE1a,UAAU,CAACmB,KAA/F;AACA8Y,IAAAA,SAAS,GAAGQ,UAAU,CAACF,aAAa,CAACnZ,MAAf,CAAV,IAAoCqZ,UAAU,CAACF,aAAa,CAACI,SAAf,CAA9C,IAA2E3a,UAAU,CAACoB,MAAlG;;AAEA,QAAGrD,SAAS,CAACgc,YAAD,CAAT,IAA2BA,YAAY,GAAG,CAA7C,EAAgD;AAC5C,UAAIa,MAAM,GAAG,IAAI,IAAIb,YAArB;AACAC,MAAAA,QAAQ,GAAGnH,IAAI,CAACyG,KAAL,CAAWsB,MAAM,GAAGZ,QAApB,CAAX;AACAC,MAAAA,SAAS,GAAGpH,IAAI,CAACyG,KAAL,CAAWsB,MAAM,GAAGX,SAApB,CAAZ;AACH;AACJ;;AAED,MAAIY,QAAQ,GAAGjc,KAAK,CAACS,gBAAN,CAAuB8B,KAAvB,CAA6BuR,GAA5C;AACA,MAAIoI,SAAS,GAAGlc,KAAK,CAACS,gBAAN,CAAuB+B,MAAvB,CAA8BsR,GAA9C;AACA,MAAGsH,QAAQ,GAAGa,QAAd,EAAwBb,QAAQ,GAAGa,QAAX;AACxB,MAAGZ,SAAS,GAAGa,SAAf,EAA0Bb,SAAS,GAAGa,SAAZ;AAE1B,MAAIC,eAAe,GAAG,CAAC7Z,MAAM,CAACC,KAAR,IACjB0R,IAAI,CAACmI,GAAL,CAAShb,UAAU,CAACmB,KAAX,GAAmB6Y,QAA5B,IAAwC,CAD7C;AAEA,MAAIiB,gBAAgB,GAAG,CAAC/Z,MAAM,CAACE,MAAR,IAClByR,IAAI,CAACmI,GAAL,CAAShb,UAAU,CAACoB,MAAX,GAAoB6Y,SAA7B,IAA0C,CAD/C;;AAGA,MAAGgB,gBAAgB,IAAIF,eAAvB,EAAwC;AACpC,QAAGA,eAAH,EAAoB/a,UAAU,CAACmB,KAAX,GAAmB6Y,QAAnB;AACpB,QAAGiB,gBAAH,EAAqBjb,UAAU,CAACoB,MAAX,GAAoB6Y,SAApB;AACxB,GAjD8D,CAmD/D;AACA;;;AACA,MAAG,CAACna,EAAE,CAACob,gBAAP,EAAyB;AACrBpb,IAAAA,EAAE,CAACob,gBAAH,GAAsB;AAAE/Z,MAAAA,KAAK,EAAE6Y,QAAT;AAAmB5Y,MAAAA,MAAM,EAAE6Y;AAA3B,KAAtB;AACH;;AAEDrb,EAAAA,KAAK,CAAC8I,eAAN,CAAsB1H,UAAtB;AACH,CA1DD;;AA4DApB,KAAK,CAACwL,0BAAN,GAAmC,UAAS0O,QAAT,EAAmBC,SAAnB,EAA8BH,QAA9B,EAAwCuC,cAAxC,EAAwD;AACvF,MAAIC,kBAAkB,GAAGpd,QAAQ,CAACod,kBAAlC;AACA,MAAI3L,eAAe,GAAGsJ,SAAS,CAACzQ,gBAAhC;;AACA,MAAI+S,SAAJ,EAAe3U,CAAf,EAAkBiJ,OAAlB;;AAEA,MAAI2L,SAAS,GAAGtd,QAAQ,CAAC2P,gBAAT,CAA0B1D,SAA1C,CALuF,CAOvF;AACA;;AACA,OAAIoR,SAAJ,IAAiBD,kBAAjB,EAAqC;AACjCzL,IAAAA,OAAO,GAAGyL,kBAAkB,CAACC,SAAD,CAA5B;;AAEA,QAAG1L,OAAO,CAAC4L,eAAX,EAA4B;AACxB5L,MAAAA,OAAO,CAAC4L,eAAR,CAAwBzC,QAAxB,EAAkCC,SAAlC;AACH;AACJ,GAfsF,CAiBvF;;;AACA,MAAG,CAACtJ,eAAe,CAAC7N,MAApB,EAA4B;AACxB6N,IAAAA,eAAe,CAACxC,IAAhB,CAAqBqO,SAArB;AACH,GApBsF,CAsBvF;;;AACA,MAAGvC,SAAS,CAAC5Y,IAAV,CAAe,WAAf,CAAH,EAAgC;AAC5BnC,IAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,MAA5B,EAAoC,iBAApC,EAAuDoY,QAAvD,EAAiEC,SAAjE;AACAuC,IAAAA,SAAS,CAACE,gBAAV,CAA2B1C,QAA3B,EAAqCC,SAArC;AACH,GA1BsF,CA4BvF;;;AACA,OAAI,IAAInL,WAAR,IAAuBmL,SAAS,CAACvQ,SAAjC,EAA4C;AACxCuQ,IAAAA,SAAS,CAACvQ,SAAV,CAAoBoF,WAApB,EAAiCqE,IAAjC,CAAsC9T,GAAG,CAACgU,WAA1C;AACH,GA/BsF,CAiCvF;;;AACA,OAAIzL,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG+I,eAAe,CAAC7N,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxCiJ,IAAAA,OAAO,GAAGF,eAAe,CAAC/I,CAAD,CAAzB,CADwC,CAGxC;;AACA,QAAGiJ,OAAO,CAAC8L,oBAAX,EAAiC;AAC7B9L,MAAAA,OAAO,CAAC8L,oBAAR,CAA6B3C,QAA7B,EAAuCC,SAAvC,EAAkDH,QAAlD;AACH;AACJ,GAzCsF,CA2CvF;AACA;AACA;AACA;;;AACA,MAAIlJ,OAAO,GAAGqJ,SAAS,CAAC3Q,QAAxB;;AACA,OAAI1B,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGgJ,OAAO,CAAC9N,MAAvB,EAA+B8E,CAAC,EAAhC,EAAoC;AAChCiJ,IAAAA,OAAO,GAAGD,OAAO,CAAChJ,CAAD,CAAjB;;AAEA,QAAGiJ,OAAO,CAAC8L,oBAAX,EAAiC;AAC7B9L,MAAAA,OAAO,CAAC8L,oBAAR,CAA6B3C,QAA7B,EAAuCC,SAAvC,EAAkDH,QAAlD;AACH;AACJ,GAtDsF,CAwDvF;;;AACA,MAAIV,gBAAgB,GAAGa,SAAS,CAACtE,iBAAjC;;AACA,OAAI/N,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGwR,gBAAgB,CAACtW,MAAhC,EAAwC8E,CAAC,EAAzC,EAA6C;AACzCiJ,IAAAA,OAAO,GAAGuI,gBAAgB,CAACxR,CAAD,CAA1B;;AAEA,QAAGiJ,OAAO,CAAC8L,oBAAX,EAAiC;AAC7B9L,MAAAA,OAAO,CAAC8L,oBAAR,CAA6B3C,QAA7B,EAAuCC,SAAvC,EAAkDH,QAAlD,EAA4DuC,cAA5D;AACH;AACJ;;AAED,OAAIE,SAAJ,IAAiBD,kBAAjB,EAAqC;AACjCzL,IAAAA,OAAO,GAAGyL,kBAAkB,CAACC,SAAD,CAA5B;;AAEA,QAAG1L,OAAO,CAAC8L,oBAAX,EAAiC;AAC7B9L,MAAAA,OAAO,CAAC8L,oBAAR,CAA6B3C,QAA7B,EAAuCC,SAAvC,EAAkDH,QAAlD;AACH;AACJ;AACJ,CAzED,C,CA2EA;AACA;;;AACAha,KAAK,CAAC8c,KAAN,GAAc,UAAS5b,EAAT,EAAa;AACvB;AACA;AAEA,MAAIE,UAAU,GAAGF,EAAE,CAACG,WAAH,IAAkB,EAAnC;;AACA,MAAGD,UAAU,CAACgQ,YAAX,KAA4BC,SAA/B,EAA0C;AACtCjQ,IAAAA,UAAU,CAACgQ,YAAX,CAAwB3E,SAAxB,CAAkC,YAAlC,EAAgD5F,MAAhD;;AACAzF,IAAAA,UAAU,CAACgQ,YAAX,CAAwBvK,MAAxB;;AACAzF,IAAAA,UAAU,CAACkQ,SAAX,GAAuB,IAAvB;AACH,GATsB,CAWvB;;;AACA,MAAGlQ,UAAU,CAAC2b,QAAd,EAAwB3b,UAAU,CAAC2b,QAAX,CAAoBC,OAApB;;AAExB,MAAG9b,EAAE,CAAC6G,eAAN,EAAuB;AACnB;AACA;AACA,QAAG7G,EAAE,CAAC6G,eAAH,CAAmB4I,mBAAtB,EAA2C;AACvCzP,MAAAA,EAAE,CAAC6G,eAAH,CAAmB4I,mBAAnB,CAAuC3N,MAAvC,GAAgD,CAAhD;AACH;;AAED,QAAG9B,EAAE,CAAC6G,eAAH,CAAmBkV,aAAtB,EAAqC;AACjCzX,MAAAA,MAAM,CAAC0X,oBAAP,CAA4Bhc,EAAE,CAAC6G,eAAH,CAAmBkV,aAA/C;AACH;AACJ,GAxBsB,CA0BvB;;;AACA1d,EAAAA,GAAG,CAAC4d,aAAJ,GA3BuB,CA6BvB;;AACA5d,EAAAA,GAAG,CAAC6d,eAAJ,CAAoBlc,EAApB,EA9BuB,CAgCvB;;AACA,SAAOA,EAAE,CAACO,IAAV;AACA,SAAOP,EAAE,CAACoB,MAAV;AACA,SAAOpB,EAAE,CAACsG,SAAV;AACA,SAAOtG,EAAE,CAACG,WAAV;AACA,SAAOH,EAAE,CAAC0G,QAAV;AACA,SAAO1G,EAAE,CAACmc,SAAV;AACA,SAAOnc,EAAE,CAACoc,KAAV;AAEA,SAAOpc,EAAE,CAACqc,GAAV;AAEA,SAAOrc,EAAE,CAACsc,SAAV,CA3CuB,CA2CF;;AACrB,SAAOtc,EAAE,CAACuc,OAAV;AACA,SAAOvc,EAAE,CAACyB,QAAV,CA7CuB,CA6CH;;AACpB,SAAOzB,EAAE,CAACwB,OAAV,CA9CuB,CAgDvB;AACA;;AACA,SAAOxB,EAAE,CAAC6B,SAAV;AACA,SAAO7B,EAAE,CAACkB,YAAV;AACA,SAAOlB,EAAE,CAACwc,WAAV;AACA,SAAOxc,EAAE,CAACyc,WAAV;AACA,SAAOzc,EAAE,CAAC6G,eAAV;AACA,SAAO7G,EAAE,CAAC0c,cAAV;AACA,SAAO1c,EAAE,CAACob,gBAAV;AACA,SAAOpb,EAAE,CAAC2c,0BAAV,CAzDuB,CA2DvB;AACA;;AACA,SAAO3c,EAAE,CAACsL,SAAV;AACA,SAAOtL,EAAE,CAAC4c,QAAV;AACA,SAAO5c,EAAE,CAAC6c,SAAV;AACA,SAAO7c,EAAE,CAAC8c,UAAV;AACA,SAAO9c,EAAE,CAAC+c,mBAAV;AACA,SAAO/c,EAAE,CAACgd,QAAV;AACA,SAAOhd,EAAE,CAACid,cAAV;AACA,SAAOjd,EAAE,CAACkd,oBAAV,CApEuB,CAsEvB;;AACA,MAAGld,EAAE,CAACmd,kBAAN,EAA0Bnd,EAAE,CAACmd,kBAAH;AAC7B,CAxED;;AA0EAre,KAAK,CAAC0D,KAAN,GAAc,UAASxC,EAAT,EAAa;AACvB,MAAIsI,QAAQ,GAAGtI,EAAE,CAACG,WAAH,CAAeoI,eAA9B;AACA,MAAI6U,YAAY,GAAG,EAAnB;AACA,MAAIxW,CAAJ,CAHuB,CAKvB;AACA;;AAEA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG0B,QAAQ,CAACxG,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqC;AACjC,QAAIiJ,OAAO,GAAGvH,QAAQ,CAAC1B,CAAD,CAAtB;;AACA,QAAGiJ,OAAO,CAACrN,KAAX,EAAkB;AACdnE,MAAAA,GAAG,CAAC0L,UAAJ,CAAeqT,YAAf,EAA6BvN,OAAO,CAACrN,KAArC;AACH;AACJ;;AAED,OAAIoE,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGwW,YAAY,CAACtb,MAA5B,EAAoC8E,CAAC,EAArC,EAAyC;AACrCwW,IAAAA,YAAY,CAACxW,CAAD,CAAZ,CAAgB5G,EAAhB;AACH;AACJ,CAlBD;;AAoBAlB,KAAK,CAAC8I,eAAN,GAAwB,UAAS1H,UAAT,EAAqB;AACzC;AACA,MAAG,CAACA,UAAD,IAAe,CAACA,UAAU,CAACmd,MAA9B,EAAsC;AAEtC,MAAIhc,KAAK,GAAGnB,UAAU,CAACmB,KAAvB;AACA,MAAIC,MAAM,GAAGpB,UAAU,CAACoB,MAAxB;AACA,MAAI+b,MAAM,GAAGnd,UAAU,CAACmd,MAAxB;AACA,MAAIC,SAAS,GAAGjc,KAAK,IAAIgc,MAAM,CAACE,CAAP,GAAWF,MAAM,CAAC7c,CAAtB,CAArB;AACA,MAAIgd,UAAU,GAAGlc,MAAM,IAAI+b,MAAM,CAACI,CAAP,GAAWJ,MAAM,CAACK,CAAtB,CAAvB;AACA,MAAIC,UAAJ,CATyC,CAWzC;AACA;AACA;;AAEA,MAAGL,SAAS,GAAG,CAAf,EAAkB;AACdK,IAAAA,UAAU,GAAG,CAACtc,KAAK,GAAG,CAAT,KAAegc,MAAM,CAACE,CAAP,GAAWF,MAAM,CAAC7c,CAAjC,CAAb;AACA6c,IAAAA,MAAM,CAACE,CAAP,GAAWxK,IAAI,CAAC6K,KAAL,CAAWD,UAAU,GAAGN,MAAM,CAACE,CAA/B,CAAX;AACAF,IAAAA,MAAM,CAAC7c,CAAP,GAAWuS,IAAI,CAAC6K,KAAL,CAAWD,UAAU,GAAGN,MAAM,CAAC7c,CAA/B,CAAX;AACH;;AAED,MAAGgd,UAAU,GAAG,CAAhB,EAAmB;AACfG,IAAAA,UAAU,GAAG,CAACrc,MAAM,GAAG,CAAV,KAAgB+b,MAAM,CAACI,CAAP,GAAWJ,MAAM,CAACK,CAAlC,CAAb;AACAL,IAAAA,MAAM,CAACI,CAAP,GAAW1K,IAAI,CAAC6K,KAAL,CAAWD,UAAU,GAAGN,MAAM,CAACI,CAA/B,CAAX;AACAJ,IAAAA,MAAM,CAACK,CAAP,GAAW3K,IAAI,CAAC6K,KAAL,CAAWD,UAAU,GAAGN,MAAM,CAACK,CAA/B,CAAX;AACH;AACJ,CA1BD;;AA4BA5e,KAAK,CAAC+e,kBAAN,GAA2B,UAAS7d,EAAT,EAAa;AACpCA,EAAAA,EAAE,CAACG,WAAH,CAAe2d,cAAf,GAAgC,EAAhC;AACH,CAFD;;AAIAhf,KAAK,CAACif,eAAN,GAAwB,UAAS/d,EAAT,EAAaiR,EAAb,EAAiB;AACrCjR,EAAAA,EAAE,CAACG,WAAH,CAAe2d,cAAf,CAA8B7M,EAA9B,IAAoC,CAApC;AACH,CAFD;;AAIA,SAASlF,WAAT,CAAqB7L,UAArB,EAAiC;AAC7B,MAAImd,MAAM,GAAGnd,UAAU,CAACmd,MAAxB;;AAEA,MAAG,CAACnd,UAAU,CAAC8d,KAAf,EAAsB;AAClB,QAAIC,EAAE,GAAG/d,UAAU,CAAC8d,KAAX,GAAmB;AACxBT,MAAAA,CAAC,EAAExK,IAAI,CAACyG,KAAL,CAAW6D,MAAM,CAACE,CAAlB,CADqB;AAExB/c,MAAAA,CAAC,EAAEuS,IAAI,CAACyG,KAAL,CAAW6D,MAAM,CAAC7c,CAAlB,CAFqB;AAGxBid,MAAAA,CAAC,EAAE1K,IAAI,CAACyG,KAAL,CAAW6D,MAAM,CAACI,CAAlB,CAHqB;AAIxBC,MAAAA,CAAC,EAAE3K,IAAI,CAACyG,KAAL,CAAW6D,MAAM,CAACK,CAAlB,CAJqB;AAKxBQ,MAAAA,CAAC,EAAEnL,IAAI,CAACyG,KAAL,CAAW6D,MAAM,CAACc,GAAlB;AALqB,KAA5B;AAOAF,IAAAA,EAAE,CAACG,CAAH,GAAOrL,IAAI,CAACyG,KAAL,CAAWtZ,UAAU,CAACmB,KAAtB,IAA+B4c,EAAE,CAACV,CAAlC,GAAsCU,EAAE,CAACzd,CAAhD;AACAyd,IAAAA,EAAE,CAACI,CAAH,GAAOtL,IAAI,CAACyG,KAAL,CAAWtZ,UAAU,CAACoB,MAAtB,IAAgC2c,EAAE,CAACR,CAAnC,GAAuCQ,EAAE,CAACP,CAAjD;AACH;;AACD,MAAG,CAACxd,UAAU,CAACoe,WAAf,EAA4Bpe,UAAU,CAACoe,WAAX,GAAyB,EAAzB;AAC5B,MAAG,CAACpe,UAAU,CAAC4d,cAAf,EAA+B5d,UAAU,CAAC4d,cAAX,GAA4B,EAA5B;AAClC;AAED;;;;;;;;;;;;;;;;;AAeAhf,KAAK,CAACyf,UAAN,GAAmB,UAASve,EAAT,EAAaiR,EAAb,EAAiBuN,CAAjB,EAAoB;AACnC,MAAIte,UAAU,GAAGF,EAAE,CAACG,WAApB;AAEA,MAAIse,UAAU,GAAGve,UAAU,CAACoe,WAA5B;AACA,MAAII,aAAa,GAAGxe,UAAU,CAAC4d,cAA/B;;AAEA,MAAG5d,UAAU,CAACmd,MAAX,CAAkBsB,UAAlB,KAAiC,KAApC,EAA2C;AACvC,QAAG,CAACH,CAAJ,EAAO;AACH,aAAOC,UAAU,CAACxN,EAAD,CAAjB;AACA,aAAOyN,aAAa,CAACzN,EAAD,CAApB;AACH,KAHD,MAGO;AACH,UAAIkN,GAAG,GAAGK,CAAC,CAACL,GAAZ;;AACA,UAAGA,GAAG,KAAKhO,SAAX,EAAsB;AAClB,YAAIkN,MAAM,GAAGnd,UAAU,CAACmd,MAAxB,CADkB,CAElB;AACA;;AACAc,QAAAA,GAAG,GAAGpL,IAAI,CAACH,GAAL,CAAS,EAAT,EAAayK,MAAM,CAACE,CAApB,EAAuBF,MAAM,CAAC7c,CAA9B,EAAiC6c,MAAM,CAACI,CAAxC,EAA2CJ,MAAM,CAACK,CAAlD,CAAN;AACH,OAPE,CASH;AACA;;;AACA,UAAGc,CAAC,CAACjB,CAAF,GAAMiB,CAAC,CAAChe,CAAR,GAAYN,UAAU,CAACmB,KAAX,GAAmB,GAAlC,EAAuC;AACnChD,QAAAA,GAAG,CAACugB,GAAJ,CAAQ,aAAR,EAAuB3N,EAAvB,EAA2B,2BAA3B;AACAuN,QAAAA,CAAC,CAACjB,CAAF,GAAMiB,CAAC,CAAChe,CAAF,GAAM,CAAZ;AACH;;AACD,UAAGge,CAAC,CAACd,CAAF,GAAMc,CAAC,CAACf,CAAR,GAAYvd,UAAU,CAACoB,MAAX,GAAoB,GAAnC,EAAwC;AACpCjD,QAAAA,GAAG,CAACugB,GAAJ,CAAQ,aAAR,EAAuB3N,EAAvB,EAA2B,2BAA3B;AACAuN,QAAAA,CAAC,CAACd,CAAF,GAAMc,CAAC,CAACf,CAAF,GAAM,CAAZ;AACH;;AAED,UAAIoB,EAAE,GAAGL,CAAC,CAACK,EAAF,KAAS1O,SAAT,GAAqBqO,CAAC,CAACK,EAAvB,GAA4BL,CAAC,CAAChb,CAAvC;AACA,UAAIsb,EAAE,GAAGN,CAAC,CAACM,EAAF,KAAS3O,SAAT,GAAqBqO,CAAC,CAACM,EAAvB,GAA4BN,CAAC,CAAChb,CAAvC;AACA,UAAIub,EAAE,GAAGP,CAAC,CAACO,EAAF,KAAS5O,SAAT,GAAqBqO,CAAC,CAACO,EAAvB,GAA4BP,CAAC,CAACtb,CAAvC;AACA,UAAI8b,EAAE,GAAGR,CAAC,CAACQ,EAAF,KAAS7O,SAAT,GAAqBqO,CAAC,CAACQ,EAAvB,GAA4BR,CAAC,CAACtb,CAAvC;AAEAub,MAAAA,UAAU,CAACxN,EAAD,CAAV,GAAiB;AACbsM,QAAAA,CAAC,EAAE;AAAC0B,UAAAA,GAAG,EAAEJ,EAAN;AAAUtF,UAAAA,IAAI,EAAEiF,CAAC,CAACjB,CAAF,GAAMY;AAAtB,SADU;AAEb3d,QAAAA,CAAC,EAAE;AAACye,UAAAA,GAAG,EAAEH,EAAN;AAAUvF,UAAAA,IAAI,EAAEiF,CAAC,CAAChe,CAAF,GAAM2d;AAAtB,SAFU;AAGbT,QAAAA,CAAC,EAAE;AAACuB,UAAAA,GAAG,EAAED,EAAN;AAAUzF,UAAAA,IAAI,EAAEiF,CAAC,CAACd,CAAF,GAAMS;AAAtB,SAHU;AAIbV,QAAAA,CAAC,EAAE;AAACwB,UAAAA,GAAG,EAAEF,EAAN;AAAUxF,UAAAA,IAAI,EAAEiF,CAAC,CAACf,CAAF,GAAMU;AAAtB;AAJU,OAAjB;AAMAO,MAAAA,aAAa,CAACzN,EAAD,CAAb,GAAoB,CAApB;AACH;;AAED,QAAG,CAAC/Q,UAAU,CAACgf,WAAf,EAA4B;AACxB,aAAOpgB,KAAK,CAACqgB,YAAN,CAAmBnf,EAAnB,CAAP;AACH;AACJ;AACJ,CAhDD;;AAkDAlB,KAAK,CAACqgB,YAAN,GAAqB,UAASnf,EAAT,EAAa;AAC9B,MAAIE,UAAU,GAAGF,EAAE,CAACG,WAApB;AACA,MAAG,CAACD,UAAU,CAAC8d,KAAf,EAAsB9d,UAAU,CAAC8d,KAAX,GAAmB,EAAnB;AACtBjS,EAAAA,WAAW,CAAC7L,UAAD,CAAX;AAEA,MAAI+d,EAAE,GAAG/d,UAAU,CAAC8d,KAApB;AACA,MAAIX,MAAM,GAAGnd,UAAU,CAACmd,MAAxB;AACA,MAAI+B,UAAU,GAAG/gB,GAAG,CAACY,UAAJ,CAAe,EAAf,EAAmBgf,EAAnB,CAAjB,CAP8B,CAS9B;AACA;AACA;;AACA,MAAIoB,EAAE,GAAGhC,MAAM,CAACE,CAAhB;AACA,MAAI+B,EAAE,GAAGjC,MAAM,CAAC7c,CAAhB;AACA,MAAI+e,EAAE,GAAGlC,MAAM,CAACI,CAAhB;AACA,MAAI+B,EAAE,GAAGnC,MAAM,CAACK,CAAhB;AACA,MAAIrc,KAAK,GAAGnB,UAAU,CAACmB,KAAvB;AACA,MAAIC,MAAM,GAAGpB,UAAU,CAACoB,MAAxB;AACA,MAAImd,UAAU,GAAGve,UAAU,CAACoe,WAA5B;AACA,MAAII,aAAa,GAAGxe,UAAU,CAAC4d,cAA/B;;AAEA,MAAG5d,UAAU,CAACmd,MAAX,CAAkBsB,UAAlB,KAAiC,KAApC,EAA2C;AACvC,SAAI,IAAIzU,CAAR,IAAauU,UAAb,EAAyB;AACrB,UAAG,CAACC,aAAa,CAACxU,CAAD,CAAjB,EAAsB,OAAOuU,UAAU,CAACvU,CAAD,CAAjB;AACzB,KAHsC,CAKvC;;;AACAuU,IAAAA,UAAU,CAACgB,IAAX,GAAkB;AACdlC,MAAAA,CAAC,EAAE;AAAC0B,QAAAA,GAAG,EAAE,CAAN;AAAS1F,QAAAA,IAAI,EAAE8F;AAAf,OADW;AAEd7e,MAAAA,CAAC,EAAE;AAACye,QAAAA,GAAG,EAAE,CAAN;AAAS1F,QAAAA,IAAI,EAAE+F;AAAf,OAFW;AAGd7B,MAAAA,CAAC,EAAE;AAACwB,QAAAA,GAAG,EAAE,CAAN;AAAS1F,QAAAA,IAAI,EAAEgG;AAAf,OAHW;AAId7B,MAAAA,CAAC,EAAE;AAACuB,QAAAA,GAAG,EAAE,CAAN;AAAS1F,QAAAA,IAAI,EAAEiG;AAAf;AAJW,KAAlB,CANuC,CAavC;AACA;;AAEA,SAAI,IAAIE,EAAR,IAAcjB,UAAd,EAA0B;AACtB,UAAIkB,QAAQ,GAAGlB,UAAU,CAACiB,EAAD,CAAV,CAAenC,CAAf,IAAoB,EAAnC;AACA,UAAIqC,UAAU,GAAGnB,UAAU,CAACiB,EAAD,CAAV,CAAehC,CAAf,IAAoB,EAArC;AACA,UAAImC,EAAE,GAAGF,QAAQ,CAACV,GAAlB;AACA,UAAIa,EAAE,GAAGH,QAAQ,CAACpG,IAAlB;AACA,UAAIwG,EAAE,GAAGH,UAAU,CAACX,GAApB;AACA,UAAIe,EAAE,GAAGJ,UAAU,CAACrG,IAApB;;AAEA,WAAI,IAAI0G,EAAR,IAAcxB,UAAd,EAA0B;AACtB,YAAGxgB,SAAS,CAAC6hB,EAAD,CAAT,IAAiBrB,UAAU,CAACwB,EAAD,CAAV,CAAezf,CAAnC,EAAsC;AAClC,cAAI0f,EAAE,GAAGzB,UAAU,CAACwB,EAAD,CAAV,CAAezf,CAAf,CAAiBye,GAA1B;AACA,cAAIkB,EAAE,GAAG1B,UAAU,CAACwB,EAAD,CAAV,CAAezf,CAAf,CAAiB+Y,IAA1B;;AAEA,cAAG2G,EAAE,GAAGL,EAAR,EAAY;AACR,gBAAIO,IAAI,GAAG,CAACN,EAAE,GAAGI,EAAL,GAAU,CAACC,EAAE,GAAG9e,KAAN,IAAewe,EAA1B,KAAiCK,EAAE,GAAGL,EAAtC,CAAX;AACA,gBAAIQ,IAAI,GAAG,CAACF,EAAE,IAAI,IAAIN,EAAR,CAAF,GAAgB,CAACC,EAAE,GAAGze,KAAN,KAAgB,IAAI6e,EAApB,CAAjB,KAA6CA,EAAE,GAAGL,EAAlD,CAAX;;AACA,gBAAGO,IAAI,IAAI,CAAR,IAAaC,IAAI,IAAI,CAArB,IAA0Bhf,KAAK,IAAI+e,IAAI,GAAGC,IAAX,CAAL,GAAwB,CAAlD,IAAuDD,IAAI,GAAGC,IAAP,GAAchB,EAAE,GAAGC,EAA7E,EAAiF;AAC7ED,cAAAA,EAAE,GAAGe,IAAL;AACAd,cAAAA,EAAE,GAAGe,IAAL;AACH;AACJ;AACJ;;AAED,YAAGpiB,SAAS,CAAC+hB,EAAD,CAAT,IAAiBvB,UAAU,CAACwB,EAAD,CAAV,CAAexC,CAAnC,EAAsC;AAClC,cAAI6C,EAAE,GAAG7B,UAAU,CAACwB,EAAD,CAAV,CAAexC,CAAf,CAAiBwB,GAA1B;AACA,cAAIsB,EAAE,GAAG9B,UAAU,CAACwB,EAAD,CAAV,CAAexC,CAAf,CAAiBlE,IAA1B;;AAEA,cAAG+G,EAAE,GAAGP,EAAR,EAAY;AACR,gBAAIS,IAAI,GAAG,CAACR,EAAE,GAAGM,EAAL,GAAU,CAACC,EAAE,GAAGjf,MAAN,IAAgBye,EAA3B,KAAkCO,EAAE,GAAGP,EAAvC,CAAX;AACA,gBAAIU,IAAI,GAAG,CAACF,EAAE,IAAI,IAAIR,EAAR,CAAF,GAAgB,CAACC,EAAE,GAAG1e,MAAN,KAAiB,IAAIgf,EAArB,CAAjB,KAA8CA,EAAE,GAAGP,EAAnD,CAAX;;AACA,gBAAGS,IAAI,IAAI,CAAR,IAAaC,IAAI,IAAI,CAArB,IAA0Bnf,MAAM,IAAImf,IAAI,GAAGD,IAAX,CAAN,GAAyB,CAAnD,IAAwDA,IAAI,GAAGC,IAAP,GAAcjB,EAAE,GAAGD,EAA9E,EAAkF;AAC9EC,cAAAA,EAAE,GAAGgB,IAAL;AACAjB,cAAAA,EAAE,GAAGkB,IAAL;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAEDxC,EAAAA,EAAE,CAACV,CAAH,GAAOxK,IAAI,CAACyG,KAAL,CAAW6F,EAAX,CAAP;AACApB,EAAAA,EAAE,CAACzd,CAAH,GAAOuS,IAAI,CAACyG,KAAL,CAAW8F,EAAX,CAAP;AACArB,EAAAA,EAAE,CAACR,CAAH,GAAO1K,IAAI,CAACyG,KAAL,CAAW+F,EAAX,CAAP;AACAtB,EAAAA,EAAE,CAACP,CAAH,GAAO3K,IAAI,CAACyG,KAAL,CAAWgG,EAAX,CAAP;AACAvB,EAAAA,EAAE,CAACC,CAAH,GAAOnL,IAAI,CAACyG,KAAL,CAAW6D,MAAM,CAACc,GAAlB,CAAP;AACAF,EAAAA,EAAE,CAACG,CAAH,GAAOrL,IAAI,CAACyG,KAAL,CAAWnY,KAAX,IAAoB4c,EAAE,CAACV,CAAvB,GAA2BU,EAAE,CAACzd,CAArC;AACAyd,EAAAA,EAAE,CAACI,CAAH,GAAOtL,IAAI,CAACyG,KAAL,CAAWlY,MAAX,IAAqB2c,EAAE,CAACR,CAAxB,GAA4BQ,EAAE,CAACP,CAAtC,CAnF8B,CAqF9B;;AACA,MAAG,CAACxd,UAAU,CAACgf,WAAZ,IAA2BpgB,KAAK,CAAC4hB,eAAN,CAAsBtB,UAAtB,EAAkCnB,EAAlC,CAA9B,EAAqE;AACjE,QAAG,gCAAgC/d,UAAnC,EAA+C;AAC3CA,MAAAA,UAAU,CAACygB,0BAAX;AACH,KAFD,MAEO;AACHzgB,MAAAA,UAAU,CAACygB,0BAAX,GAAwC,CAAxC;AACH,KALgE,CAOjE;AACA;AACA;AACA;AACA;;;AACA,QAAIC,kBAAkB,GAAG,KAAK,IAAIhX,MAAM,CAACC,IAAP,CAAY6U,aAAZ,EAA2B5c,MAApC,CAAzB;;AAEA,QAAG5B,UAAU,CAACygB,0BAAX,GAAwCC,kBAA3C,EAA+D;AAC3D,aAAO1iB,QAAQ,CAACwD,IAAT,CAAc,MAAd,EAAsB1B,EAAtB,CAAP;AACH,KAFD,MAEO;AACH3B,MAAAA,GAAG,CAACwa,IAAJ,CAAS,+BAAT;AACH;AACJ;AACJ,CA1GD;;AA4GA,IAAIgI,UAAU,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAjB;;AAEA/hB,KAAK,CAAC4hB,eAAN,GAAwB,UAASI,OAAT,EAAkBC,OAAlB,EAA2B;AAC/C,OAAI,IAAIna,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGia,UAAU,CAAC/e,MAA9B,EAAsC8E,CAAC,EAAvC,EAA2C;AACvC,QAAIsD,CAAC,GAAG2W,UAAU,CAACja,CAAD,CAAlB;AACA,QAAIoa,EAAE,GAAGF,OAAO,CAAC5W,CAAD,CAAhB;AACA,QAAI+W,EAAE,GAAGF,OAAO,CAAC7W,CAAD,CAAhB,CAHuC,CAIvC;AACA;;AACA,QAAG,CAACjM,SAAS,CAAC+iB,EAAD,CAAV,IAAkBjO,IAAI,CAACmI,GAAL,CAAS+F,EAAE,GAAGD,EAAd,IAAoB,CAAzC,EAA4C;AACxC,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH,CAZD;AAcA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAliB,KAAK,CAAC2G,SAAN,GAAkB,UAASzF,EAAT,EAAakhB,QAAb,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,WAArC,EAAkD;AAChE;AACA,MAAIA,WAAW,IAAIH,QAAf,IAA2B,CAAClhB,EAAE,CAACsG,SAAhC,IACM+a,WAAW,IAAI,CAACH,QAAhB,IAA4B,CAAClhB,EAAE,CAACG,WADzC,EACuD;AACnDrB,IAAAA,KAAK,CAACgH,cAAN,CAAqB9F,EAArB;AACH;;AAED,MAAIO,IAAI,GAAI8gB,WAAD,GAAgBrhB,EAAE,CAACsG,SAAnB,GAA+BtG,EAAE,CAACO,IAA7C;AACA,MAAIa,MAAM,GAAIigB,WAAD,GAAgBrhB,EAAE,CAACG,WAAnB,GAAiCH,EAAE,CAACoB,MAAjD;AACA,MAAIkgB,MAAM,GAAG,CAACthB,EAAE,CAAC6G,eAAH,IAAsB,EAAvB,EAA2ByI,OAAxC;;AAEA,WAASiS,QAAT,CAAkBC,CAAlB,EAAqB;AACjB,QAAG,OAAOA,CAAP,KAAa,UAAhB,EAA4B;AACxB,aAAO,IAAP;AACH;;AACD,QAAGnjB,GAAG,CAAC6a,aAAJ,CAAkBsI,CAAlB,CAAH,EAAyB;AACrB,UAAIhD,CAAC,GAAG,EAAR;AACA,UAAIiD,CAAJ,EAAOC,GAAP;;AACA,WAAID,CAAJ,IAASD,CAAT,EAAY;AACR;AACA;AACA,YAAG,OAAOA,CAAC,CAACC,CAAD,CAAR,KAAgB,UAAhB,IACK,CAAC,GAAD,EAAM,GAAN,EAAWhP,OAAX,CAAmBgP,CAAC,CAACzS,MAAF,CAAS,CAAT,CAAnB,MAAoC,CAAC,CAD7C,EACgD;AAC5C;AACH,SANO,CAQR;;;AACA,YAAGmS,IAAI,KAAK,UAAZ,EAAwB;AACpB;AACA,cAAGM,CAAC,CAACE,MAAF,CAASF,CAAC,CAAC3f,MAAF,GAAW,CAApB,MAA2B,KAA9B,EAAqC;AACjC;AACH;AACJ,SALD,MAKO,IAAGqf,IAAI,KAAK,YAAZ,EAA0B;AAC7B;AACA;AACA;AACAO,UAAAA,GAAG,GAAGF,CAAC,CAACC,CAAC,GAAG,KAAL,CAAP;;AACA,cAAG,OAAOC,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACjP,OAAJ,CAAY,GAAZ,IAAmB,CAAjD,EAAoD;AAChD,gBAAG,CAACpU,GAAG,CAAC6a,aAAJ,CAAkBsI,CAAC,CAACI,MAApB,CAAJ,EAAiC;AAC7B;AACH;AACJ;AACJ,SAVM,MAUA,IAAGT,IAAI,KAAK,SAAZ,EAAuB;AAC1B;AACA;AACAO,UAAAA,GAAG,GAAGF,CAAC,CAACC,CAAC,GAAG,KAAL,CAAP;;AACA,cAAG,OAAOC,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACjP,OAAJ,CAAY,GAAZ,IAAmB,CAAjD,EAAoD;AAChD;AACH;AACJ,SA/BO,CAiCR;;;AACA+L,QAAAA,CAAC,CAACiD,CAAD,CAAD,GAAOF,QAAQ,CAACC,CAAC,CAACC,CAAD,CAAF,CAAf;AACH;;AACD,aAAOjD,CAAP;AACH;;AAED,QAAGlR,KAAK,CAACW,OAAN,CAAcuT,CAAd,CAAH,EAAqB;AACjB,aAAOA,CAAC,CAACK,GAAF,CAAMN,QAAN,CAAP;AACH;;AAED,QAAGljB,GAAG,CAACyjB,YAAJ,CAAiBN,CAAjB,CAAH,EAAwB;AACpB,aAAOnjB,GAAG,CAAC0jB,SAAJ,CAAcP,CAAd,EAAiBnjB,GAAG,CAAC2jB,QAArB,CAAP;AACH,KApDgB,CAsDjB;AACA;;;AACA,QAAG3jB,GAAG,CAAC4jB,QAAJ,CAAaT,CAAb,CAAH,EAAoB,OAAOnjB,GAAG,CAAC6jB,gBAAJ,CAAqB,CAACV,CAAtB,CAAP;AAEpB,WAAOA,CAAP;AACH;;AAED,MAAIW,GAAG,GAAG;AACN5hB,IAAAA,IAAI,EAAE,CAACA,IAAI,IAAI,EAAT,EAAashB,GAAb,CAAiB,UAASJ,CAAT,EAAY;AAC/B,UAAID,CAAC,GAAGD,QAAQ,CAACE,CAAD,CAAhB,CAD+B,CAE/B;AACA;;AACA,UAAGP,QAAH,EAAa;AAAE,eAAOM,CAAC,CAACY,GAAT;AAAe;;AAC9B,aAAOZ,CAAP;AACH,KANK;AADA,GAAV;;AASA,MAAG,CAACN,QAAJ,EAAc;AAAEiB,IAAAA,GAAG,CAAC/gB,MAAJ,GAAamgB,QAAQ,CAACngB,MAAD,CAArB;AAAgC;;AAEhD,MAAGpB,EAAE,CAACmc,SAAH,IAAgBnc,EAAE,CAACmc,SAAH,CAAakG,OAAhC,EAAyCF,GAAG,GAAGniB,EAAE,CAACmc,SAAH,CAAamG,SAAb,EAAN;AAEzC,MAAGhB,MAAH,EAAWa,GAAG,CAACb,MAAJ,GAAaC,QAAQ,CAACD,MAAD,CAArB;AAEX,SAAQF,MAAM,KAAK,QAAZ,GAAwBe,GAAxB,GAA8BI,IAAI,CAACC,SAAL,CAAeL,GAAf,CAArC;AACH,CAxFD;AA0FA;;;;;;;;AAMArjB,KAAK,CAAC2jB,YAAN,GAAqB,UAASziB,EAAT,EAAa0iB,UAAb,EAAyB;AAC1C,MAAI9b,CAAJ,EAAO+b,EAAP,EAAWpM,KAAX;AACA,MAAIjH,OAAO,GAAGtP,EAAE,CAAC6G,eAAH,CAAmByI,OAAjC;AACA,MAAIC,UAAU,GAAGvP,EAAE,CAAC6G,eAAH,CAAmB0I,UAApC;;AAEA,OAAI3I,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG8b,UAAU,CAAC5gB,MAA1B,EAAkC8E,CAAC,EAAnC,EAAuC;AACnC+b,IAAAA,EAAE,GAAGD,UAAU,CAAC9b,CAAD,CAAf;;AAEA,YAAO+b,EAAE,CAACxjB,IAAV;AACI;;AACA;;;;;;AAMA,WAAK,SAAL;AACIoX,QAAAA,KAAK,GAAGoM,EAAE,CAACnd,KAAX;AACA,YAAIod,OAAO,GAAG,CAACtT,OAAO,CAACqT,EAAE,CAACtT,KAAJ,CAAP,IAAqB,EAAtB,EAA0B9J,IAAxC;AACA,YAAIsd,OAAO,GAAGtM,KAAK,CAAChR,IAApB;AACA+J,QAAAA,OAAO,CAACqT,EAAE,CAACtT,KAAJ,CAAP,GAAoBE,UAAU,CAACsT,OAAD,CAAV,GAAsBtM,KAA1C;;AAEA,YAAGsM,OAAO,KAAKD,OAAf,EAAwB;AACpB;AACA;AACA,iBAAOrT,UAAU,CAACqT,OAAD,CAAjB;AACArT,UAAAA,UAAU,CAACsT,OAAD,CAAV,GAAsBtM,KAAtB;AACH;;AAED;;AACJ,WAAK,QAAL;AACIA,QAAAA,KAAK,GAAGoM,EAAE,CAACnd,KAAX;AACA+J,QAAAA,UAAU,CAACgH,KAAK,CAAChR,IAAP,CAAV,GAAyBgR,KAAzB;;AACAjH,QAAAA,OAAO,CAACwT,MAAR,CAAeH,EAAE,CAACtT,KAAlB,EAAyB,CAAzB,EAA4BkH,KAA5B;;AACA;;AACJ,WAAK,QAAL;AACIA,QAAAA,KAAK,GAAGjH,OAAO,CAACqT,EAAE,CAACtT,KAAJ,CAAf;AACA,eAAOE,UAAU,CAACgH,KAAK,CAAChR,IAAP,CAAjB;;AACA+J,QAAAA,OAAO,CAACwT,MAAR,CAAeH,EAAE,CAACtT,KAAlB,EAAyB,CAAzB;;AACA;AA/BR;AAiCH;;AAED,SAAO5O,OAAO,CAACC,OAAR,EAAP;AACH,CA5CD;AA8CA;;;;;;;;;;;;;AAWA5B,KAAK,CAACikB,YAAN,GAAqB,UAAS/iB,EAAT,EAAagjB,SAAb,EAAwB;AACzC,MAAIC,WAAW,GAAGjjB,EAAE,CAAC6G,eAAH,CAAmB0I,UAArC;AACA,MAAI3I,CAAJ,EAAOsc,YAAP,EAAqBC,UAArB,EAAiCC,SAAjC,CAFyC,CAIzC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAG,CAACJ,SAAJ,EAAe;AACX,UAAM,IAAI/hB,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAED,MAAIoiB,QAAQ,GAAGJ,WAAW,CAACD,SAAS,CAACM,QAAV,EAAD,CAA1B,CAdyC,CAgBzC;;AACA,MAAG,CAACD,QAAJ,EAAc;AACV,WAAO,KAAP;AACH;;AAED,MAAIE,UAAU,GAAG,CAACF,QAAD,CAAjB;AACA,MAAIG,cAAc,GAAG,CAACH,QAAQ,CAAC9d,IAAV,CAArB,CAtByC,CAwBzC;;AACA,SAAM8d,QAAQ,CAACI,SAAT,KAAuBJ,QAAQ,GAAGJ,WAAW,CAACI,QAAQ,CAACI,SAAT,CAAmBH,QAAnB,EAAD,CAA7C,CAAN,EAAqF;AACjF;AACA,QAAGE,cAAc,CAAC/Q,OAAf,CAAuB4Q,QAAQ,CAAC9d,IAAhC,MAA0C,CAAC,CAA9C,EAAiD;AAEjDge,IAAAA,UAAU,CAACpW,IAAX,CAAgBkW,QAAhB;AACAG,IAAAA,cAAc,CAACrW,IAAf,CAAoBkW,QAAQ,CAAC9d,IAA7B;AACH,GA/BwC,CAiCzC;;;AACA,MAAIme,MAAM,GAAG,EAAb,CAlCyC,CAoCzC;;AACA,SAAOL,QAAQ,GAAGE,UAAU,CAACI,GAAX,EAAlB,EAAqC;AACjC,QAAGN,QAAQ,CAACjiB,MAAZ,EAAoB;AAChBsiB,MAAAA,MAAM,CAACtiB,MAAP,GAAgBtC,KAAK,CAAC8kB,YAAN,CAAmBF,MAAM,CAACtiB,MAA1B,EAAkCiiB,QAAQ,CAACjiB,MAA3C,CAAhB;AACH;;AAED,QAAGiiB,QAAQ,CAAC9iB,IAAZ,EAAkB;AACd,UAAG,CAACmjB,MAAM,CAACnjB,IAAX,EAAiB;AACbmjB,QAAAA,MAAM,CAACnjB,IAAP,GAAc,EAAd;AACH;;AACD2iB,MAAAA,YAAY,GAAGG,QAAQ,CAACQ,MAAxB;;AAEA,UAAG,CAACX,YAAJ,EAAkB;AACd;AACAA,QAAAA,YAAY,GAAG,EAAf;;AACA,aAAItc,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGyc,QAAQ,CAAC9iB,IAAT,CAAcuB,MAA7B,EAAqC8E,CAAC,EAAtC,EAA0C;AACtCsc,UAAAA,YAAY,CAACtc,CAAD,CAAZ,GAAkBA,CAAlB;AACH;AACJ;;AAED,UAAG,CAAC8c,MAAM,CAACG,MAAX,EAAmB;AACfH,QAAAA,MAAM,CAACG,MAAP,GAAgB,EAAhB;AACH;;AAED,WAAIjd,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGyc,QAAQ,CAAC9iB,IAAT,CAAcuB,MAA7B,EAAqC8E,CAAC,EAAtC,EAA0C;AACtC;AACA;AACAuc,QAAAA,UAAU,GAAGD,YAAY,CAACtc,CAAD,CAAzB;;AACA,YAAGuc,UAAU,KAAKhT,SAAf,IAA4BgT,UAAU,KAAK,IAA9C,EAAoD;AAChD;AACH;;AAEDC,QAAAA,SAAS,GAAGM,MAAM,CAACG,MAAP,CAAcpR,OAAd,CAAsB0Q,UAAtB,CAAZ;;AACA,YAAGC,SAAS,KAAK,CAAC,CAAlB,EAAqB;AACjBA,UAAAA,SAAS,GAAGM,MAAM,CAACnjB,IAAP,CAAYuB,MAAxB;AACA4hB,UAAAA,MAAM,CAACG,MAAP,CAAcT,SAAd,IAA2BD,UAA3B;AACH;;AAEDO,QAAAA,MAAM,CAACnjB,IAAP,CAAY6iB,SAAZ,IAAyBtkB,KAAK,CAACglB,WAAN,CAAkBJ,MAAM,CAACnjB,IAAP,CAAY6iB,SAAZ,CAAlB,EAA0CC,QAAQ,CAAC9iB,IAAT,CAAcqG,CAAd,CAA1C,CAAzB;AACH;AACJ;AACJ;;AAED,SAAO8c,MAAP;AACH,CAhFD;AAkFA;;;;;;;;AAMA5kB,KAAK,CAACilB,kBAAN,GAA2B,UAAS/jB,EAAT,EAAa;AACpC,MAAIgkB,IAAI,GAAGhkB,EAAE,CAAC6G,eAAH,CAAmB0I,UAAnB,GAAgC,EAA3C;AACA,MAAI+R,MAAM,GAAGthB,EAAE,CAAC6G,eAAH,CAAmByI,OAAhC;;AACA,OAAI,IAAI1I,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG0a,MAAM,CAACxf,MAA1B,EAAkC8E,CAAC,EAAnC,EAAuC;AACnC,QAAI2P,KAAK,GAAG+K,MAAM,CAAC1a,CAAD,CAAlB;;AACA,QAAG2P,KAAK,IAAIA,KAAK,CAAChR,IAAlB,EAAwB;AACpBye,MAAAA,IAAI,CAACzN,KAAK,CAAChR,IAAP,CAAJ,GAAmBgR,KAAnB;AACH;AACJ;AACJ,CATD;AAWA;;;;;;;;;;;;AAUAzX,KAAK,CAACmlB,0BAAN,GAAmC,UAASC,IAAT,EAAexC,GAAf,EAAoByC,cAApB,EAAoC;AACnE,MAAIC,aAAJ,EAAmBC,YAAnB,EAAiCzd,CAAjC,EAAoC4F,CAApC,EAAuC8X,OAAvC,EAAgDC,QAAhD,EAA0DC,YAA1D,EAAwEC,aAAxE;AACA,MAAIC,IAAI,GAAGrmB,GAAG,CAACsmB,kBAAJ,CAAuB,EAAvB,EAA2BjD,GAAG,IAAI,EAAlC,CAAX;AACA,MAAIkD,WAAW,GAAGvmB,GAAG,CAACwmB,iBAAJ,CAAsBH,IAAtB,CAAlB;AACA,MAAII,YAAY,GAAG,EAAnB,CAJmE,CAMnE;AACA;AACA;;AACA,MAAGX,cAAc,IAAIA,cAAc,CAACriB,MAApC,EAA4C;AACxC,SAAI8E,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGud,cAAc,CAACriB,MAA9B,EAAsC8E,CAAC,EAAvC,EAA2C;AACvCwd,MAAAA,aAAa,GAAG/lB,GAAG,CAACsO,cAAJ,CAAmBiY,WAAnB,EAAgCT,cAAc,CAACvd,CAAD,CAA9C,CAAhB;AACAyd,MAAAA,YAAY,GAAGD,aAAa,CAACxX,GAAd,EAAf;;AAEA,UAAGyX,YAAY,KAAKlU,SAApB,EAA+B;AAC3B9R,QAAAA,GAAG,CAACsO,cAAJ,CAAmBmY,YAAnB,EAAiCX,cAAc,CAACvd,CAAD,CAA/C,EAAoDkG,GAApD,CAAwD,IAAxD;AACH,OAFD,MAEO;AACHsX,QAAAA,aAAa,CAACtX,GAAd,CAAkB,IAAlB;AACAzO,QAAAA,GAAG,CAACsO,cAAJ,CAAmBmY,YAAnB,EAAiCX,cAAc,CAACvd,CAAD,CAA/C,EAAoDkG,GAApD,CAAwDuX,YAAxD;AACH;AACJ;AACJ;;AAEDH,EAAAA,IAAI,GAAG7lB,GAAG,CAACsmB,kBAAJ,CAAuBT,IAAI,IAAI,EAA/B,EAAmCU,WAAnC,CAAP;;AAEA,MAAGT,cAAc,IAAIA,cAAc,CAACriB,MAApC,EAA4C;AACxC,SAAI8E,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGud,cAAc,CAACriB,MAA9B,EAAsC8E,CAAC,EAAvC,EAA2C;AACvC0d,MAAAA,OAAO,GAAGjmB,GAAG,CAACsO,cAAJ,CAAmBmY,YAAnB,EAAiCX,cAAc,CAACvd,CAAD,CAA/C,CAAV;AACA4d,MAAAA,YAAY,GAAGF,OAAO,CAAC1X,GAAR,EAAf;AAEA,UAAG,CAAC4X,YAAJ,EAAkB;AAElBD,MAAAA,QAAQ,GAAGlmB,GAAG,CAACsO,cAAJ,CAAmBuX,IAAnB,EAAyBC,cAAc,CAACvd,CAAD,CAAvC,CAAX;AACA6d,MAAAA,aAAa,GAAGF,QAAQ,CAAC3X,GAAT,EAAhB;;AAEA,UAAG,CAACU,KAAK,CAACW,OAAN,CAAcwW,aAAd,CAAJ,EAAkC;AAC9BA,QAAAA,aAAa,GAAG,EAAhB;AACAF,QAAAA,QAAQ,CAACzX,GAAT,CAAa2X,aAAb;AACH;;AAED,WAAIjY,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGgY,YAAY,CAAC1iB,MAA5B,EAAoC0K,CAAC,EAArC,EAAyC;AACrC,YAAIuY,MAAM,GAAGP,YAAY,CAAChY,CAAD,CAAzB;AAEA,YAAGuY,MAAM,KAAK,IAAd,EAAoBN,aAAa,CAACjY,CAAD,CAAb,GAAmB,IAAnB,CAApB,KACK;AACDiY,UAAAA,aAAa,CAACjY,CAAD,CAAb,GAAmB1N,KAAK,CAACmlB,0BAAN,CAAiCQ,aAAa,CAACjY,CAAD,CAA9C,EAAmDuY,MAAnD,CAAnB;AACH;AACJ;;AAEDR,MAAAA,QAAQ,CAACzX,GAAT,CAAa2X,aAAb;AACH;AACJ;;AAED,SAAOP,IAAP;AACH,CAtDD;;AAwDAplB,KAAK,CAACkmB,mBAAN,GAA4B,CAAC,YAAD,EAAe,YAAf,CAA5B;AACAlmB,KAAK,CAACmmB,qBAAN,GAA8B/mB,QAAQ,CAAC+mB,qBAAvC;AAEA;;;;;;;;;AAQAnmB,KAAK,CAACglB,WAAN,GAAoB,UAASoB,SAAT,EAAoBC,QAApB,EAA8B;AAC9C,SAAOrmB,KAAK,CAACmlB,0BAAN,CAAiCiB,SAAjC,EAA4CC,QAA5C,EAAsDrmB,KAAK,CAACkmB,mBAA5D,CAAP;AACH,CAFD;AAIA;;;;;;;;;;;AASAlmB,KAAK,CAAC8kB,YAAN,GAAqB,UAASwB,UAAT,EAAqBC,SAArB,EAAgC;AACjD,SAAOvmB,KAAK,CAACmlB,0BAAN,CAAiCmB,UAAjC,EAA6CC,SAA7C,EAAwDvmB,KAAK,CAACmmB,qBAA9D,CAAP;AACH,CAFD;AAIA;;;;;;;;;;;;;;;;;AAeAnmB,KAAK,CAAC2X,UAAN,GAAmB,UAASzW,EAAT,EAAaO,IAAb,EAAmBa,MAAnB,EAA2ByiB,MAA3B,EAAmCyB,SAAnC,EAA8CC,cAA9C,EAA8D;AAC7E,MAAIxf,IAAI,GAAG;AAACyf,IAAAA,MAAM,EAAEF,SAAS,CAACE;AAAnB,GAAX;AACA,MAAIC,kBAAkB,GAAG,EAAzB;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA3f,EAAAA,IAAI,CAAC4f,SAAL,GAAiB,YAAW;AACxB,QAAIC,UAAU,GAAGtY,KAAK,CAACW,OAAN,CAAc1N,IAAd,IAAsBA,IAAI,CAACuB,MAA3B,GAAoC,CAArD;AACA,QAAIohB,YAAY,GAAGW,MAAM,CAAChX,KAAP,CAAa,CAAb,EAAgB+Y,UAAhB,CAAnB;;AAEA,SAAI,IAAIhf,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGsc,YAAY,CAACphB,MAAhC,EAAwC8E,CAAC,EAAzC,EAA6C;AACzC,UAAIif,QAAQ,GAAG3C,YAAY,CAACtc,CAAD,CAA3B;AACA,UAAIuF,KAAK,GAAGnM,EAAE,CAACsG,SAAH,CAAauf,QAAb,CAAZ;AACA,UAAIhW,OAAO,GAAG1D,KAAK,CAAC0D,OAApB,CAHyC,CAKzC;;AACA,UAAG,CAACA,OAAJ,EAAa,SAN4B,CAQzC;AACA;AACA;;AACA,UAAGA,OAAO,CAACiW,UAAX,EAAuB;AACnB,YAAIC,CAAC,GAAGlW,OAAO,CAACiF,cAAR,CAAuBvP,IAA/B;AACA,YAAG,CAACkgB,kBAAkB,CAACM,CAAD,CAAtB,EAA2BN,kBAAkB,CAACM,CAAD,CAAlB,GAAwB,EAAxB;AAC3BN,QAAAA,kBAAkB,CAACM,CAAD,CAAlB,CAAsB5Y,IAAtB,CAA2B0Y,QAA3B;AACH;;AAED7lB,MAAAA,EAAE,CAACO,IAAH,CAAQ2iB,YAAY,CAACtc,CAAD,CAApB,IAA2B9H,KAAK,CAACglB,WAAN,CAAkB9jB,EAAE,CAACO,IAAH,CAAQ2iB,YAAY,CAACtc,CAAD,CAApB,CAAlB,EAA4CrG,IAAI,CAACqG,CAAD,CAAhD,CAA3B;AACH,KAtBuB,CAwBxB;AACA;;;AACA,QAAIof,YAAY,GAAG3nB,GAAG,CAACwmB,iBAAJ,CAAsBxmB,GAAG,CAACsmB,kBAAJ,CAAuB,EAAvB,EAA2BvjB,MAA3B,CAAtB,CAAnB,CA1BwB,CA4BxB;AACA;AACA;AACA;;AACA,QAAI6kB,UAAU,GAAG,kBAAjB;;AACA,SAAI,IAAI9iB,IAAR,IAAgB6iB,YAAhB,EAA8B;AAC1B,UAAG,CAACC,UAAU,CAACC,IAAX,CAAgB/iB,IAAhB,CAAJ,EAA2B;AAC3B,aAAO6iB,YAAY,CAAC7iB,IAAD,CAAZ,CAAmBgjB,KAA1B;AACH;;AAEDrnB,IAAAA,KAAK,CAAC8kB,YAAN,CAAmB5jB,EAAE,CAACoB,MAAtB,EAA8B4kB,YAA9B,EAtCwB,CAwCxB;AACA;AACA;AACA;AACA;AAEA;;AACA,WAAOhmB,EAAE,CAAC0G,QAAV;AAEA5H,IAAAA,KAAK,CAACgH,cAAN,CAAqB9F,EAArB;AACAlB,IAAAA,KAAK,CAACsnB,UAAN,CAAiBpmB,EAAjB;AAEA,QAAIoG,SAAS,GAAG/H,GAAG,CAACwmB,iBAAJ,CAAsBzjB,MAAtB,CAAhB;;AAEA,QAAGgF,SAAH,EAAc;AACV,UAAIqC,QAAQ,GAAGzI,EAAE,CAACG,WAAH,CAAeuQ,MAA9B;;AAEA,WAAI,IAAIxG,CAAR,IAAazB,QAAb,EAAuB;AACnB,YAAI2I,QAAQ,GAAG3I,QAAQ,CAACyB,CAAD,CAAvB;AACA,YAAImc,EAAE,GAAGjV,QAAQ,CAACpH,KAAlB;AACA,YAAIsc,EAAE,GAAGlV,QAAQ,CAACnH,KAAlB;AACA,YAAIsc,GAAG,GAAGF,EAAE,CAACF,KAAH,CAAStZ,KAAT,EAAV;AACA,YAAI2Z,GAAG,GAAGF,EAAE,CAACH,KAAH,CAAStZ,KAAT,EAAV;AAEA,YAAI4Z,GAAG,GAAG,IAAV;AACA,YAAIC,GAAG,GAAG,IAAV;AACA,YAAIC,KAAK,GAAG,IAAZ;AACA,YAAIC,KAAK,GAAG,IAAZ;;AAEA,YAAGtZ,KAAK,CAACW,OAAN,CAAc7H,SAAS,CAACigB,EAAE,CAACQ,KAAH,GAAW,QAAZ,CAAvB,CAAH,EAAkD;AAC9CJ,UAAAA,GAAG,GAAGrgB,SAAS,CAACigB,EAAE,CAACQ,KAAH,GAAW,QAAZ,CAAT,CAA+Bha,KAA/B,EAAN;AACH,SAFD,MAEO,IAAGS,KAAK,CAACW,OAAN,CAAc,CAAC7H,SAAS,CAACigB,EAAE,CAACQ,KAAJ,CAAT,IAAuB,EAAxB,EAA4BV,KAA1C,CAAH,EAAqD;AACxDM,UAAAA,GAAG,GAAGrgB,SAAS,CAACigB,EAAE,CAACQ,KAAJ,CAAT,CAAoBV,KAApB,CAA0BtZ,KAA1B,EAAN;AACH;;AACD,YAAGS,KAAK,CAACW,OAAN,CAAc7H,SAAS,CAACkgB,EAAE,CAACO,KAAH,GAAW,QAAZ,CAAvB,CAAH,EAAkD;AAC9CH,UAAAA,GAAG,GAAGtgB,SAAS,CAACkgB,EAAE,CAACO,KAAH,GAAW,QAAZ,CAAT,CAA+Bha,KAA/B,EAAN;AACH,SAFD,MAEO,IAAGS,KAAK,CAACW,OAAN,CAAc,CAAC7H,SAAS,CAACkgB,EAAE,CAACO,KAAJ,CAAT,IAAuB,EAAxB,EAA4BV,KAA1C,CAAH,EAAqD;AACxDO,UAAAA,GAAG,GAAGtgB,SAAS,CAACkgB,EAAE,CAACO,KAAJ,CAAT,CAAoBV,KAApB,CAA0BtZ,KAA1B,EAAN;AACH;;AAED,YAAG0Z,GAAG,IAAIE,GAAP,KACEJ,EAAE,CAACS,GAAH,CAAOP,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACS,GAAH,CAAOL,GAAG,CAAC,CAAD,CAAV,CAAnB,IAAqCJ,EAAE,CAACS,GAAH,CAAOP,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACS,GAAH,CAAOL,GAAG,CAAC,CAAD,CAAV,CAD1D,CAAH,EAEE;AACEE,UAAAA,KAAK,GAAG;AAACJ,YAAAA,GAAG,EAAEA,GAAN;AAAWE,YAAAA,GAAG,EAAEA;AAAhB,WAAR;AACH;;AACD,YAAGD,GAAG,IAAIE,GAAP,KACEJ,EAAE,CAACQ,GAAH,CAAON,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACQ,GAAH,CAAOJ,GAAG,CAAC,CAAD,CAAV,CAAnB,IAAqCJ,EAAE,CAACQ,GAAH,CAAON,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACQ,GAAH,CAAOJ,GAAG,CAAC,CAAD,CAAV,CAD1D,CAAH,EAEE;AACEE,UAAAA,KAAK,GAAG;AAACJ,YAAAA,GAAG,EAAEA,GAAN;AAAWE,YAAAA,GAAG,EAAEA;AAAhB,WAAR;AACH;;AAED,YAAGC,KAAK,IAAIC,KAAZ,EAAmB;AACflB,UAAAA,OAAO,CAACvY,IAAR,CAAa9O,GAAG,CAACY,UAAJ,CAAe;AAACmS,YAAAA,QAAQ,EAAEA;AAAX,WAAf,EAAqCuV,KAArC,EAA4CC,KAA5C,CAAb;AACH;AACJ;AACJ;;AAED,WAAOnmB,OAAO,CAACC,OAAR,EAAP;AACH,GAlGD;;AAoGAqF,EAAAA,IAAI,CAACghB,KAAL,GAAa,UAASC,YAAT,EAAuB;AAChC,QAAIC,mBAAJ;AACA,QAAItX,eAAe,GAAG3P,EAAE,CAACG,WAAH,CAAeqI,gBAArC;AACA,QAAI0e,iBAAiB,GAAGxB,OAAO,CAAC5jB,MAAhC;AACA,QAAI8E,CAAJ;;AAEA,QAAGxF,MAAH,EAAW;AACP,WAAIwF,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG+I,eAAe,CAAC7N,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxC,YAAG+I,eAAe,CAAC/I,CAAD,CAAf,CAAmBugB,cAAtB,EAAsC;AAClCxX,UAAAA,eAAe,CAAC/I,CAAD,CAAf,CAAmBugB,cAAnB,CAAkCnnB,EAAlC,EAAsC0lB,OAAtC,EAA+CH,cAA/C,EAA+DyB,YAA/D;AACH;AACJ;AACJ,KAZ+B,CAchC;AACA;AACA;;;AACA,QAAGE,iBAAH,EAAsB;AAClBD,MAAAA,mBAAmB,GAAG5oB,GAAG,CAACY,UAAJ,CAAe,EAAf,EAAmBsmB,cAAnB,CAAtB;AACA0B,MAAAA,mBAAmB,CAACG,QAApB,GAA+B,CAA/B,CAFkB,CAGlB;AACA;;AACA,aAAO3B,kBAAkB,CAACtb,SAA1B;AACH,KAND,MAMO;AACH8c,MAAAA,mBAAmB,GAAG1B,cAAtB;AACH,KAzB+B,CA2BhC;AACA;AACA;AACA;;;AACA,SAAI,IAAIQ,CAAR,IAAaN,kBAAb,EAAiC;AAC7B,UAAIvC,YAAY,GAAGuC,kBAAkB,CAACM,CAAD,CAArC;AACA,UAAIlW,OAAO,GAAG7P,EAAE,CAACsG,SAAH,CAAa4c,YAAY,CAAC,CAAD,CAAzB,EAA8BrT,OAA5C;;AACAA,MAAAA,OAAO,CAACiF,cAAR,CAAuB9N,IAAvB,CAA4BhH,EAA5B,EAAgCkjB,YAAhC,EAA8C+D,mBAA9C,EAAmED,YAAnE;AACH;AACJ,GApCD;;AAsCA,SAAOK,WAAW,CAACrnB,EAAD,EAAKulB,cAAL,EAAqBxf,IAArB,CAAlB;AACH,CAhJD;AAkJA;;;;;;;;;;;;AAUAjH,KAAK,CAACwoB,mBAAN,GAA4B,UAAStnB,EAAT,EAAaunB,YAAb,EAA2BC,aAA3B,EAA0CvhB,aAA1C,EAAyD;AACjF,MAAI/F,UAAU,GAAGF,EAAE,CAACG,WAApB;AACA,MAAIolB,cAAc,GAAGrlB,UAAU,CAACuW,UAAhC;AACA,MAAI1Q,IAAI,GAAG,EAAX;AACA,MAAI2f,OAAO,GAAG,EAAd;;AAEA3f,EAAAA,IAAI,CAAC4f,SAAL,GAAiB,YAAW;AACxB,QAAIld,QAAQ,GAAGvI,UAAU,CAACwQ,MAA1B,CADwB,CAGxB;AACA;;AACA3K,IAAAA,IAAI,CAACyf,MAAL,GAAc,KAAd;AACA,QAAG+B,YAAY,CAACE,IAAb,KAAsB,MAAzB,EAAiC1hB,IAAI,CAACyf,MAAL,GAAc,IAAd;AACjC,QAAGgC,aAAa,CAACC,IAAd,KAAuB,MAA1B,EAAkC1hB,IAAI,CAACyf,MAAL,GAAc,IAAd;;AAElC,SAAI,IAAItb,CAAR,IAAazB,QAAb,EAAuB;AACnB,UAAI2I,QAAQ,GAAG3I,QAAQ,CAACyB,CAAD,CAAvB;AACA,UAAImc,EAAE,GAAGjV,QAAQ,CAACpH,KAAlB;AACA,UAAIsc,EAAE,GAAGlV,QAAQ,CAACnH,KAAlB;;AACA,UAAIsc,GAAG,GAAGtgB,aAAa,CAACogB,EAAE,CAACQ,KAAJ,CAAb,CAAwBV,KAAxB,CAA8BtZ,KAA9B,EAAV;;AACA,UAAI2Z,GAAG,GAAGvgB,aAAa,CAACqgB,EAAE,CAACO,KAAJ,CAAb,CAAwBV,KAAxB,CAA8BtZ,KAA9B,EAAV;;AACA,UAAI4Z,GAAG,GAAGJ,EAAE,CAACF,KAAH,CAAStZ,KAAT,EAAV;AACA,UAAI6Z,GAAG,GAAGJ,EAAE,CAACH,KAAH,CAAStZ,KAAT,EAAV;AAEAwZ,MAAAA,EAAE,CAACqB,QAAH;AACApB,MAAAA,EAAE,CAACoB,QAAH;AAEA,UAAIf,KAAK,GAAG,IAAZ;AACA,UAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAGP,EAAE,CAACS,GAAH,CAAOP,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACS,GAAH,CAAOL,GAAG,CAAC,CAAD,CAAV,CAAnB,IAAqCJ,EAAE,CAACS,GAAH,CAAOP,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACS,GAAH,CAAOL,GAAG,CAAC,CAAD,CAAV,CAA3D,EAA2E;AACvEE,QAAAA,KAAK,GAAG;AAACJ,UAAAA,GAAG,EAAEA,GAAN;AAAWE,UAAAA,GAAG,EAAEA;AAAhB,SAAR;AACH;;AACD,UAAGH,EAAE,CAACQ,GAAH,CAAON,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACQ,GAAH,CAAOJ,GAAG,CAAC,CAAD,CAAV,CAAnB,IAAqCJ,EAAE,CAACQ,GAAH,CAAON,GAAG,CAAC,CAAD,CAAV,MAAmBF,EAAE,CAACQ,GAAH,CAAOJ,GAAG,CAAC,CAAD,CAAV,CAA3D,EAA2E;AACvEE,QAAAA,KAAK,GAAG;AAACJ,UAAAA,GAAG,EAAEA,GAAN;AAAWE,UAAAA,GAAG,EAAEA;AAAhB,SAAR;AACH;;AAED,UAAGC,KAAK,IAAIC,KAAZ,EAAmB;AACflB,QAAAA,OAAO,CAACvY,IAAR,CAAa9O,GAAG,CAACY,UAAJ,CAAe;AAACmS,UAAAA,QAAQ,EAAEA;AAAX,SAAf,EAAqCuV,KAArC,EAA4CC,KAA5C,CAAb;AACH;AACJ;;AAED,WAAOnmB,OAAO,CAACC,OAAR,EAAP;AACH,GArCD;;AAuCAqF,EAAAA,IAAI,CAACghB,KAAL,GAAa,UAASC,YAAT,EAAuB;AAChC,QAAIlO,QAAQ,GAAG9Y,EAAE,CAACsG,SAAlB;AACA,QAAIpG,UAAU,GAAGF,EAAE,CAACG,WAApB;AACA,QAAIwP,eAAe,GAAGzP,UAAU,CAACsI,gBAAjC;AAEA,QAAImf,kBAAJ;AACA,QAAIV,mBAAJ;AACA,QAAIxB,kBAAJ;AAEA,QAAImC,eAAe,GAAG,EAAtB;;AACA,SAAI,IAAIhhB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGkS,QAAQ,CAAChX,MAA5B,EAAoC8E,CAAC,EAArC,EAAyC;AACrCghB,MAAAA,eAAe,CAACza,IAAhB,CAAqBvG,CAArB;AACH;;AAED,aAASugB,cAAT,GAA0B;AACtB,WAAI,IAAI3a,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGmD,eAAe,CAAC7N,MAAnC,EAA2C0K,CAAC,EAA5C,EAAgD;AAC5C,YAAGmD,eAAe,CAACnD,CAAD,CAAf,CAAmB2a,cAAtB,EAAsC;AAClCxX,UAAAA,eAAe,CAACnD,CAAD,CAAf,CAAmB2a,cAAnB,CAAkCnnB,EAAlC,EAAsC0lB,OAAtC,EAA+CiC,kBAA/C,EAAmEX,YAAnE;AACH;AACJ;AACJ;;AAED,aAASa,gBAAT,GAA4B;AACxB,WAAI,IAAIrb,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGmD,eAAe,CAAC7N,MAAnC,EAA2C0K,CAAC,EAA5C,EAAgD;AAC5CmD,QAAAA,eAAe,CAACnD,CAAD,CAAf,CAAmBxF,IAAnB,CAAwBhH,EAAxB,EAA4BylB,kBAA5B,EAAgDwB,mBAAhD,EAAqED,YAArE;AACH;AACJ;;AAED,QAAGtB,OAAO,CAAC5jB,MAAR,IAAkBylB,YAAY,CAACE,IAAlC,EAAwC;AACpC,UAAGlC,cAAc,CAACuC,QAAf,KAA4B,cAA/B,EAA+C;AAC3CH,QAAAA,kBAAkB,GAAGtpB,GAAG,CAACY,UAAJ,CAAe,EAAf,EAAmBsmB,cAAnB,EAAmC;AAAC6B,UAAAA,QAAQ,EAAE;AAAX,SAAnC,CAArB;AACA3B,QAAAA,kBAAkB,GAAGmC,eAArB;AACAX,QAAAA,mBAAmB,GAAG1B,cAAtB;AACA5kB,QAAAA,UAAU,CAACwmB,cAAD,EAAiB5B,cAAc,CAAC6B,QAAhC,CAAV;AACAS,QAAAA,gBAAgB;AACnB,OAND,MAMO;AACHF,QAAAA,kBAAkB,GAAGpC,cAArB;AACAE,QAAAA,kBAAkB,GAAG,IAArB;AACAwB,QAAAA,mBAAmB,GAAG5oB,GAAG,CAACY,UAAJ,CAAe,EAAf,EAAmBsmB,cAAnB,EAAmC;AAAC6B,UAAAA,QAAQ,EAAE;AAAX,SAAnC,CAAtB;AACAzmB,QAAAA,UAAU,CAACknB,gBAAD,EAAmBF,kBAAkB,CAACP,QAAtC,CAAV;AACAD,QAAAA,cAAc;AACjB;AACJ,KAdD,MAcO,IAAGzB,OAAO,CAAC5jB,MAAX,EAAmB;AACtB6lB,MAAAA,kBAAkB,GAAGpC,cAArB;AACA4B,MAAAA,cAAc;AACjB,KAHM,MAGA,IAAGI,YAAY,CAACE,IAAhB,EAAsB;AACzBhC,MAAAA,kBAAkB,GAAGmC,eAArB;AACAX,MAAAA,mBAAmB,GAAG1B,cAAtB;AACAsC,MAAAA,gBAAgB;AACnB;AACJ,GAlDD;;AAoDA,SAAOR,WAAW,CAACrnB,EAAD,EAAKulB,cAAL,EAAqBxf,IAArB,CAAlB;AACH,CAlGD;AAoGA;;;;;;;;;;;;;AAWA,SAASshB,WAAT,CAAqBrnB,EAArB,EAAyBulB,cAAzB,EAAyCxf,IAAzC,EAA+C;AAC3C,MAAIgiB,OAAO,GAAG,KAAd;;AAEA,WAASC,gBAAT,CAA0BrW,IAA1B,EAAgC;AAC5B,QAAIuM,CAAC,GAAGzd,OAAO,CAACC,OAAR,EAAR;AACA,QAAG,CAACiR,IAAJ,EAAU,OAAOuM,CAAP;;AACV,WAAMvM,IAAI,CAAC7P,MAAX,EAAmB;AACfoc,MAAAA,CAAC,GAAGA,CAAC,CAACtc,IAAF,CAAQ+P,IAAI,CAACsW,KAAL,EAAR,CAAJ;AACH;;AACD,WAAO/J,CAAP;AACH;;AAED,WAASgK,cAAT,CAAwBvW,IAAxB,EAA8B;AAC1B,QAAG,CAACA,IAAJ,EAAU;;AACV,WAAMA,IAAI,CAAC7P,MAAX,EAAmB;AACf6P,MAAAA,IAAI,CAACsW,KAAL;AACH;AACJ;;AAED,WAASE,kBAAT,GAA8B;AAC1BnoB,IAAAA,EAAE,CAAC4E,IAAH,CAAQ,sBAAR,EAAgC,EAAhC;AAEA,WAAO,IAAInE,OAAJ,CAAY,UAASC,OAAT,EAAkB;AACjC;AACAV,MAAAA,EAAE,CAAC0c,cAAH,GAAoB,IAApB,CAFiC,CAIjC;AACA;AACA;;AACA,UAAG6I,cAAc,CAAC6B,QAAf,GAA0B,CAA7B,EAAgC;AAC5BpnB,QAAAA,EAAE,CAAC2c,0BAAH,GAAgC,IAAhC;AACH,OATgC,CAWjC;AACA;AACA;;;AACA3c,MAAAA,EAAE,CAAC6G,eAAH,CAAmB4I,mBAAnB,CAAuCtC,IAAvC,CAA4C,YAAW;AACnD4a,QAAAA,OAAO,GAAG,IAAV;AACH,OAFD;;AAIA,UAAGhiB,IAAI,CAACyf,MAAR,EAAgB;AACZxlB,QAAAA,EAAE,CAAC6G,eAAH,CAAmB4I,mBAAnB,CAAuCtC,IAAvC,CAA4C,YAAW;AACnD,iBAAOjP,QAAQ,CAACwD,IAAT,CAAc,QAAd,EAAwB1B,EAAxB,CAAP;AACH,SAFD;AAGH,OAtBgC,CAwBjC;;;AACAA,MAAAA,EAAE,CAAC6G,eAAH,CAAmB4I,mBAAnB,CAAuCtC,IAAvC,CAA4C,YAAW;AACnDnN,QAAAA,EAAE,CAAC4E,IAAH,CAAQ,8BAAR,EAAwC,EAAxC;AACH,OAFD,EAzBiC,CA6BjC;AACA;;;AACA,UAAIwjB,YAAY,GAAG,CAAnB;AACA,UAAIC,YAAY,GAAG,CAAnB;;AACA,eAASrB,YAAT,GAAwB;AACpBoB,QAAAA,YAAY;AACZ,eAAO,YAAW;AACdC,UAAAA,YAAY,GADE,CAEd;;AACA,cAAG,CAACN,OAAD,IAAYM,YAAY,KAAKD,YAAhC,EAA8C;AAC1CE,YAAAA,kBAAkB,CAAC5nB,OAAD,CAAlB;AACH;AACJ,SAND;AAOH;;AAEDqF,MAAAA,IAAI,CAACghB,KAAL,CAAWC,YAAX,EA5CiC,CA8CjC;;AACArmB,MAAAA,UAAU,CAACqmB,YAAY,EAAb,CAAV;AACH,KAhDM,CAAP;AAiDH;;AAED,WAASsB,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC;AACA;AACA;AACA,QAAG,CAACvoB,EAAE,CAAC6G,eAAP,EAAwB;AAExBqhB,IAAAA,cAAc,CAACloB,EAAE,CAAC6G,eAAH,CAAmB4I,mBAApB,CAAd;AAEA,WAAOhP,OAAO,CAACC,OAAR,GAAkBkB,IAAlB,CAAuB,YAAW;AACrC,UAAGmE,IAAI,CAACyf,MAAR,EAAgB;AACZ,eAAOtnB,QAAQ,CAACwD,IAAT,CAAc,QAAd,EAAwB1B,EAAxB,CAAP;AACH;AACJ,KAJM,EAIJ4B,IAJI,CAIC,YAAW;AACf;AACA;AACA5B,MAAAA,EAAE,CAAC0c,cAAH,GAAoB,KAApB;AACA1c,MAAAA,EAAE,CAAC2c,0BAAH,GAAgC,KAAhC;AAEA3c,MAAAA,EAAE,CAAC4E,IAAH,CAAQ,qBAAR,EAA+B,EAA/B;AACH,KAXM,EAWJhD,IAXI,CAWC2mB,QAXD,CAAP;AAYH;;AAED,WAASC,4BAAT,GAAwC;AACpC;AACA,QAAG,CAACxoB,EAAE,CAAC6G,eAAP,EAAwB,OAFY,CAIpC;AACA;AACA;AACA;;AACA7G,IAAAA,EAAE,CAAC0c,cAAH,GAAoB,KAApB;AAEA,WAAOsL,gBAAgB,CAAChoB,EAAE,CAAC6G,eAAH,CAAmB4I,mBAApB,CAAvB;AACH;;AAED,MAAIgZ,GAAG,GAAG,CACN3pB,KAAK,CAAC+B,gBADA,EAEN2nB,4BAFM,EAGNziB,IAAI,CAAC4f,SAHC,EAIN7mB,KAAK,CAAC4pB,OAJA,EAKNP,kBALM,CAAV;AAQA,MAAIQ,kBAAkB,GAAGtqB,GAAG,CAACuqB,WAAJ,CAAgBH,GAAhB,EAAqBzoB,EAArB,CAAzB;;AAEA,MAAG,CAAC2oB,kBAAD,IAAuB,CAACA,kBAAkB,CAAC/mB,IAA9C,EAAoD;AAChD+mB,IAAAA,kBAAkB,GAAGloB,OAAO,CAACC,OAAR,EAArB;AACH;;AAED,SAAOioB,kBAAkB,CAAC/mB,IAAnB,CAAwB,YAAW;AAAE,WAAO5B,EAAP;AAAY,GAAjD,CAAP;AACH;;AAEDlB,KAAK,CAACsnB,UAAN,GAAmB,UAASpmB,EAAT,EAAa6jB,MAAb,EAAqB;AACpC,MAAInS,MAAM,GAAGlT,OAAO,CAACmT,IAAR,CAAa3R,EAAb,CAAb;AACA,MAAI8Y,QAAQ,GAAG9Y,EAAE,CAACsG,SAAlB;AACA,MAAIpG,UAAU,GAAGF,EAAE,CAACG,WAApB;;AAEA,MAAIgM,KAAJ,EAAW0D,OAAX,EAAoBjJ,CAApB,EAAuB4F,CAAvB,CALoC,CAOpC;AACA;;;AACA,MAAI9F,QAAQ,GAAG,IAAI4G,KAAJ,CAAUwL,QAAQ,CAAChX,MAAnB,CAAf;AACA,MAAI2E,WAAW,GAAG,CAACzG,EAAE,CAAC0G,QAAH,IAAe,EAAhB,EAAoBmG,KAApB,EAAlB;AACA7M,EAAAA,EAAE,CAAC0G,QAAH,GAAcA,QAAd,CAXoC,CAapC;AAEA;;AACAxG,EAAAA,UAAU,CAAC2oB,SAAX,GAAuB,CAAvB;AACA3oB,EAAAA,UAAU,CAAC4oB,WAAX,GAAyB,CAAzB,CAjBoC,CAmBpC;;AACA5oB,EAAAA,UAAU,CAAC6oB,sBAAX,GAAoC,EAApC,CApBoC,CAsBpC;;AACA/oB,EAAAA,EAAE,CAACyc,WAAH,GAAiB,CAAjB;AACAzc,EAAAA,EAAE,CAACwc,WAAH,GAAiB,CAAjB,CAxBoC,CA0BpC;;AACAtc,EAAAA,UAAU,CAAC8oB,YAAX,GAA0B,EAA1B;AACA9oB,EAAAA,UAAU,CAAC+oB,iBAAX,GAA+B,EAA/B;AACA/oB,EAAAA,UAAU,CAACgpB,gBAAX,GAA8B,EAA9B;AACAhpB,EAAAA,UAAU,CAACipB,mBAAX,GAAiC,EAAjC,CA9BoC,CAgCpC;AACA;;AACA,OAAIviB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkS,QAAQ,CAAChX,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqC;AACjC,QAAG0G,KAAK,CAACW,OAAN,CAAc4V,MAAd,KAAyBA,MAAM,CAACpR,OAAP,CAAe7L,CAAf,MAAsB,CAAC,CAAnD,EAAsD;AAClDF,MAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcH,WAAW,CAACG,CAAD,CAAzB;AACA;AACH;AACJ;;AAED,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkS,QAAQ,CAAChX,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqC;AACjCuF,IAAAA,KAAK,GAAG2M,QAAQ,CAAClS,CAAD,CAAhB;AAEAuF,IAAAA,KAAK,CAACI,WAAN,GAAoBpO,UAAU,CAACirB,mBAAX,CAA+Bjd,KAA/B,CAApB,CAHiC,CAKjC;;AACAA,IAAAA,KAAK,CAACkd,SAAN,GAAkB,EAAlB;AACH,GAhDmC,CAkDpC;;;AACA,MAAIC,QAAQ,GAAGppB,UAAU,CAACwI,SAAX,CAAqB6gB,KAArB,IAA8B,EAA7C;;AACA,OAAI3iB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG0iB,QAAQ,CAACxnB,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqC;AACjC8K,IAAAA,MAAM,CAACvE,IAAP,CACIjN,UAAU,CAACopB,QAAQ,CAAC1iB,CAAD,CAAT,CAAV,CAAwB4iB,UAD5B,EAEItpB,UAAU,CAACopB,QAAQ,CAAC1iB,CAAD,CAAT,CAAV,CAAwB6iB,WAF5B;AAIH;;AAED,MAAIC,gBAAgB,GAAG,KAAvB;;AAEA,WAASC,cAAT,CAAwB/iB,CAAxB,EAA2B;AACvBuF,IAAAA,KAAK,GAAG2M,QAAQ,CAAClS,CAAD,CAAhB;AACAiJ,IAAAA,OAAO,GAAG1D,KAAK,CAAC0D,OAAhB;;AAEA,QAAG1D,KAAK,CAAC0I,OAAN,KAAkB,IAAlB,IAA0B1I,KAAK,CAACqJ,UAAnC,EAA+C;AAC3C;AACA;AACA;AACA,UAAG3F,OAAO,IAAIA,OAAO,CAAC+Z,IAAtB,EAA4B;AACxB,YAAIC,GAAG,GAAGha,OAAO,CAAC+Z,IAAR,CAAa5pB,EAAb,EAAiBmM,KAAjB,CAAV,CADwB,CAGxB;AACA;;;AACA,YAAG0d,GAAG,CAAC,CAAD,CAAH,IAAUA,GAAG,CAAC,CAAD,CAAH,CAAOpM,CAAjB,IAAsBoM,GAAG,CAAC,CAAD,CAAH,CAAOpM,CAAP,CAASqM,MAAlC,EAA0C;AACtC,iBAAOD,GAAG,CAAC,CAAD,CAAH,CAAOpM,CAAP,CAASqM,MAAT,CAAgBC,KAAvB;AACH;AACJ;;AAED,WAAIvd,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGL,KAAK,CAACqJ,UAAN,CAAiB1T,MAAhC,EAAwC0K,CAAC,EAAzC,EAA6C;AACzC,YAAIoM,SAAS,GAAGzM,KAAK,CAACqJ,UAAN,CAAiBhJ,CAAjB,CAAhB;AAEAqD,QAAAA,OAAO,GAAGpQ,kBAAkB,CAACmZ,SAAS,CAACzZ,IAAX,CAA5B;;AACA,YAAG0Q,OAAO,IAAIA,OAAO,CAACma,aAAtB,EAAqC;AACjC7d,UAAAA,KAAK,CAACE,iBAAN,GAA0B,IAA1B;AACAqd,UAAAA,gBAAgB,GAAG,IAAnB;;AACA7Z,UAAAA,OAAO,CAACma,aAAR,CAAsBhqB,EAAtB,EAA0BmM,KAA1B,EAAiCyM,SAAjC;AACH;AACJ;AACJ;AACJ;;AAED,WAASqR,KAAT,CAAerjB,CAAf,EAAkBsjB,WAAlB,EAA+B;AAC3B/d,IAAAA,KAAK,GAAG2M,QAAQ,CAAClS,CAAD,CAAhB;AACAiJ,IAAAA,OAAO,GAAG1D,KAAK,CAAC0D,OAAhB;AAEA,QAAG,CAAC,CAACA,OAAO,CAACqa,WAAV,KAA0BA,WAA7B,EAA0C;AAE1C,QAAIC,EAAE,GAAG,EAAT;;AAEA,QAAGhe,KAAK,CAAC0I,OAAN,KAAkB,IAAlB,IAA0B1I,KAAK,CAACgM,OAAN,KAAkB,CAA/C,EAAkD;AAC9C;AACA,aAAOhM,KAAK,CAACie,cAAb,CAF8C,CAG9C;AACA;AACA;;AACA,UAAI5U,UAAU,GAAGrJ,KAAK,CAACqJ,UAAN,IAAoB,EAArC;;AACA,WAAIhJ,CAAC,GAAGgJ,UAAU,CAAC1T,MAAX,GAAoB,CAA5B,EAA+B0K,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,YAAGgJ,UAAU,CAAChJ,CAAD,CAAV,CAAc6d,OAAjB,EAA0B;AACtBle,UAAAA,KAAK,CAACie,cAAN,GAAuB5U,UAAU,CAAChJ,CAAD,CAAV,CAAc4d,cAArC;AACA;AACH;AACJ;;AAED,UAAGva,OAAO,IAAIA,OAAO,CAAC+Z,IAAtB,EAA4B;AACxBO,QAAAA,EAAE,GAAGta,OAAO,CAAC+Z,IAAR,CAAa5pB,EAAb,EAAiBmM,KAAjB,CAAL;AACH;AACJ,KAzB0B,CA2B3B;AACA;AACA;AACA;;;AACA,QAAG,CAACmB,KAAK,CAACW,OAAN,CAAckc,EAAd,CAAD,IAAsB,CAACA,EAAE,CAAC,CAAD,CAA5B,EAAiC;AAC7BA,MAAAA,EAAE,GAAG,CAAC;AAAC3mB,QAAAA,CAAC,EAAEjF,MAAJ;AAAY2E,QAAAA,CAAC,EAAE3E;AAAf,OAAD,CAAL;AACH,KAjC0B,CAmC3B;AACA;AACA;;;AACA,QAAG,CAAC4rB,EAAE,CAAC,CAAD,CAAF,CAAM1M,CAAV,EAAa0M,EAAE,CAAC,CAAD,CAAF,CAAM1M,CAAN,GAAU,EAAV;AACb0M,IAAAA,EAAE,CAAC,CAAD,CAAF,CAAMhe,KAAN,GAAcA,KAAd;AAEAzF,IAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcujB,EAAd;AACH;;AAEDG,EAAAA,mBAAmB,CAAC5Y,MAAD,EAASoH,QAAT,CAAnB,CAxIoC,CA0IpC;AACA;;AACA,OAAIlS,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkS,QAAQ,CAAChX,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqCqjB,KAAK,CAACrjB,CAAD,EAAI,IAAJ,CAAL;;AACrC,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkS,QAAQ,CAAChX,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqC+iB,cAAc,CAAC/iB,CAAD,CAAd,CA7ID,CA+IpC;;;AACA,MAAG8iB,gBAAH,EAAqBY,mBAAmB,CAAC5Y,MAAD,EAASoH,QAAT,CAAnB,CAhJe,CAkJpC;AACA;;AACA,OAAIlS,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkS,QAAQ,CAAChX,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqCqjB,KAAK,CAACrjB,CAAD,EAAI,IAAJ,CAAL;;AACrC,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkS,QAAQ,CAAChX,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqCqjB,KAAK,CAACrjB,CAAD,EAAI,KAAJ,CAAL;;AAErC2jB,EAAAA,gBAAgB,CAACvqB,EAAD,CAAhB,CAvJoC,CAyJpC;;AACA,MAAIwqB,MAAM,GAAGC,yBAAyB,CAAC/Y,MAAD,EAAS1R,EAAT,CAAtC;;AACA,MAAGwqB,MAAM,CAAC1oB,MAAV,EAAkB;AACd;AACA5B,IAAAA,UAAU,CAAC2oB,SAAX,GAAuB,CAAvB;AACA3oB,IAAAA,UAAU,CAAC4oB,WAAX,GAAyB,CAAzB,CAHc,CAId;;AACA,SAAIliB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG4jB,MAAM,CAAC1oB,MAAtB,EAA8B8E,CAAC,EAA/B,EAAmCqjB,KAAK,CAACO,MAAM,CAAC5jB,CAAD,CAAP,EAAY,IAAZ,CAAL;;AACnC,SAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG4jB,MAAM,CAAC1oB,MAAtB,EAA8B8E,CAAC,EAA/B,EAAmCqjB,KAAK,CAACO,MAAM,CAAC5jB,CAAD,CAAP,EAAY,KAAZ,CAAL;;AACnC2jB,IAAAA,gBAAgB,CAACvqB,EAAD,CAAhB;AACH;;AAED9B,EAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,IAA5B,EAAkC,MAAlC,EAA0CZ,EAA1C;AACA9B,EAAAA,QAAQ,CAAC0C,kBAAT,CAA4B,WAA5B,EAAyC,MAAzC,EAAiDZ,EAAjD;AACH,CAvKD;;AAyKA,IAAI0qB,8BAA8B,GAAG,wDAArC;;AAEA,SAASD,yBAAT,CAAmC/Y,MAAnC,EAA2C1R,EAA3C,EAA+C;AAC3C,MAAI2qB,cAAc,GAAG,EAArB;AACA,MAAI/jB,CAAJ,EAAO4F,CAAP,EAAUtC,CAAV,EAAaqT,CAAb,EAAgBiB,CAAhB;;AAEA,WAASoM,YAAT,CAAsBzrB,IAAtB,EAA4ByS,EAA5B,EAAgCpM,KAAhC,EAAuC;AACnC,QAAIqlB,QAAQ,GAAGjZ,EAAE,CAACN,GAAH,CAAOtC,MAAP,CAAc,CAAd,CAAf;;AACA,QAAG7P,IAAI,KAAK,oBAAZ,EAAkC;AAC9B,UAAI2rB,eAAe,GAAGlZ,EAAE,CAACP,YAAH,CAAgB,CAAhB,CAAtB;AACA,UAAIoC,SAAS,GAAGjV,OAAO,CAAC2S,SAAR,CAAkBnR,EAAlB,EAAsB8qB,eAAtB,CAAhB;AAEA,UAAIC,YAAY,GAAGF,QAAQ,KAAK,GAAb,IAAqBC,eAAe,KAAK,GAApB,IAA2BrX,SAAS,CAACtU,IAAV,KAAmB,UAAtF;AACA,UAAI6rB,YAAY,GAAGH,QAAQ,KAAK,GAAb,IAAqBC,eAAe,KAAK,GAApB,IAA2BrX,SAAS,CAACtU,IAAV,KAAmB,UAAtF;AAEA,aAAO,UAASqf,CAAT,EAAYjB,CAAZ,EAAe;AAClB,YAAGiB,CAAC,KAAK,CAAN,IAAWjB,CAAC,KAAK,CAApB,EAAuB,OAAO,CAAC,CAAR,CADL,CACgB;;AAClC,YAAGwN,YAAY,IAAIvM,CAAC,KAAKhZ,KAAK,CAAC+X,CAAD,CAAL,CAASzb,MAAT,GAAkB,CAA3C,EAA8C,OAAO,CAAC,CAAR;AAC9C,YAAGkpB,YAAY,IAAIzN,CAAC,KAAK/X,KAAK,CAAC1D,MAAN,GAAe,CAAxC,EAA2C,OAAO,CAAC,CAAR;AAE3C,eAAO,CAAC+oB,QAAQ,KAAK,GAAb,GAAmBtN,CAAnB,GAAuBiB,CAAxB,IAA6B,CAApC;AACH,OAND;AAOH,KAdD,MAcO;AACH,aAAO,UAASA,CAAT,EAAYjB,CAAZ,EAAe;AAClB,eAAOsN,QAAQ,KAAK,GAAb,GAAmBtN,CAAnB,GAAuBiB,CAA9B;AACH,OAFD;AAGH;AACJ;;AAED,MAAIyM,KAAK,GAAG;AACR,WAAO,UAAS7rB,MAAT,EAAiB;AAAC,aAAOf,GAAG,CAAC6sB,OAAJ,CAAYnY,IAAI,CAACH,GAAjB,EAAsB,IAAtB,EAA4BxT,MAA5B,CAAP;AAA4C,KAD7D;AAER,WAAO,UAASA,MAAT,EAAiB;AAAC,aAAOf,GAAG,CAAC6sB,OAAJ,CAAYnY,IAAI,CAACF,GAAjB,EAAsB,IAAtB,EAA4BzT,MAA5B,CAAP;AAA4C,KAF7D;AAGR,WAAO,UAASA,MAAT,EAAiB;AAAC,aAAOf,GAAG,CAAC6sB,OAAJ,CAAY,UAASC,CAAT,EAAYzN,CAAZ,EAAe;AAAE,eAAOyN,CAAC,GAAGzN,CAAX;AAAc,OAA3C,EAA6C,IAA7C,EAAmDte,MAAnD,CAAP;AAAmE,KAHpF;AAIR,aAAS,UAASA,MAAT,EAAiB;AAAC,aAAOf,GAAG,CAAC6sB,OAAJ,CAAY,UAASC,CAAT,EAAYzN,CAAZ,EAAe;AAAE,eAAOyN,CAAC,GAAGzN,CAAX;AAAc,OAA3C,EAA6C,IAA7C,EAAmDte,MAAnD,CAAP;AAAmE,KAJtF;AAKR,YAAQ,UAASA,MAAT,EAAiB;AAAC,aAAOf,GAAG,CAAC+sB,IAAJ,CAAShsB,MAAT,CAAP;AAAyB,KAL3C;AAMR,cAAU,UAASA,MAAT,EAAiB;AAAC,aAAOf,GAAG,CAACgtB,MAAJ,CAAWjsB,MAAX,CAAP;AAA2B;AAN/C,GAAZ;;AASA,OAAIwH,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG8K,MAAM,CAAC5P,MAAtB,EAA8B8E,CAAC,EAA/B,EAAmC;AAC/B,QAAIgL,EAAE,GAAGF,MAAM,CAAC9K,CAAD,CAAf;AACA,QAAGgL,EAAE,CAACzS,IAAH,KAAY,UAAf,EAA2B,SAFI,CAI/B;;AACA,QAAImsB,KAAK,GAAG1Z,EAAE,CAAC2Z,aAAH,CAAiBD,KAAjB,CAAuBZ,8BAAvB,CAAZ;;AACA,QAAGY,KAAH,EAAU;AACN,UAAIE,UAAU,GAAGF,KAAK,CAAC,CAAD,CAAtB;AACA,UAAIG,KAAK,GAAGH,KAAK,CAAC,CAAD,CAAjB,CAFM,CAIN;;AACA,UAAII,eAAe,GAAG,EAAtB;;AACA,WAAIlf,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGoF,EAAE,CAAC+Z,WAAH,CAAe7pB,MAA9B,EAAsC0K,CAAC,EAAvC,EAA2C;AACvCkf,QAAAA,eAAe,CAACve,IAAhB,CAAqB,CAACyE,EAAE,CAAC+Z,WAAH,CAAenf,CAAf,CAAD,EAAoB,EAApB,CAArB;AACH,OARK,CAUN;;;AACA,WAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGoF,EAAE,CAACga,aAAH,CAAiB9pB,MAAhC,EAAwC0K,CAAC,EAAzC,EAA6C;AACzC,YAAI2W,UAAU,GAAGvR,EAAE,CAACga,aAAH,CAAiBpf,CAAjB,CAAjB;AACA,YAAIkI,SAAS,GAAG1U,EAAE,CAACsG,SAAH,CAAa6c,UAAb,CAAhB;;AACA,YAAI0H,QAAQ,GAAGjZ,EAAE,CAACN,GAAH,CAAOtC,MAAP,CAAc,CAAd,CAAf,CAHyC,CAKzC;;;AACA,YAAG0F,SAAS,CAACG,OAAV,KAAsB,IAAzB,EAA+B;AAE/B,YAAI1V,IAAI,GAAGuV,SAAS,CAACvV,IAArB;;AACA,YAAGjB,QAAQ,CAAC8X,OAAT,CAAiBtB,SAAjB,EAA4B,WAA5B,CAAH,EAA6C;AACzC,iBAAOA,SAAS,CAACmX,iBAAjB;AACA,iBAAOnX,SAAS,CAACoX,iBAAjB;AACH;;AAED,YAAI3B,EAAE,GAAGnqB,EAAE,CAAC0G,QAAH,CAAYyc,UAAZ,CAAT;;AACA,aAAIjZ,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGigB,EAAE,CAACroB,MAAlB,EAA0BoI,CAAC,EAA3B,EAA+B;AAC3B,cAAI2f,GAAG,GAAGM,EAAE,CAACjgB,CAAD,CAAZ;AACA,cAAI6hB,GAAJ,EAASC,QAAT,EAAmBxmB,KAAnB;;AAEA,cAAGrG,IAAI,KAAK,OAAZ,EAAqB;AACjB;AACA;AACA,gBAAI8sB,qBAAqB,GAAGvX,SAAS,CAACwX,QAAV,CAAmBta,EAAE,CAACN,GAAtB,CAA5B,CAHiB,CAKjB;;AACA,gBAAGuZ,QAAQ,KAAK,GAAhB,EAAqB;AACjB,kBAAIsB,iBAAiB,GAAGzX,SAAS,CAAC0X,KAAV,CAAgBH,qBAAhB,EAAuC,CAAvC,CAAxB;AACA,kBAAGE,iBAAH,EAAsBva,EAAE,GAAG5R,EAAE,CAACG,WAAH,CAAe3B,OAAO,CAAC6tB,OAAR,CAAgBF,iBAAhB,CAAf,CAAL;AACzB;;AAED,gBAAIrc,UAAU,GAAG+Z,GAAG,CAAC1d,KAAJ,CAAUmgB,UAAV,CAAqBL,qBAArB,EAA4C7sB,MAA7D;;AACA,iBAAIme,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGzN,UAAU,CAAChO,MAA1B,EAAkCyb,CAAC,EAAnC,EAAuC;AACnCwO,cAAAA,GAAG,GAAGjc,UAAU,CAACyN,CAAD,CAAhB;AACAyO,cAAAA,QAAQ,GAAGpa,EAAE,CAAC2a,cAAH,CAAkBR,GAAlB,CAAX,CAFmC,CAInC;;AACA,mBAAIvN,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGqL,GAAG,CAAC1d,KAAJ,CAAUmgB,UAAV,CAAqBxqB,MAApC,EAA4C0c,CAAC,EAA7C,EAAiD;AAC7C,oBAAGA,CAAC,KAAKyN,qBAAT,EAAgC;AAChC,oBAAIO,SAAS,GAAG3C,GAAG,CAAC1d,KAAJ,CAAUmgB,UAAV,CAAqB9N,CAArB,CAAhB;AACAkN,gBAAAA,eAAe,CAACM,QAAD,CAAf,CAA0B,CAA1B,EAA6B7e,IAA7B,CAAkCqf,SAAS,CAACptB,MAAV,CAAiBme,CAAjB,CAAlC;AACH;AACJ;AACJ,WAvBD,MAuBO,IAAGpe,IAAI,KAAK,WAAZ,EAAyB;AAC5B;AACA,iBAAIoe,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGsM,GAAG,CAACpM,CAAJ,CAAMja,CAAN,CAAQ1B,MAAvB,EAA+Byb,CAAC,EAAhC,EAAoC;AAChC,kBAAGsN,QAAQ,KAAK,GAAhB,EAAqB;AACjBkB,gBAAAA,GAAG,GAAGlC,GAAG,CAACpM,CAAJ,CAAMja,CAAN,CAAQ+Z,CAAR,CAAN;AACAyO,gBAAAA,QAAQ,GAAGD,GAAX;AACAvmB,gBAAAA,KAAK,GAAGqkB,GAAG,CAACpM,CAAJ,CAAMva,CAAN,CAAQqa,CAAR,CAAR;AACH;;AAED,kBAAGsN,QAAQ,KAAK,GAAhB,EAAqB;AACjBkB,gBAAAA,GAAG,GAAGlC,GAAG,CAACpM,CAAJ,CAAMva,CAAN,CAAQqa,CAAR,CAAN;AACAyO,gBAAAA,QAAQ,GAAGD,GAAX;AACAvmB,gBAAAA,KAAK,GAAGqkB,GAAG,CAACpM,CAAJ,CAAMja,CAAN,CAAQ+Z,CAAR,CAAR;AACH;;AACDmO,cAAAA,eAAe,CAACM,QAAD,CAAf,CAA0B,CAA1B,EAA6B7e,IAA7B,CAAkC3H,KAAlC;AACH,aAf2B,CAgB5B;AACA;;;AACA,gBAAGqkB,GAAG,CAACpM,CAAJ,IAASoM,GAAG,CAACpM,CAAJ,CAAMqM,MAAlB,EAA0B;AACtB,qBAAOD,GAAG,CAACpM,CAAJ,CAAMqM,MAAN,CAAaC,KAApB;AACH;AACJ,WArBM,MAqBA,IAAGF,GAAG,CAAC4C,cAAJ,CAAmB,GAAnB,CAAH,EAA4B;AAC/B;AACAjnB,YAAAA,KAAK,GAAGqkB,GAAG,CAAC6C,CAAZ;AACA,gBAAIC,OAAO,GAAG/B,YAAY,CAAClW,SAAS,CAACvV,IAAX,EAAiByS,EAAjB,EAAqBpM,KAArB,CAA1B;;AAEA,iBAAI+X,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG/X,KAAK,CAAC1D,MAArB,EAA6Byb,CAAC,EAA9B,EAAkC;AAC9B,mBAAIiB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGhZ,KAAK,CAAC+X,CAAD,CAAL,CAASzb,MAAxB,EAAgC0c,CAAC,EAAjC,EAAqC;AACjCwN,gBAAAA,QAAQ,GAAGW,OAAO,CAACnO,CAAD,EAAIjB,CAAJ,CAAlB;AACA,oBAAGyO,QAAQ,GAAG,CAAd,EAAiBN,eAAe,CAACM,QAAD,CAAf,CAA0B,CAA1B,EAA6B7e,IAA7B,CAAkC3H,KAAK,CAAC+X,CAAD,CAAL,CAASiB,CAAT,CAAlC;AACpB;AACJ;AACJ,WAXM,MAWA;AACH;AACA,gBAAGqM,QAAQ,KAAK,GAAhB,EAAqB;AACjBkB,cAAAA,GAAG,GAAGlC,GAAG,CAAC3L,CAAJ,GAAQ,CAAR,GAAY2L,GAAG,CAAC3L,CAAhB,GAAoB2L,GAAG,CAACrmB,CAA9B;AACAgC,cAAAA,KAAK,GAAGqkB,GAAG,CAACtnB,CAAJ,IAASsnB,GAAG,CAACpI,CAAb,IAAkBoI,GAAG,CAAC3mB,CAA9B;AACH,aAHD,MAGO,IAAG2nB,QAAQ,KAAK,GAAhB,EAAqB;AACxBkB,cAAAA,GAAG,GAAGlC,GAAG,CAAC3L,CAAJ,GAAQ,CAAR,GAAY2L,GAAG,CAAC3L,CAAhB,GAAoB2L,GAAG,CAAC3mB,CAA9B;AACAsC,cAAAA,KAAK,GAAGqkB,GAAG,CAACtnB,CAAJ,IAASsnB,GAAG,CAACpI,CAAb,IAAkBoI,GAAG,CAACrmB,CAA9B;AACH;;AACD,gBAAG,CAAC8J,KAAK,CAACW,OAAN,CAAczI,KAAd,CAAJ,EAA0BA,KAAK,GAAG,CAACA,KAAD,CAAR;;AAC1B,iBAAI+X,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG/X,KAAK,CAAC1D,MAArB,EAA6Byb,CAAC,EAA9B,EAAkC;AAC9BmO,cAAAA,eAAe,CAACK,GAAD,CAAf,CAAqB,CAArB,EAAwB5e,IAAxB,CAA6B3H,KAAK,CAAC+X,CAAD,CAAlC;AACH;AACJ;AACJ;AACJ;;AAED3L,MAAAA,EAAE,CAACgb,gBAAH,GAAsBlB,eAAtB;AAEA,UAAImB,yBAAyB,GAAG,EAAhC;;AACA,WAAIrgB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGkf,eAAe,CAAC5pB,MAA/B,EAAuC0K,CAAC,EAAxC,EAA4C;AACxCqgB,QAAAA,yBAAyB,CAAC1f,IAA1B,CAA+B,CAC3Bue,eAAe,CAAClf,CAAD,CAAf,CAAmB,CAAnB,CAD2B,EAE3Bye,KAAK,CAACO,UAAD,CAAL,CAAkBE,eAAe,CAAClf,CAAD,CAAf,CAAmB,CAAnB,CAAlB,CAF2B,CAA/B;AAIH,OA9GK,CAgHN;;;AACAqgB,MAAAA,yBAAyB,CAAC1a,IAA1B,CAA+B,UAASgZ,CAAT,EAAYzN,CAAZ,EAAe;AAC1C,eAAOyN,CAAC,CAAC,CAAD,CAAD,GAAOzN,CAAC,CAAC,CAAD,CAAf;AACH,OAFD;AAIA9L,MAAAA,EAAE,CAACkb,0BAAH,GAAgCD,yBAAhC,CArHM,CAuHN;;AACAjb,MAAAA,EAAE,CAACmb,kBAAH,GAAwBF,yBAAyB,CAAChL,GAA1B,CAA8B,UAASmL,CAAT,EAAY;AAC9D,eAAOA,CAAC,CAAC,CAAD,CAAR;AACH,OAFuB,CAAxB,CAxHM,CA4HN;;AACA,UAAGvB,KAAK,KAAK,YAAb,EAA2B;AACvB7Z,QAAAA,EAAE,CAACmb,kBAAH,CAAsBE,OAAtB;AACH,OA/HK,CAiIN;;;AACAtC,MAAAA,cAAc,GAAGA,cAAc,CAAC5Z,MAAf,CAAsBa,EAAE,CAACsb,uBAAH,EAAtB,CAAjB;AACH;AACJ;;AACD,SAAOvC,cAAP;AACH;;AAED,SAASL,mBAAT,CAA6B5Y,MAA7B,EAAqCoH,QAArC,EAA+C;AAC3C,OAAI,IAAIlS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG8K,MAAM,CAAC5P,MAA1B,EAAkC8E,CAAC,EAAnC,EAAuC;AACnC,QAAIgL,EAAE,GAAGF,MAAM,CAAC9K,CAAD,CAAf;AACAgL,IAAAA,EAAE,CAACub,SAAH;;AACA,QAAGvb,EAAE,CAACzS,IAAH,KAAY,eAAf,EAAgC;AAC5ByS,MAAAA,EAAE,CAACwb,kBAAH,CAAsBtU,QAAtB;AACH;AACJ;AACJ;;AAED,SAASyR,gBAAT,CAA0BvqB,EAA1B,EAA8B;AAC1B,MAAIE,UAAU,GAAGF,EAAE,CAACG,WAApB;AACA,MAAIyP,OAAO,GAAG1P,UAAU,CAACqI,eAAzB;AACA,MAAIyb,IAAI,GAAG,EAAX;AACA,MAAIpd,CAAJ,EAAO4F,CAAP,EAAUtC,CAAV,CAJ0B,CAM1B;AACA;AACA;;AAEA,OAAIsC,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGoD,OAAO,CAAC9N,MAAvB,EAA+B0K,CAAC,EAAhC,EAAoC;AAChC,QAAIqD,OAAO,GAAGD,OAAO,CAACpD,CAAD,CAArB;AACA,QAAI6gB,EAAE,GAAGxd,OAAO,CAACyd,cAAjB;;AACA,QAAGD,EAAH,EAAO;AACH,UAAIE,MAAM,GAAG1d,OAAO,CAACiF,cAAR,CAAuBvP,IAApC;;AACA,UAAGye,IAAI,CAACuJ,MAAD,CAAP,EAAiB;AACblvB,QAAAA,GAAG,CAAC0L,UAAJ,CAAeia,IAAI,CAACuJ,MAAD,CAAnB,EAA6BF,EAA7B;AACH,OAFD,MAEO;AACHrJ,QAAAA,IAAI,CAACuJ,MAAD,CAAJ,GAAe,CAACF,EAAD,CAAf;AACH;AACJ;AACJ;;AAED,OAAInjB,CAAJ,IAAS8Z,IAAT,EAAe;AACX,QAAIwJ,OAAO,GAAGxJ,IAAI,CAAC9Z,CAAD,CAAlB;AACA,QAAIzB,QAAQ,GAAGvI,UAAU,CAACwI,SAAX,CAAqBwB,CAArB,CAAf;;AAEA,QAAGoD,KAAK,CAACW,OAAN,CAAcxF,QAAd,CAAH,EAA4B;AACxB,WAAI7B,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG6B,QAAQ,CAAC3G,MAAxB,EAAgC8E,CAAC,EAAjC,EAAqC;AACjC,YAAI6mB,EAAE,GAAGhlB,QAAQ,CAAC7B,CAAD,CAAjB;AACA,YAAI8mB,MAAM,GAAGxjB,CAAC,KAAK,WAAN,GACThK,UAAU,CAACwQ,MAAX,CAAkB+c,EAAlB,CADS,GAETvtB,UAAU,CAACutB,EAAD,CAFd;;AAIA,aAAIjhB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGghB,OAAO,CAAC1rB,MAAvB,EAA+B0K,CAAC,EAAhC,EAAoC;AAChCghB,UAAAA,OAAO,CAAChhB,CAAD,CAAP,CAAWxM,EAAX,EAAe0tB,MAAf,EAAuBD,EAAvB;AACH;AACJ;AACJ,KAXD,MAWO;AACH,WAAIjhB,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGghB,OAAO,CAAC1rB,MAAvB,EAA+B0K,CAAC,EAAhC,EAAoC;AAChCghB,QAAAA,OAAO,CAAChhB,CAAD,CAAP,CAAWxM,EAAX;AACH;AACJ;AACJ;AACJ;;AAEDlB,KAAK,CAAC4pB,OAAN,GAAgB,UAAS1oB,EAAT,EAAa;AACzB,MAAGA,EAAE,CAACG,WAAH,CAAewtB,QAAlB,EAA4B;AACxB3tB,IAAAA,EAAE,CAACG,WAAH,CAAewtB,QAAf;AACH;AACJ,CAJD;;AAMA7uB,KAAK,CAAC8uB,MAAN,GAAe,UAAS5tB,EAAT,EAAa;AACxB,MAAGA,EAAE,CAACG,WAAH,CAAe0tB,OAAlB,EAA2B;AACvB7tB,IAAAA,EAAE,CAACG,WAAH,CAAe0tB,OAAf;AACH;AACJ,CAJD;;AAMA/uB,KAAK,CAACgvB,2BAAN,GAAoC,UAAS9tB,EAAT,EAAa+tB,OAAb,EAAsBC,eAAtB,EAAuCC,aAAvC,EAAsD;AACtF,MAAIC,YAAY,GAAGH,OAAO,CAACI,SAA3B;AACA,MAAIA,SAAS,GAAG,EAAhB;AACA,MAAIvnB,CAAJ,CAHsF,CAKtF;;AACA,OAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGonB,eAAe,CAAClsB,MAA/B,EAAuC8E,CAAC,EAAxC,EAA4C;AACxC,QAAIwnB,UAAU,GAAGJ,eAAe,CAACpnB,CAAD,CAAhC;AACA,QAAIuF,KAAK,GAAGiiB,UAAU,CAAC,CAAD,CAAV,CAAcjiB,KAA1B,CAFwC,CAIxC;AACA;;AACA,QAAGA,KAAK,CAAC0I,OAAT,EAAkB;AACdsZ,MAAAA,SAAS,CAAChiB,KAAK,CAAChN,IAAP,CAAT,GAAwBgvB,SAAS,CAAChiB,KAAK,CAAChN,IAAP,CAAT,IAAyB,EAAjD;AACAgvB,MAAAA,SAAS,CAAChiB,KAAK,CAAChN,IAAP,CAAT,CAAsBgO,IAAtB,CAA2BihB,UAA3B;AACH;AACJ,GAhBqF,CAkBtF;AACA;AACA;;;AACA,OAAI,IAAIC,aAAR,IAAyBH,YAAzB,EAAuC;AACnC,QAAG,CAACC,SAAS,CAACE,aAAD,CAAb,EAA8B;AAC1B,UAAIC,aAAa,GAAGJ,YAAY,CAACG,aAAD,CAAZ,CAA4B,CAA5B,CAApB;AACA,UAAIE,SAAS,GAAGD,aAAa,CAAC,CAAD,CAAb,CAAiBniB,KAAjC;AAEAoiB,MAAAA,SAAS,CAAC1Z,OAAV,GAAoB,KAApB;AACAsZ,MAAAA,SAAS,CAACE,aAAD,CAAT,GAA2B,CAACC,aAAD,CAA3B;AACH;AACJ,GA7BqF,CA+BtF;;;AACA,OAAI,IAAIE,UAAR,IAAsBL,SAAtB,EAAiC;AAC7B,QAAIM,cAAc,GAAGN,SAAS,CAACK,UAAD,CAA9B;AACA,QAAI3e,OAAO,GAAG4e,cAAc,CAAC,CAAD,CAAd,CAAkB,CAAlB,EAAqBtiB,KAArB,CAA2B0D,OAAzC;;AAEAA,IAAAA,OAAO,CAAC7I,IAAR,CAAahH,EAAb,EAAiB+tB,OAAjB,EAA0B1vB,GAAG,CAACqwB,aAAJ,CAAkBD,cAAlB,CAA1B,EAA6DR,aAA7D;AACH,GArCqF,CAuCtF;;;AACAF,EAAAA,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACH,CAzCD;;AA2CArvB,KAAK,CAAC6vB,YAAN,GAAqB,UAASC,WAAT,EAAsB5uB,EAAtB,EAA0B6jB,MAA1B,EAAkC0B,cAAlC,EAAkDsJ,sBAAlD,EAA0E;AAC3F,MAAIhf,OAAO,GAAG3R,QAAQ,CAACoZ,SAAT,CAAmBsX,WAAnB,CAAd;;AACA,MAAIE,QAAQ,GAAGnwB,iBAAiB,CAACqB,EAAE,CAAC0G,QAAJ,EAAcmJ,OAAd,CAAjB,CAAwC,CAAxC,CAAf;;AACAA,EAAAA,OAAO,CAAC7I,IAAR,CAAahH,EAAb,EAAiB8uB,QAAjB,EAA2BvJ,cAA3B,EAA2CsJ,sBAA3C;AACH,CAJD;;AAMA/vB,KAAK,CAACiwB,aAAN,GAAsB,UAASH,WAAT,EAAsBroB,WAAtB,EAAmCJ,aAAnC,EAAkDE,WAAlD,EAA+DJ,aAA/D,EAA8E;AAChG,MAAI+oB,GAAG,GAAI/oB,aAAa,CAAC5F,IAAd,IAAsB4F,aAAa,CAAC5F,IAAd,CAAmBuuB,WAAnB,CAAjC;;AACA,MAAIK,GAAG,GAAI9oB,aAAa,CAAC9F,IAAd,IAAsB8F,aAAa,CAAC9F,IAAd,CAAmBuuB,WAAnB,CAAjC;;AAEA,MAAGI,GAAG,IAAI,CAACC,GAAX,EAAgB;AACZhpB,IAAAA,aAAa,CAAC,MAAM2oB,WAAN,GAAoB,OAArB,CAAb,CAA2CrjB,SAA3C,CAAqD,SAArD,EAAgE5F,MAAhE;AACH;AACJ,CAPD","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar isNumeric = require('fast-isnumeric');\n\nvar Registry = require('../registry');\nvar PlotSchema = require('../plot_api/plot_schema');\nvar Template = require('../plot_api/plot_template');\nvar Lib = require('../lib');\nvar Color = require('../components/color');\nvar BADNUM = require('../constants/numerical').BADNUM;\n\nvar axisIDs = require('./cartesian/axis_ids');\n\nvar animationAttrs = require('./animation_attributes');\nvar frameAttrs = require('./frame_attributes');\n\nvar getModuleCalcData = require('../plots/get_data').getModuleCalcData;\n\nvar relinkPrivateKeys = Lib.relinkPrivateKeys;\nvar _ = Lib._;\n\nvar plots = module.exports = {};\n\n// Expose registry methods on Plots for backward-compatibility\nLib.extendFlat(plots, Registry);\n\nplots.attributes = require('./attributes');\nplots.attributes.type.values = plots.allTypes;\nplots.fontAttrs = require('./font_attributes');\nplots.layoutAttributes = require('./layout_attributes');\n\n// TODO make this a plot attribute?\nplots.fontWeight = 'normal';\n\nvar transformsRegistry = plots.transformsRegistry;\n\nvar commandModule = require('./command');\nplots.executeAPICommand = commandModule.executeAPICommand;\nplots.computeAPICommandBindings = commandModule.computeAPICommandBindings;\nplots.manageCommandObserver = commandModule.manageCommandObserver;\nplots.hasSimpleAPICommandBindings = commandModule.hasSimpleAPICommandBindings;\n\n// in some cases the browser doesn't seem to know how big\n// the text is at first, so it needs to draw it,\n// then wait a little, then draw it again\nplots.redrawText = function(gd) {\n    gd = Lib.getGraphDiv(gd);\n\n    var fullLayout = gd._fullLayout || {};\n    var hasPolar = fullLayout._has && fullLayout._has('polar');\n    var hasLegacyPolar = !hasPolar && gd.data && gd.data[0] && gd.data[0].r;\n\n    // do not work if polar is present\n    if(hasLegacyPolar) return;\n\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            Registry.getComponentMethod('annotations', 'draw')(gd);\n            Registry.getComponentMethod('legend', 'draw')(gd);\n            Registry.getComponentMethod('colorbar', 'draw')(gd);\n            resolve(plots.previousPromises(gd));\n        }, 300);\n    });\n};\n\n// resize plot about the container size\nplots.resize = function(gd) {\n    gd = Lib.getGraphDiv(gd);\n\n    return new Promise(function(resolve, reject) {\n        if(!gd || Lib.isHidden(gd)) {\n            reject(new Error('Resize must be passed a displayed plot div element.'));\n        }\n\n        if(gd._redrawTimer) clearTimeout(gd._redrawTimer);\n\n        gd._redrawTimer = setTimeout(function() {\n            // return if there is nothing to resize or is hidden\n            if(!gd.layout || (gd.layout.width && gd.layout.height) || Lib.isHidden(gd)) {\n                resolve(gd);\n                return;\n            }\n\n            delete gd.layout.width;\n            delete gd.layout.height;\n\n            // autosizing doesn't count as a change that needs saving\n            var oldchanged = gd.changed;\n\n            // nor should it be included in the undo queue\n            gd.autoplay = true;\n\n            Registry.call('relayout', gd, {autosize: true}).then(function() {\n                gd.changed = oldchanged;\n                resolve(gd);\n            });\n        }, 100);\n    });\n};\n\n\n// for use in Lib.syncOrAsync, check if there are any\n// pending promises in this plot and wait for them\nplots.previousPromises = function(gd) {\n    if((gd._promises || []).length) {\n        return Promise.all(gd._promises)\n            .then(function() { gd._promises = []; });\n    }\n};\n\n/**\n * Adds the 'Edit chart' link.\n * Note that now Plotly.plot() calls this so it can regenerate whenever it replots\n *\n * Add source links to your graph inside the 'showSources' config argument.\n */\nplots.addLinks = function(gd) {\n    // Do not do anything if showLink and showSources are not set to true in config\n    if(!gd._context.showLink && !gd._context.showSources) return;\n\n    var fullLayout = gd._fullLayout;\n\n    var linkContainer = Lib.ensureSingle(fullLayout._paper, 'text', 'js-plot-link-container', function(s) {\n        s.style({\n            'font-family': '\"Open Sans\", Arial, sans-serif',\n            'font-size': '12px',\n            'fill': Color.defaultLine,\n            'pointer-events': 'all'\n        })\n        .each(function() {\n            var links = d3.select(this);\n            links.append('tspan').classed('js-link-to-tool', true);\n            links.append('tspan').classed('js-link-spacer', true);\n            links.append('tspan').classed('js-sourcelinks', true);\n        });\n    });\n\n    // The text node inside svg\n    var text = linkContainer.node();\n    var attrs = {y: fullLayout._paper.attr('height') - 9};\n\n    // If text's width is bigger than the layout\n    // Check that text is a child node or document.body\n    // because otherwise IE/Edge might throw an exception\n    // when calling getComputedTextLength().\n    // Apparently offsetParent is null for invisibles.\n    if(document.body.contains(text) && text.getComputedTextLength() >= (fullLayout.width - 20)) {\n        // Align the text at the left\n        attrs['text-anchor'] = 'start';\n        attrs.x = 5;\n    } else {\n        // Align the text at the right\n        attrs['text-anchor'] = 'end';\n        attrs.x = fullLayout._paper.attr('width') - 7;\n    }\n\n    linkContainer.attr(attrs);\n\n    var toolspan = linkContainer.select('.js-link-to-tool');\n    var spacespan = linkContainer.select('.js-link-spacer');\n    var sourcespan = linkContainer.select('.js-sourcelinks');\n\n    if(gd._context.showSources) gd._context.showSources(gd);\n\n    // 'view in plotly' link for embedded plots\n    if(gd._context.showLink) positionPlayWithData(gd, toolspan);\n\n    // separator if we have both sources and tool link\n    spacespan.text((toolspan.text() && sourcespan.text()) ? ' - ' : '');\n};\n\n// note that now this function is only adding the brand in\n// iframes and 3rd-party apps\nfunction positionPlayWithData(gd, container) {\n    container.text('');\n    var link = container.append('a')\n        .attr({\n            'xlink:xlink:href': '#',\n            'class': 'link--impt link--embedview',\n            'font-weight': 'bold'\n        })\n        .text(gd._context.linkText + ' ' + String.fromCharCode(187));\n\n    if(gd._context.sendData) {\n        link.on('click', function() {\n            plots.sendDataToCloud(gd);\n        });\n    } else {\n        var path = window.location.pathname.split('/');\n        var query = window.location.search;\n        link.attr({\n            'xlink:xlink:show': 'new',\n            'xlink:xlink:href': '/' + path[2].split('.')[0] + '/' + path[1] + query\n        });\n    }\n}\n\nplots.sendDataToCloud = function(gd) {\n    gd.emit('plotly_beforeexport');\n\n    var baseUrl = (window.PLOTLYENV || {}).BASE_URL || gd._context.plotlyServerURL;\n\n    var hiddenformDiv = d3.select(gd)\n        .append('div')\n        .attr('id', 'hiddenform')\n        .style('display', 'none');\n\n    var hiddenform = hiddenformDiv\n        .append('form')\n        .attr({\n            action: baseUrl + '/external',\n            method: 'post',\n            target: '_blank'\n        });\n\n    var hiddenformInput = hiddenform\n        .append('input')\n        .attr({\n            type: 'text',\n            name: 'data'\n        });\n\n    hiddenformInput.node().value = plots.graphJson(gd, false, 'keepdata');\n    hiddenform.node().submit();\n    hiddenformDiv.remove();\n\n    gd.emit('plotly_afterexport');\n    return false;\n};\n\nvar d3FormatKeys = [\n    'days', 'shortDays', 'months', 'shortMonths', 'periods',\n    'dateTime', 'date', 'time',\n    'decimal', 'thousands', 'grouping', 'currency'\n];\n\nvar extraFormatKeys = [\n    'year', 'month', 'dayMonth', 'dayMonthYear'\n];\n\n/*\n * Fill in default values\n * @param {DOM element} gd\n * @param {object} opts\n * @param {boolean} opts.skipUpdateCalc: normally if the existing gd.calcdata looks\n *   compatible with the new gd._fullData we finish by linking the new _fullData traces\n *   to the old gd.calcdata, so it's correctly set if we're not going to recalc. But also,\n *   if there are calcTransforms on the trace, we first remap data arrays from the old full\n *   trace into the new one. Use skipUpdateCalc to defer this (needed by Plotly.react)\n *\n * gd.data, gd.layout:\n *   are precisely what the user specified (except as modified by cleanData/cleanLayout),\n *   these fields shouldn't be modified (except for filling in some auto values)\n *   nor used directly after the supply defaults step.\n *\n * gd._fullData, gd._fullLayout:\n *   are complete descriptions of how to draw the plot,\n *   use these fields in all required computations.\n *\n * gd._fullLayout._modules\n *   is a list of all the trace modules required to draw the plot.\n *\n * gd._fullLayout._visibleModules\n *   subset of _modules, a list of modules corresponding to visible:true traces.\n *\n * gd._fullLayout._basePlotModules\n *   is a list of all the plot modules required to draw the plot.\n *\n * gd._fullLayout._transformModules\n *   is a list of all the transform modules invoked.\n *\n */\nplots.supplyDefaults = function(gd, opts) {\n    var skipUpdateCalc = opts && opts.skipUpdateCalc;\n    var oldFullLayout = gd._fullLayout || {};\n\n    if(oldFullLayout._skipDefaults) {\n        delete oldFullLayout._skipDefaults;\n        return;\n    }\n\n    var newFullLayout = gd._fullLayout = {};\n    var newLayout = gd.layout || {};\n\n    var oldFullData = gd._fullData || [];\n    var newFullData = gd._fullData = [];\n    var newData = gd.data || [];\n\n    var oldCalcdata = gd.calcdata || [];\n\n    var context = gd._context || {};\n\n    var i;\n\n    // Create all the storage space for frames, but only if doesn't already exist\n    if(!gd._transitionData) plots.createTransitionData(gd);\n\n    // So we only need to do this once (and since we have gd here)\n    // get the translated placeholder titles.\n    // These ones get used as default values so need to be known at supplyDefaults\n    // others keep their blank defaults but render the placeholder as desired later\n    // TODO: make these work the same way, only inserting the placeholder text at draw time?\n    // The challenge is that this has slightly different behavior right now in editable mode:\n    // using the placeholder as default makes this text permanently (but lightly) visible,\n    // but explicit '' for these titles gives you a placeholder that's hidden until you mouse\n    // over it - so you're not distracted by it if you really don't want a title, but if you do\n    // and you're new to plotly you may not be able to find it.\n    // When editable=false the two behave the same, no title is drawn.\n    newFullLayout._dfltTitle = {\n        plot: _(gd, 'Click to enter Plot title'),\n        x: _(gd, 'Click to enter X axis title'),\n        y: _(gd, 'Click to enter Y axis title'),\n        colorbar: _(gd, 'Click to enter Colorscale title'),\n        annotation: _(gd, 'new text')\n    };\n    newFullLayout._traceWord = _(gd, 'trace');\n\n    var formatObj = getFormatObj(gd, d3FormatKeys);\n\n    // stash the token from context so mapbox subplots can use it as default\n    newFullLayout._mapboxAccessToken = context.mapboxAccessToken;\n\n    // first fill in what we can of layout without looking at data\n    // because fullData needs a few things from layout\n    if(oldFullLayout._initialAutoSizeIsDone) {\n        // coerce the updated layout while preserving width and height\n        var oldWidth = oldFullLayout.width;\n        var oldHeight = oldFullLayout.height;\n\n        plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n\n        if(!newLayout.width) newFullLayout.width = oldWidth;\n        if(!newLayout.height) newFullLayout.height = oldHeight;\n        plots.sanitizeMargins(newFullLayout);\n    } else {\n        // coerce the updated layout and autosize if needed\n        plots.supplyLayoutGlobalDefaults(newLayout, newFullLayout, formatObj);\n\n        var missingWidthOrHeight = (!newLayout.width || !newLayout.height);\n        var autosize = newFullLayout.autosize;\n        var autosizable = context.autosizable;\n        var initialAutoSize = missingWidthOrHeight && (autosize || autosizable);\n\n        if(initialAutoSize) plots.plotAutoSize(gd, newLayout, newFullLayout);\n        else if(missingWidthOrHeight) plots.sanitizeMargins(newFullLayout);\n\n        // for backwards-compatibility with Plotly v1.x.x\n        if(!autosize && missingWidthOrHeight) {\n            newLayout.width = newFullLayout.width;\n            newLayout.height = newFullLayout.height;\n        }\n    }\n\n    newFullLayout._d3locale = getFormatter(formatObj, newFullLayout.separators);\n    newFullLayout._extraFormat = getFormatObj(gd, extraFormatKeys);\n\n    newFullLayout._initialAutoSizeIsDone = true;\n\n    // keep track of how many traces are inputted\n    newFullLayout._dataLength = newData.length;\n\n    // clear the lists of trace and baseplot modules, and subplots\n    newFullLayout._modules = [];\n    newFullLayout._visibleModules = [];\n    newFullLayout._basePlotModules = [];\n    var subplots = newFullLayout._subplots = emptySubplotLists();\n\n    // initialize axis and subplot hash objects for splom-generated grids\n    var splomAxes = newFullLayout._splomAxes = {x: {}, y: {}};\n    var splomSubplots = newFullLayout._splomSubplots = {};\n    // initialize splom grid defaults\n    newFullLayout._splomGridDflt = {};\n\n    // for stacked area traces to share config across traces\n    newFullLayout._scatterStackOpts = {};\n    // for the first scatter trace on each subplot (so it knows tonext->tozero)\n    newFullLayout._firstScatter = {};\n    // for grouped bar/box/violin trace to share config across traces\n    newFullLayout._alignmentOpts = {};\n    // track color axes referenced in the data\n    newFullLayout._colorAxes = {};\n\n    // for traces to request a default rangeslider on their x axes\n    // eg set `_requestRangeslider.x2 = true` for xaxis2\n    newFullLayout._requestRangeslider = {};\n\n    // pull uids from old data to use as new defaults\n    newFullLayout._traceUids = getTraceUids(oldFullData, newData);\n\n    // then do the data\n    newFullLayout._globalTransforms = (gd._context || {}).globalTransforms;\n    plots.supplyDataDefaults(newData, newFullData, newLayout, newFullLayout);\n\n    // redo grid size defaults with info about splom x/y axes,\n    // and fill in generated cartesian axes and subplots\n    var splomXa = Object.keys(splomAxes.x);\n    var splomYa = Object.keys(splomAxes.y);\n    if(splomXa.length > 1 && splomYa.length > 1) {\n        Registry.getComponentMethod('grid', 'sizeDefaults')(newLayout, newFullLayout);\n\n        for(i = 0; i < splomXa.length; i++) {\n            Lib.pushUnique(subplots.xaxis, splomXa[i]);\n        }\n        for(i = 0; i < splomYa.length; i++) {\n            Lib.pushUnique(subplots.yaxis, splomYa[i]);\n        }\n        for(var k in splomSubplots) {\n            Lib.pushUnique(subplots.cartesian, k);\n        }\n    }\n\n    // attach helper method to check whether a plot type is present on graph\n    newFullLayout._has = plots._hasPlotType.bind(newFullLayout);\n\n    if(oldFullData.length === newFullData.length) {\n        for(i = 0; i < newFullData.length; i++) {\n            relinkPrivateKeys(newFullData[i], oldFullData[i]);\n        }\n    }\n\n    // finally, fill in the pieces of layout that may need to look at data\n    plots.supplyLayoutModuleDefaults(newLayout, newFullLayout, newFullData, gd._transitionData);\n\n    // Special cases that introduce interactions between traces.\n    // This is after relinkPrivateKeys so we can use those in crossTraceDefaults\n    // and after layout module defaults, so we can use eg barmode\n    var _modules = newFullLayout._visibleModules;\n    var crossTraceDefaultsFuncs = [];\n    for(i = 0; i < _modules.length; i++) {\n        var funci = _modules[i].crossTraceDefaults;\n        // some trace types share crossTraceDefaults (ie histogram2d, histogram2dcontour)\n        if(funci) Lib.pushUnique(crossTraceDefaultsFuncs, funci);\n    }\n    for(i = 0; i < crossTraceDefaultsFuncs.length; i++) {\n        crossTraceDefaultsFuncs[i](newFullData, newFullLayout);\n    }\n\n    // turn on flag to optimize large splom-only graphs\n    // mostly by omitting SVG layers during Cartesian.drawFramework\n    newFullLayout._hasOnlyLargeSploms = (\n        newFullLayout._basePlotModules.length === 1 &&\n        newFullLayout._basePlotModules[0].name === 'splom' &&\n        splomXa.length > 15 &&\n        splomYa.length > 15 &&\n        newFullLayout.shapes.length === 0 &&\n        newFullLayout.images.length === 0\n    );\n\n    // TODO remove in v2.0.0\n    // add has-plot-type refs to fullLayout for backward compatibility\n    newFullLayout._hasCartesian = newFullLayout._has('cartesian');\n    newFullLayout._hasGeo = newFullLayout._has('geo');\n    newFullLayout._hasGL3D = newFullLayout._has('gl3d');\n    newFullLayout._hasGL2D = newFullLayout._has('gl2d');\n    newFullLayout._hasTernary = newFullLayout._has('ternary');\n    newFullLayout._hasPie = newFullLayout._has('pie');\n\n    // relink / initialize subplot axis objects\n    plots.linkSubplots(newFullData, newFullLayout, oldFullData, oldFullLayout);\n\n    // clean subplots and other artifacts from previous plot calls\n    plots.cleanPlot(newFullData, newFullLayout, oldFullData, oldFullLayout);\n\n    // clear selection outline until we implement persistent selection,\n    // don't clear them though when drag handlers (e.g. listening to\n    // `plotly_selecting`) update the graph.\n    // we should try to come up with a better solution when implementing\n    // https://github.com/plotly/plotly.js/issues/1851\n    if(oldFullLayout._zoomlayer && !gd._dragging) {\n        oldFullLayout._zoomlayer.selectAll('.select-outline').remove();\n    }\n\n\n    // fill in meta helpers\n    fillMetaTextHelpers(newFullData, newFullLayout);\n\n    // relink functions and _ attributes to promote consistency between plots\n    relinkPrivateKeys(newFullLayout, oldFullLayout);\n\n    // colorscale crossTraceDefaults needs newFullLayout with relinked keys\n    Registry.getComponentMethod('colorscale', 'crossTraceDefaults')(newFullData, newFullLayout);\n\n    // For persisting GUI-driven changes in layout\n    // _preGUI and _tracePreGUI were already copied over in relinkPrivateKeys\n    if(!newFullLayout._preGUI) newFullLayout._preGUI = {};\n    // track trace GUI changes by uid rather than by trace index\n    if(!newFullLayout._tracePreGUI) newFullLayout._tracePreGUI = {};\n    var tracePreGUI = newFullLayout._tracePreGUI;\n    var uids = {};\n    var uid;\n    for(uid in tracePreGUI) uids[uid] = 'old';\n    for(i = 0; i < newFullData.length; i++) {\n        uid = newFullData[i]._fullInput.uid;\n        if(!uids[uid]) tracePreGUI[uid] = {};\n        uids[uid] = 'new';\n    }\n    for(uid in uids) {\n        if(uids[uid] === 'old') delete tracePreGUI[uid];\n    }\n\n    // set up containers for margin calculations\n    initMargins(newFullLayout);\n\n    // collect and do some initial calculations for rangesliders\n    Registry.getComponentMethod('rangeslider', 'makeData')(newFullLayout);\n\n    // update object references in calcdata\n    if(!skipUpdateCalc && oldCalcdata.length === newFullData.length) {\n        plots.supplyDefaultsUpdateCalc(oldCalcdata, newFullData);\n    }\n};\n\nplots.supplyDefaultsUpdateCalc = function(oldCalcdata, newFullData) {\n    for(var i = 0; i < newFullData.length; i++) {\n        var newTrace = newFullData[i];\n        var cd0 = (oldCalcdata[i] || [])[0];\n        if(cd0 && cd0.trace) {\n            var oldTrace = cd0.trace;\n            if(oldTrace._hasCalcTransform) {\n                var arrayAttrs = oldTrace._arrayAttrs;\n                var j, astr, oldArrayVal;\n\n                for(j = 0; j < arrayAttrs.length; j++) {\n                    astr = arrayAttrs[j];\n                    oldArrayVal = Lib.nestedProperty(oldTrace, astr).get().slice();\n                    Lib.nestedProperty(newTrace, astr).set(oldArrayVal);\n                }\n            }\n            cd0.trace = newTrace;\n        }\n    }\n};\n\n/**\n * Create a list of uid strings satisfying (in this order of importance):\n * 1. all unique, all strings\n * 2. matches input uids if provided\n * 3. matches previous data uids\n */\nfunction getTraceUids(oldFullData, newData) {\n    var len = newData.length;\n    var oldFullInput = [];\n    var i, prevFullInput;\n    for(i = 0; i < oldFullData.length; i++) {\n        var thisFullInput = oldFullData[i]._fullInput;\n        if(thisFullInput !== prevFullInput) oldFullInput.push(thisFullInput);\n        prevFullInput = thisFullInput;\n    }\n    var oldLen = oldFullInput.length;\n    var out = new Array(len);\n    var seenUids = {};\n\n    function setUid(uid, i) {\n        out[i] = uid;\n        seenUids[uid] = 1;\n    }\n\n    function tryUid(uid, i) {\n        if(uid && typeof uid === 'string' && !seenUids[uid]) {\n            setUid(uid, i);\n            return true;\n        }\n    }\n\n    for(i = 0; i < len; i++) {\n        var newUid = newData[i].uid;\n        if(typeof newUid === 'number') newUid = String(newUid);\n\n        if(tryUid(newUid, i)) continue;\n        if(i < oldLen && tryUid(oldFullInput[i].uid, i)) continue;\n        setUid(Lib.randstr(seenUids), i);\n    }\n\n    return out;\n}\n\n/**\n * Make a container for collecting subplots we need to display.\n *\n * Finds all subplot types we need to enumerate once and caches it,\n * but makes a new output object each time.\n * Single-trace subplots (which have no `id`) such as pie, table, etc\n * do not need to be collected because we just draw all visible traces.\n */\nfunction emptySubplotLists() {\n    var collectableSubplotTypes = Registry.collectableSubplotTypes;\n    var out = {};\n    var i, j;\n\n    if(!collectableSubplotTypes) {\n        collectableSubplotTypes = [];\n\n        var subplotsRegistry = Registry.subplotsRegistry;\n\n        for(var subplotType in subplotsRegistry) {\n            var subplotModule = subplotsRegistry[subplotType];\n            var subplotAttr = subplotModule.attr;\n\n            if(subplotAttr) {\n                collectableSubplotTypes.push(subplotType);\n\n                // special case, currently just for cartesian:\n                // we need to enumerate axes, not just subplots\n                if(Array.isArray(subplotAttr)) {\n                    for(j = 0; j < subplotAttr.length; j++) {\n                        Lib.pushUnique(collectableSubplotTypes, subplotAttr[j]);\n                    }\n                }\n            }\n        }\n    }\n\n    for(i = 0; i < collectableSubplotTypes.length; i++) {\n        out[collectableSubplotTypes[i]] = [];\n    }\n    return out;\n}\n\n/**\n * getFormatObj: use _context to get the format object from locale.\n * Used to get d3.locale argument object and extraFormat argument object\n *\n * Regarding d3.locale argument :\n * decimal and thousands can be overridden later by layout.separators\n * grouping and currency are not presently used by our automatic number\n * formatting system but can be used by custom formats.\n *\n * @returns {object} d3.locale format object\n */\nfunction getFormatObj(gd, formatKeys) {\n    var locale = gd._context.locale;\n    if(!locale) locale === 'en-US';\n\n    var formatDone = false;\n    var formatObj = {};\n\n    function includeFormat(newFormat) {\n        var formatFinished = true;\n        for(var i = 0; i < formatKeys.length; i++) {\n            var formatKey = formatKeys[i];\n            if(!formatObj[formatKey]) {\n                if(newFormat[formatKey]) {\n                    formatObj[formatKey] = newFormat[formatKey];\n                } else formatFinished = false;\n            }\n        }\n        if(formatFinished) formatDone = true;\n    }\n\n    // same as localize, look for format parts in each format spec in the chain\n    for(var i = 0; i < 2; i++) {\n        var locales = gd._context.locales;\n        for(var j = 0; j < 2; j++) {\n            var formatj = (locales[locale] || {}).format;\n            if(formatj) {\n                includeFormat(formatj);\n                if(formatDone) break;\n            }\n            locales = Registry.localeRegistry;\n        }\n\n        var baseLocale = locale.split('-')[0];\n        if(formatDone || baseLocale === locale) break;\n        locale = baseLocale;\n    }\n\n    // lastly pick out defaults from english (non-US, as DMY is so much more common)\n    if(!formatDone) includeFormat(Registry.localeRegistry.en.format);\n\n    return formatObj;\n}\n\n/**\n * getFormatter: combine the final separators with the locale formatting object\n * we pulled earlier to generate number and time formatters\n * TODO: remove separators in v2, only use locale, so we don't need this step?\n *\n * @param {object} formatObj: d3.locale format object\n * @param {string} separators: length-2 string to override decimal and thousands\n *   separators in number formatting\n *\n * @returns {object} {numberFormat, timeFormat} d3 formatter factory functions\n *   for numbers and time\n */\nfunction getFormatter(formatObj, separators) {\n    formatObj.decimal = separators.charAt(0);\n    formatObj.thousands = separators.charAt(1);\n\n    return d3.locale(formatObj);\n}\n\nfunction fillMetaTextHelpers(newFullData, newFullLayout) {\n    var _meta;\n    var meta4data = [];\n\n    if(newFullLayout.meta) {\n        _meta = newFullLayout._meta = {\n            meta: newFullLayout.meta,\n            layout: {meta: newFullLayout.meta}\n        };\n    }\n\n    for(var i = 0; i < newFullData.length; i++) {\n        var trace = newFullData[i];\n\n        if(trace.meta) {\n            meta4data[trace.index] = trace._meta = {meta: trace.meta};\n        } else if(newFullLayout.meta) {\n            trace._meta = {meta: newFullLayout.meta};\n        }\n        if(newFullLayout.meta) {\n            trace._meta.layout = {meta: newFullLayout.meta};\n        }\n    }\n\n    if(meta4data.length) {\n        if(!_meta) {\n            _meta = newFullLayout._meta = {};\n        }\n        _meta.data = meta4data;\n    }\n}\n\n// Create storage for all of the data related to frames and transitions:\nplots.createTransitionData = function(gd) {\n    // Set up the default keyframe if it doesn't exist:\n    if(!gd._transitionData) {\n        gd._transitionData = {};\n    }\n\n    if(!gd._transitionData._frames) {\n        gd._transitionData._frames = [];\n    }\n\n    if(!gd._transitionData._frameHash) {\n        gd._transitionData._frameHash = {};\n    }\n\n    if(!gd._transitionData._counter) {\n        gd._transitionData._counter = 0;\n    }\n\n    if(!gd._transitionData._interruptCallbacks) {\n        gd._transitionData._interruptCallbacks = [];\n    }\n};\n\n// helper function to be bound to fullLayout to check\n// whether a certain plot type is present on plot\n// or trace has a category\nplots._hasPlotType = function(category) {\n    var i;\n\n    // check base plot modules\n    var basePlotModules = this._basePlotModules || [];\n    for(i = 0; i < basePlotModules.length; i++) {\n        if(basePlotModules[i].name === category) return true;\n    }\n\n    // check trace modules (including non-visible:true)\n    var modules = this._modules || [];\n    for(i = 0; i < modules.length; i++) {\n        var name = modules[i].name;\n        if(name === category) return true;\n        // N.B. this is modules[i] along with 'categories' as a hash object\n        var _module = Registry.modules[name];\n        if(_module && _module.categories[category]) return true;\n    }\n\n    return false;\n};\n\nplots.cleanPlot = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var i, j;\n\n    var basePlotModules = oldFullLayout._basePlotModules || [];\n    for(i = 0; i < basePlotModules.length; i++) {\n        var _module = basePlotModules[i];\n\n        if(_module.clean) {\n            _module.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n        }\n    }\n\n    var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n    var hasGl = newFullLayout._has && newFullLayout._has('gl');\n\n    if(hadGl && !hasGl) {\n        if(oldFullLayout._glcontainer !== undefined) {\n            oldFullLayout._glcontainer.selectAll('.gl-canvas').remove();\n            oldFullLayout._glcontainer.selectAll('.no-webgl').remove();\n            oldFullLayout._glcanvas = null;\n        }\n    }\n\n    var hasInfoLayer = !!oldFullLayout._infolayer;\n\n    oldLoop:\n    for(i = 0; i < oldFullData.length; i++) {\n        var oldTrace = oldFullData[i];\n        var oldUid = oldTrace.uid;\n\n        for(j = 0; j < newFullData.length; j++) {\n            var newTrace = newFullData[j];\n\n            if(oldUid === newTrace.uid) continue oldLoop;\n        }\n\n        // clean old colorbars\n        if(hasInfoLayer) {\n            oldFullLayout._infolayer.select('.cb' + oldUid).remove();\n        }\n    }\n};\n\nplots.linkSubplots = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var i, j;\n\n    var oldSubplots = oldFullLayout._plots || {};\n    var newSubplots = newFullLayout._plots = {};\n    var newSubplotList = newFullLayout._subplots;\n\n    var mockGd = {\n        _fullData: newFullData,\n        _fullLayout: newFullLayout\n    };\n\n    var ids = newSubplotList.cartesian.concat(newSubplotList.gl2d || []);\n\n    for(i = 0; i < ids.length; i++) {\n        var id = ids[i];\n        var oldSubplot = oldSubplots[id];\n        var xaxis = axisIDs.getFromId(mockGd, id, 'x');\n        var yaxis = axisIDs.getFromId(mockGd, id, 'y');\n        var plotinfo;\n\n        // link or create subplot object\n        if(oldSubplot) {\n            plotinfo = newSubplots[id] = oldSubplot;\n        } else {\n            plotinfo = newSubplots[id] = {};\n            plotinfo.id = id;\n        }\n\n        // add these axis ids to each others' subplot lists\n        xaxis._counterAxes.push(yaxis._id);\n        yaxis._counterAxes.push(xaxis._id);\n        xaxis._subplotsWith.push(id);\n        yaxis._subplotsWith.push(id);\n\n        // update x and y axis layout object refs\n        plotinfo.xaxis = xaxis;\n        plotinfo.yaxis = yaxis;\n\n        // By default, we clip at the subplot level,\n        // but if one trace on a given subplot has *cliponaxis* set to false,\n        // we need to clip at the trace module layer level;\n        // find this out here, once of for all.\n        plotinfo._hasClipOnAxisFalse = false;\n\n        for(j = 0; j < newFullData.length; j++) {\n            var trace = newFullData[j];\n\n            if(\n                trace.xaxis === plotinfo.xaxis._id &&\n                trace.yaxis === plotinfo.yaxis._id &&\n                trace.cliponaxis === false\n            ) {\n                plotinfo._hasClipOnAxisFalse = true;\n                break;\n            }\n        }\n    }\n\n    // while we're at it, link overlaying axes to their main axes and\n    // anchored axes to the axes they're anchored to\n    var axList = axisIDs.list(mockGd, null, true);\n    var ax;\n    for(i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        var mainAx = null;\n\n        if(ax.overlaying) {\n            mainAx = axisIDs.getFromId(mockGd, ax.overlaying);\n\n            // you cannot overlay an axis that's already overlaying another\n            if(mainAx && mainAx.overlaying) {\n                ax.overlaying = false;\n                mainAx = null;\n            }\n        }\n        ax._mainAxis = mainAx || ax;\n\n        /*\n         * For now force overlays to overlay completely... so they\n         * can drag together correctly and share backgrounds.\n         * Later perhaps we make separate axis domain and\n         * tick/line domain or something, so they can still share\n         * the (possibly larger) dragger and background but don't\n         * have to both be drawn over that whole domain\n         */\n        if(mainAx) ax.domain = mainAx.domain.slice();\n\n        ax._anchorAxis = ax.anchor === 'free' ?\n            null :\n            axisIDs.getFromId(mockGd, ax.anchor);\n    }\n\n    // finally, we can find the main subplot for each axis\n    // (on which the ticks & labels are drawn)\n    for(i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        ax._counterAxes.sort(axisIDs.idSort);\n        ax._subplotsWith.sort(Lib.subplotSort);\n        ax._mainSubplot = findMainSubplot(ax, newFullLayout);\n\n        // find \"full\" domain span of counter axes,\n        // this loop can be costly, so only compute it when required\n        if(ax._counterAxes.length && (\n            (ax.spikemode && ax.spikemode.indexOf('across') !== -1) ||\n            (ax.automargin && ax.mirror && ax.anchor !== 'free') ||\n            Registry.getComponentMethod('rangeslider', 'isVisible')(ax)\n        )) {\n            var min = 1;\n            var max = 0;\n            for(j = 0; j < ax._counterAxes.length; j++) {\n                var ax2 = axisIDs.getFromId(mockGd, ax._counterAxes[j]);\n                min = Math.min(min, ax2.domain[0]);\n                max = Math.max(max, ax2.domain[1]);\n            }\n            if(min < max) {\n                ax._counterDomainMin = min;\n                ax._counterDomainMax = max;\n            }\n        }\n    }\n};\n\nfunction findMainSubplot(ax, fullLayout) {\n    var mockGd = {_fullLayout: fullLayout};\n\n    var isX = ax._id.charAt(0) === 'x';\n    var anchorAx = ax._mainAxis._anchorAxis;\n    var mainSubplotID = '';\n    var nextBestMainSubplotID = '';\n    var anchorID = '';\n\n    // First try the main ID with the anchor\n    if(anchorAx) {\n        anchorID = anchorAx._mainAxis._id;\n        mainSubplotID = isX ? (ax._id + anchorID) : (anchorID + ax._id);\n    }\n\n    // Then look for a subplot with the counteraxis overlaying the anchor\n    // If that fails just use the first subplot including this axis\n    if(!mainSubplotID || !fullLayout._plots[mainSubplotID]) {\n        mainSubplotID = '';\n\n        var counterIDs = ax._counterAxes;\n        for(var j = 0; j < counterIDs.length; j++) {\n            var counterPart = counterIDs[j];\n            var id = isX ? (ax._id + counterPart) : (counterPart + ax._id);\n            if(!nextBestMainSubplotID) nextBestMainSubplotID = id;\n            var counterAx = axisIDs.getFromId(mockGd, counterPart);\n            if(anchorID && counterAx.overlaying === anchorID) {\n                mainSubplotID = id;\n                break;\n            }\n        }\n    }\n\n    return mainSubplotID || nextBestMainSubplotID;\n}\n\n// This function clears any trace attributes with valType: color and\n// no set dflt filed in the plot schema. This is needed because groupby (which\n// is the only transform for which this currently applies) supplies parent\n// trace defaults, then expanded trace defaults. The result is that `null`\n// colors are default-supplied and inherited as a color instead of a null.\n// The result is that expanded trace default colors have no effect, with\n// the final result that groups are indistinguishable. This function clears\n// those colors so that individual groupby groups get unique colors.\nplots.clearExpandedTraceDefaultColors = function(trace) {\n    var colorAttrs, path, i;\n\n    // This uses weird closure state in order to satisfy the linter rule\n    // that we can't create functions in a loop.\n    function locateColorAttrs(attr, attrName, attrs, level) {\n        path[level] = attrName;\n        path.length = level + 1;\n        if(attr.valType === 'color' && attr.dflt === undefined) {\n            colorAttrs.push(path.join('.'));\n        }\n    }\n\n    path = [];\n\n    // Get the cached colorAttrs:\n    colorAttrs = trace._module._colorAttrs;\n\n    // Or else compute and cache the colorAttrs on the module:\n    if(!colorAttrs) {\n        trace._module._colorAttrs = colorAttrs = [];\n        PlotSchema.crawl(\n            trace._module.attributes,\n            locateColorAttrs\n        );\n    }\n\n    for(i = 0; i < colorAttrs.length; i++) {\n        var origprop = Lib.nestedProperty(trace, '_input.' + colorAttrs[i]);\n\n        if(!origprop.get()) {\n            Lib.nestedProperty(trace, colorAttrs[i]).set(null);\n        }\n    }\n};\n\n\nplots.supplyDataDefaults = function(dataIn, dataOut, layout, fullLayout) {\n    var modules = fullLayout._modules;\n    var visibleModules = fullLayout._visibleModules;\n    var basePlotModules = fullLayout._basePlotModules;\n    var cnt = 0;\n    var colorCnt = 0;\n\n    var i, fullTrace, trace;\n\n    fullLayout._transformModules = [];\n\n    function pushModule(fullTrace) {\n        dataOut.push(fullTrace);\n\n        var _module = fullTrace._module;\n        if(!_module) return;\n\n        Lib.pushUnique(modules, _module);\n        if(fullTrace.visible === true) Lib.pushUnique(visibleModules, _module);\n        Lib.pushUnique(basePlotModules, fullTrace._module.basePlotModule);\n        cnt++;\n\n        // TODO: do we really want color not to increment for explicitly invisible traces?\n        // This logic is weird, but matches previous behavior: traces that you explicitly\n        // set to visible:false do not increment the color, but traces WE determine to be\n        // empty or invalid (and thus set to visible:false) DO increment color.\n        // I kind of think we should just let all traces increment color, visible or not.\n        // see mock: axes-autotype-empty vs. a test of restyling visible: false that\n        // I can't find right now...\n        if(fullTrace._input.visible !== false) colorCnt++;\n    }\n\n    var carpetIndex = {};\n    var carpetDependents = [];\n    var dataTemplate = (layout.template || {}).data || {};\n    var templater = Template.traceTemplater(dataTemplate);\n\n    for(i = 0; i < dataIn.length; i++) {\n        trace = dataIn[i];\n\n        // reuse uid we may have pulled out of oldFullData\n        // Note: templater supplies trace type\n        fullTrace = templater.newTrace(trace);\n        fullTrace.uid = fullLayout._traceUids[i];\n        plots.supplyTraceDefaults(trace, fullTrace, colorCnt, fullLayout, i);\n\n        fullTrace.index = i;\n        fullTrace._input = trace;\n        fullTrace._expandedIndex = cnt;\n\n        if(fullTrace.transforms && fullTrace.transforms.length) {\n            var sdInvisible = trace.visible !== false && fullTrace.visible === false;\n\n            var expandedTraces = applyTransforms(fullTrace, dataOut, layout, fullLayout);\n\n            for(var j = 0; j < expandedTraces.length; j++) {\n                var expandedTrace = expandedTraces[j];\n\n                // No further templating during transforms.\n                var fullExpandedTrace = {\n                    _template: fullTrace._template,\n                    type: fullTrace.type,\n                    // set uid using parent uid and expanded index\n                    // to promote consistency between update calls\n                    uid: fullTrace.uid + j\n                };\n\n                // If the first supplyDefaults created `visible: false`,\n                // clear it before running supplyDefaults a second time,\n                // because sometimes there are items we still want to coerce\n                // inside trace modules before determining that the trace is\n                // again `visible: false`, for example partial visibilities\n                // in `splom` traces.\n                if(sdInvisible && expandedTrace.visible === false) {\n                    delete expandedTrace.visible;\n                }\n\n                plots.supplyTraceDefaults(expandedTrace, fullExpandedTrace, cnt, fullLayout, i);\n\n                // relink private (i.e. underscore) keys expanded trace to full expanded trace so\n                // that transform supply-default methods can set _ keys for future use.\n                relinkPrivateKeys(fullExpandedTrace, expandedTrace);\n\n                // add info about parent data trace\n                fullExpandedTrace.index = i;\n                fullExpandedTrace._input = trace;\n                fullExpandedTrace._fullInput = fullTrace;\n\n                // add info about the expanded data\n                fullExpandedTrace._expandedIndex = cnt;\n                fullExpandedTrace._expandedInput = expandedTrace;\n\n                pushModule(fullExpandedTrace);\n            }\n        } else {\n            // add identify refs for consistency with transformed traces\n            fullTrace._fullInput = fullTrace;\n            fullTrace._expandedInput = fullTrace;\n\n            pushModule(fullTrace);\n        }\n\n        if(Registry.traceIs(fullTrace, 'carpetAxis')) {\n            carpetIndex[fullTrace.carpet] = fullTrace;\n        }\n\n        if(Registry.traceIs(fullTrace, 'carpetDependent')) {\n            carpetDependents.push(i);\n        }\n    }\n\n    for(i = 0; i < carpetDependents.length; i++) {\n        fullTrace = dataOut[carpetDependents[i]];\n\n        if(!fullTrace.visible) continue;\n\n        var carpetAxis = carpetIndex[fullTrace.carpet];\n        fullTrace._carpet = carpetAxis;\n\n        if(!carpetAxis || !carpetAxis.visible) {\n            fullTrace.visible = false;\n            continue;\n        }\n\n        fullTrace.xaxis = carpetAxis.xaxis;\n        fullTrace.yaxis = carpetAxis.yaxis;\n    }\n};\n\nplots.supplyAnimationDefaults = function(opts) {\n    opts = opts || {};\n    var i;\n    var optsOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts || {}, optsOut, animationAttrs, attr, dflt);\n    }\n\n    coerce('mode');\n    coerce('direction');\n    coerce('fromcurrent');\n\n    if(Array.isArray(opts.frame)) {\n        optsOut.frame = [];\n        for(i = 0; i < opts.frame.length; i++) {\n            optsOut.frame[i] = plots.supplyAnimationFrameDefaults(opts.frame[i] || {});\n        }\n    } else {\n        optsOut.frame = plots.supplyAnimationFrameDefaults(opts.frame || {});\n    }\n\n    if(Array.isArray(opts.transition)) {\n        optsOut.transition = [];\n        for(i = 0; i < opts.transition.length; i++) {\n            optsOut.transition[i] = plots.supplyAnimationTransitionDefaults(opts.transition[i] || {});\n        }\n    } else {\n        optsOut.transition = plots.supplyAnimationTransitionDefaults(opts.transition || {});\n    }\n\n    return optsOut;\n};\n\nplots.supplyAnimationFrameDefaults = function(opts) {\n    var optsOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts || {}, optsOut, animationAttrs.frame, attr, dflt);\n    }\n\n    coerce('duration');\n    coerce('redraw');\n\n    return optsOut;\n};\n\nplots.supplyAnimationTransitionDefaults = function(opts) {\n    var optsOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts || {}, optsOut, animationAttrs.transition, attr, dflt);\n    }\n\n    coerce('duration');\n    coerce('easing');\n\n    return optsOut;\n};\n\nplots.supplyFrameDefaults = function(frameIn) {\n    var frameOut = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(frameIn, frameOut, frameAttrs, attr, dflt);\n    }\n\n    coerce('group');\n    coerce('name');\n    coerce('traces');\n    coerce('baseframe');\n    coerce('data');\n    coerce('layout');\n\n    return frameOut;\n};\n\nplots.supplyTraceDefaults = function(traceIn, traceOut, colorIndex, layout, traceInIndex) {\n    var colorway = layout.colorway || Color.defaults;\n    var defaultColor = colorway[colorIndex % colorway.length];\n\n    var i;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, plots.attributes, attr, dflt);\n    }\n\n    var visible = coerce('visible');\n\n    coerce('type');\n    coerce('name', layout._traceWord + ' ' + traceInIndex);\n\n    coerce('uirevision', layout.uirevision);\n\n    // we want even invisible traces to make their would-be subplots visible\n    // so coerce the subplot id(s) now no matter what\n    var _module = plots.getModule(traceOut);\n\n    traceOut._module = _module;\n    if(_module) {\n        var basePlotModule = _module.basePlotModule;\n        var subplotAttr = basePlotModule.attr;\n        var subplotAttrs = basePlotModule.attributes;\n        if(subplotAttr && subplotAttrs) {\n            var subplots = layout._subplots;\n            var subplotId = '';\n\n            // TODO - currently if we draw an empty gl2d subplot, it draws\n            // nothing then gets stuck and you can't get it back without newPlot\n            // sort this out in the regl refactor? but for now just drop empty gl2d subplots\n            if(basePlotModule.name !== 'gl2d' || visible) {\n                if(Array.isArray(subplotAttr)) {\n                    for(i = 0; i < subplotAttr.length; i++) {\n                        var attri = subplotAttr[i];\n                        var vali = Lib.coerce(traceIn, traceOut, subplotAttrs, attri);\n\n                        if(subplots[attri]) Lib.pushUnique(subplots[attri], vali);\n                        subplotId += vali;\n                    }\n                } else {\n                    subplotId = Lib.coerce(traceIn, traceOut, subplotAttrs, subplotAttr);\n                }\n\n                if(subplots[basePlotModule.name]) {\n                    Lib.pushUnique(subplots[basePlotModule.name], subplotId);\n                }\n            }\n        }\n    }\n\n    if(visible) {\n        coerce('customdata');\n        coerce('ids');\n        coerce('meta');\n\n        if(Registry.traceIs(traceOut, 'showLegend')) {\n            traceOut._dfltShowLegend = true;\n            coerce('showlegend');\n            coerce('legendgroup');\n        } else {\n            traceOut._dfltShowLegend = false;\n        }\n\n        if(_module) {\n            _module.supplyDefaults(traceIn, traceOut, defaultColor, layout);\n        }\n\n        if(!Registry.traceIs(traceOut, 'noOpacity')) {\n            coerce('opacity');\n        }\n\n        if(Registry.traceIs(traceOut, 'notLegendIsolatable')) {\n            // This clears out the legendonly state for traces like carpet that\n            // cannot be isolated in the legend\n            traceOut.visible = !!traceOut.visible;\n        }\n\n        if(!Registry.traceIs(traceOut, 'noHover')) {\n            if(!traceOut.hovertemplate) Lib.coerceHoverinfo(traceIn, traceOut, layout);\n\n            // parcats support hover, but not hoverlabel stylings (yet)\n            if(traceOut.type !== 'parcats') {\n                Registry.getComponentMethod('fx', 'supplyDefaults')(traceIn, traceOut, defaultColor, layout);\n            }\n        }\n\n        if(_module && _module.selectPoints) {\n            coerce('selectedpoints');\n        }\n\n        plots.supplyTransformDefaults(traceIn, traceOut, layout);\n    }\n\n    return traceOut;\n};\n\n/**\n * hasMakesDataTransform: does this trace have a transform that makes its own\n * data, either by grabbing it from somewhere else or by creating it from input\n * parameters? If so, we should still keep going with supplyDefaults\n * even if the trace is invisible, which may just be because it has no data yet.\n */\nfunction hasMakesDataTransform(trace) {\n    var transforms = trace.transforms;\n    if(Array.isArray(transforms) && transforms.length) {\n        for(var i = 0; i < transforms.length; i++) {\n            var ti = transforms[i];\n            var _module = ti._module || transformsRegistry[ti.type];\n            if(_module && _module.makesData) return true;\n        }\n    }\n    return false;\n}\n\nplots.hasMakesDataTransform = hasMakesDataTransform;\n\nplots.supplyTransformDefaults = function(traceIn, traceOut, layout) {\n    // For now we only allow transforms on 1D traces, ie those that specify a _length.\n    // If we were to implement 2D transforms, we'd need to have each transform\n    // describe its own applicability and disable itself when it doesn't apply.\n    // Also allow transforms that make their own data, but not in globalTransforms\n    if(!(traceOut._length || hasMakesDataTransform(traceIn))) return;\n\n    var globalTransforms = layout._globalTransforms || [];\n    var transformModules = layout._transformModules || [];\n\n    if(!Array.isArray(traceIn.transforms) && globalTransforms.length === 0) return;\n\n    var containerIn = traceIn.transforms || [];\n    var transformList = globalTransforms.concat(containerIn);\n    var containerOut = traceOut.transforms = [];\n\n    for(var i = 0; i < transformList.length; i++) {\n        var transformIn = transformList[i];\n        var type = transformIn.type;\n        var _module = transformsRegistry[type];\n        var transformOut;\n\n        /*\n         * Supply defaults may run twice. First pass runs all supply defaults steps\n         * and adds the _module to any output transforms.\n         * If transforms exist another pass is run so that any generated traces also\n         * go through supply defaults. This has the effect of rerunning\n         * supplyTransformDefaults. If the transform does not have a `transform`\n         * function it could not have generated any new traces and the second stage\n         * is unnecessary. We detect this case with the following variables.\n         */\n        var isFirstStage = !(transformIn._module && transformIn._module === _module);\n        var doLaterStages = _module && typeof _module.transform === 'function';\n\n        if(!_module) Lib.warn('Unrecognized transform type ' + type + '.');\n\n        if(_module && _module.supplyDefaults && (isFirstStage || doLaterStages)) {\n            transformOut = _module.supplyDefaults(transformIn, traceOut, layout, traceIn);\n            transformOut.type = type;\n            transformOut._module = _module;\n\n            Lib.pushUnique(transformModules, _module);\n        } else {\n            transformOut = Lib.extendFlat({}, transformIn);\n        }\n\n        containerOut.push(transformOut);\n    }\n};\n\nfunction applyTransforms(fullTrace, fullData, layout, fullLayout) {\n    var container = fullTrace.transforms;\n    var dataOut = [fullTrace];\n\n    for(var i = 0; i < container.length; i++) {\n        var transform = container[i];\n        var _module = transformsRegistry[transform.type];\n\n        if(_module && _module.transform) {\n            dataOut = _module.transform(dataOut, {\n                transform: transform,\n                fullTrace: fullTrace,\n                fullData: fullData,\n                layout: layout,\n                fullLayout: fullLayout,\n                transformIndex: i\n            });\n        }\n    }\n\n    return dataOut;\n}\n\nplots.supplyLayoutGlobalDefaults = function(layoutIn, layoutOut, formatObj) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(layoutIn, layoutOut, plots.layoutAttributes, attr, dflt);\n    }\n\n    var template = layoutIn.template;\n    if(Lib.isPlainObject(template)) {\n        layoutOut.template = template;\n        layoutOut._template = template.layout;\n        layoutOut._dataTemplate = template.data;\n    }\n\n    var globalFont = Lib.coerceFont(coerce, 'font');\n\n    coerce('title.text', layoutOut._dfltTitle.plot);\n\n    Lib.coerceFont(coerce, 'title.font', {\n        family: globalFont.family,\n        size: Math.round(globalFont.size * 1.4),\n        color: globalFont.color\n    });\n\n    coerce('title.xref');\n    coerce('title.yref');\n    coerce('title.x');\n    coerce('title.y');\n    coerce('title.xanchor');\n    coerce('title.yanchor');\n    coerce('title.pad.t');\n    coerce('title.pad.r');\n    coerce('title.pad.b');\n    coerce('title.pad.l');\n\n    // Make sure that autosize is defaulted to *true*\n    // on layouts with no set width and height for backward compatibly,\n    // in particular https://plot.ly/javascript/responsive-fluid-layout/\n    //\n    // Before https://github.com/plotly/plotly.js/pull/635 ,\n    // layouts with no set width and height were set temporary set to 'initial'\n    // to pass through the autosize routine\n    //\n    // This behavior is subject to change in v2.\n    coerce('autosize', !(layoutIn.width && layoutIn.height));\n\n    coerce('width');\n    coerce('height');\n    coerce('margin.l');\n    coerce('margin.r');\n    coerce('margin.t');\n    coerce('margin.b');\n    coerce('margin.pad');\n    coerce('margin.autoexpand');\n\n    if(layoutIn.width && layoutIn.height) plots.sanitizeMargins(layoutOut);\n\n    Registry.getComponentMethod('grid', 'sizeDefaults')(layoutIn, layoutOut);\n\n    coerce('paper_bgcolor');\n\n    coerce('separators', formatObj.decimal + formatObj.thousands);\n    coerce('hidesources');\n\n    coerce('colorway');\n\n    coerce('datarevision');\n    var uirevision = coerce('uirevision');\n    coerce('editrevision', uirevision);\n    coerce('selectionrevision', uirevision);\n\n    coerce('modebar.orientation');\n    coerce('modebar.bgcolor', Color.addOpacity(layoutOut.paper_bgcolor, 0.5));\n    var modebarDefaultColor = Color.contrast(Color.rgb(layoutOut.modebar.bgcolor));\n    coerce('modebar.color', Color.addOpacity(modebarDefaultColor, 0.3));\n    coerce('modebar.activecolor', Color.addOpacity(modebarDefaultColor, 0.7));\n    coerce('modebar.uirevision', uirevision);\n\n    coerce('meta');\n\n    // do not include defaults in fullLayout when users do not set transition\n    if(Lib.isPlainObject(layoutIn.transition)) {\n        coerce('transition.duration');\n        coerce('transition.easing');\n        coerce('transition.ordering');\n    }\n\n    Registry.getComponentMethod(\n        'calendars',\n        'handleDefaults'\n    )(layoutIn, layoutOut, 'calendar');\n\n    Registry.getComponentMethod(\n        'fx',\n        'supplyLayoutGlobalDefaults'\n    )(layoutIn, layoutOut, coerce);\n};\n\nplots.plotAutoSize = function plotAutoSize(gd, layout, fullLayout) {\n    var context = gd._context || {};\n    var frameMargins = context.frameMargins;\n    var newWidth;\n    var newHeight;\n\n    var isPlotDiv = Lib.isPlotDiv(gd);\n\n    if(isPlotDiv) gd.emit('plotly_autosize');\n\n    // embedded in an iframe - just take the full iframe size\n    // if we get to this point, with no aspect ratio restrictions\n    if(context.fillFrame) {\n        newWidth = window.innerWidth;\n        newHeight = window.innerHeight;\n\n        // somehow we get a few extra px height sometimes...\n        // just hide it\n        document.body.style.overflow = 'hidden';\n    } else {\n        // plotly.js - let the developers do what they want, either\n        // provide height and width for the container div,\n        // specify size in layout, or take the defaults,\n        // but don't enforce any ratio restrictions\n        var computedStyle = isPlotDiv ? window.getComputedStyle(gd) : {};\n\n        newWidth = parseFloat(computedStyle.width) || parseFloat(computedStyle.maxWidth) || fullLayout.width;\n        newHeight = parseFloat(computedStyle.height) || parseFloat(computedStyle.maxHeight) || fullLayout.height;\n\n        if(isNumeric(frameMargins) && frameMargins > 0) {\n            var factor = 1 - 2 * frameMargins;\n            newWidth = Math.round(factor * newWidth);\n            newHeight = Math.round(factor * newHeight);\n        }\n    }\n\n    var minWidth = plots.layoutAttributes.width.min;\n    var minHeight = plots.layoutAttributes.height.min;\n    if(newWidth < minWidth) newWidth = minWidth;\n    if(newHeight < minHeight) newHeight = minHeight;\n\n    var widthHasChanged = !layout.width &&\n        (Math.abs(fullLayout.width - newWidth) > 1);\n    var heightHasChanged = !layout.height &&\n        (Math.abs(fullLayout.height - newHeight) > 1);\n\n    if(heightHasChanged || widthHasChanged) {\n        if(widthHasChanged) fullLayout.width = newWidth;\n        if(heightHasChanged) fullLayout.height = newHeight;\n    }\n\n    // cache initial autosize value, used in relayout when\n    // width or height values are set to null\n    if(!gd._initialAutoSize) {\n        gd._initialAutoSize = { width: newWidth, height: newHeight };\n    }\n\n    plots.sanitizeMargins(fullLayout);\n};\n\nplots.supplyLayoutModuleDefaults = function(layoutIn, layoutOut, fullData, transitionData) {\n    var componentsRegistry = Registry.componentsRegistry;\n    var basePlotModules = layoutOut._basePlotModules;\n    var component, i, _module;\n\n    var Cartesian = Registry.subplotsRegistry.cartesian;\n\n    // check if any components need to add more base plot modules\n    // that weren't captured by traces\n    for(component in componentsRegistry) {\n        _module = componentsRegistry[component];\n\n        if(_module.includeBasePlot) {\n            _module.includeBasePlot(layoutIn, layoutOut);\n        }\n    }\n\n    // make sure we *at least* have some cartesian axes\n    if(!basePlotModules.length) {\n        basePlotModules.push(Cartesian);\n    }\n\n    // ensure all cartesian axes have at least one subplot\n    if(layoutOut._has('cartesian')) {\n        Registry.getComponentMethod('grid', 'contentDefaults')(layoutIn, layoutOut);\n        Cartesian.finalizeSubplots(layoutIn, layoutOut);\n    }\n\n    // sort subplot lists\n    for(var subplotType in layoutOut._subplots) {\n        layoutOut._subplots[subplotType].sort(Lib.subplotSort);\n    }\n\n    // base plot module layout defaults\n    for(i = 0; i < basePlotModules.length; i++) {\n        _module = basePlotModules[i];\n\n        // e.g. pie does not have a layout-defaults step\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n        }\n    }\n\n    // trace module layout defaults\n    // use _modules rather than _visibleModules so that even\n    // legendonly traces can include settings - eg barmode, which affects\n    // legend.traceorder default value.\n    var modules = layoutOut._modules;\n    for(i = 0; i < modules.length; i++) {\n        _module = modules[i];\n\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n        }\n    }\n\n    // transform module layout defaults\n    var transformModules = layoutOut._transformModules;\n    for(i = 0; i < transformModules.length; i++) {\n        _module = transformModules[i];\n\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData, transitionData);\n        }\n    }\n\n    for(component in componentsRegistry) {\n        _module = componentsRegistry[component];\n\n        if(_module.supplyLayoutDefaults) {\n            _module.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n        }\n    }\n};\n\n// Remove all plotly attributes from a div so it can be replotted fresh\n// TODO: these really need to be encapsulated into a much smaller set...\nplots.purge = function(gd) {\n    // note: we DO NOT remove _context because it doesn't change when we insert\n    // a new plot, and may have been set outside of our scope.\n\n    var fullLayout = gd._fullLayout || {};\n    if(fullLayout._glcontainer !== undefined) {\n        fullLayout._glcontainer.selectAll('.gl-canvas').remove();\n        fullLayout._glcontainer.remove();\n        fullLayout._glcanvas = null;\n    }\n\n    // remove modebar\n    if(fullLayout._modeBar) fullLayout._modeBar.destroy();\n\n    if(gd._transitionData) {\n        // Ensure any dangling callbacks are simply dropped if the plot is purged.\n        // This is more or less only actually important for testing.\n        if(gd._transitionData._interruptCallbacks) {\n            gd._transitionData._interruptCallbacks.length = 0;\n        }\n\n        if(gd._transitionData._animationRaf) {\n            window.cancelAnimationFrame(gd._transitionData._animationRaf);\n        }\n    }\n\n    // remove any planned throttles\n    Lib.clearThrottle();\n\n    // remove responsive handler\n    Lib.clearResponsive(gd);\n\n    // data and layout\n    delete gd.data;\n    delete gd.layout;\n    delete gd._fullData;\n    delete gd._fullLayout;\n    delete gd.calcdata;\n    delete gd.framework;\n    delete gd.empty;\n\n    delete gd.fid;\n\n    delete gd.undoqueue; // action queue\n    delete gd.undonum;\n    delete gd.autoplay; // are we doing an action that doesn't go in undo queue?\n    delete gd.changed;\n\n    // these get recreated on Plotly.plot anyway, but just to be safe\n    // (and to have a record of them...)\n    delete gd._promises;\n    delete gd._redrawTimer;\n    delete gd._hmlumcount;\n    delete gd._hmpixcount;\n    delete gd._transitionData;\n    delete gd._transitioning;\n    delete gd._initialAutoSize;\n    delete gd._transitioningWithDuration;\n\n    // created during certain events, that *should* clean them up\n    // themselves, but may not if there was an error\n    delete gd._dragging;\n    delete gd._dragged;\n    delete gd._dragdata;\n    delete gd._hoverdata;\n    delete gd._snapshotInProgress;\n    delete gd._editing;\n    delete gd._mouseDownTime;\n    delete gd._legendMouseDownTime;\n\n    // remove all event listeners\n    if(gd.removeAllListeners) gd.removeAllListeners();\n};\n\nplots.style = function(gd) {\n    var _modules = gd._fullLayout._visibleModules;\n    var styleModules = [];\n    var i;\n\n    // some trace modules reuse the same style method,\n    // make sure to not unnecessary call them multiple times.\n\n    for(i = 0; i < _modules.length; i++) {\n        var _module = _modules[i];\n        if(_module.style) {\n            Lib.pushUnique(styleModules, _module.style);\n        }\n    }\n\n    for(i = 0; i < styleModules.length; i++) {\n        styleModules[i](gd);\n    }\n};\n\nplots.sanitizeMargins = function(fullLayout) {\n    // polar doesn't do margins...\n    if(!fullLayout || !fullLayout.margin) return;\n\n    var width = fullLayout.width;\n    var height = fullLayout.height;\n    var margin = fullLayout.margin;\n    var plotWidth = width - (margin.l + margin.r);\n    var plotHeight = height - (margin.t + margin.b);\n    var correction;\n\n    // if margin.l + margin.r = 0 then plotWidth > 0\n    // as width >= 10 by supplyDefaults\n    // similarly for margin.t + margin.b\n\n    if(plotWidth < 0) {\n        correction = (width - 1) / (margin.l + margin.r);\n        margin.l = Math.floor(correction * margin.l);\n        margin.r = Math.floor(correction * margin.r);\n    }\n\n    if(plotHeight < 0) {\n        correction = (height - 1) / (margin.t + margin.b);\n        margin.t = Math.floor(correction * margin.t);\n        margin.b = Math.floor(correction * margin.b);\n    }\n};\n\nplots.clearAutoMarginIds = function(gd) {\n    gd._fullLayout._pushmarginIds = {};\n};\n\nplots.allowAutoMargin = function(gd, id) {\n    gd._fullLayout._pushmarginIds[id] = 1;\n};\n\nfunction initMargins(fullLayout) {\n    var margin = fullLayout.margin;\n\n    if(!fullLayout._size) {\n        var gs = fullLayout._size = {\n            l: Math.round(margin.l),\n            r: Math.round(margin.r),\n            t: Math.round(margin.t),\n            b: Math.round(margin.b),\n            p: Math.round(margin.pad)\n        };\n        gs.w = Math.round(fullLayout.width) - gs.l - gs.r;\n        gs.h = Math.round(fullLayout.height) - gs.t - gs.b;\n    }\n    if(!fullLayout._pushmargin) fullLayout._pushmargin = {};\n    if(!fullLayout._pushmarginIds) fullLayout._pushmarginIds = {};\n}\n\n/**\n * autoMargin: called by components that may need to expand the margins to\n * be rendered on-plot.\n *\n * @param {DOM element} gd\n * @param {string} id - an identifier unique (within this plot) to this object,\n *     so we can remove a previous margin expansion from the same object.\n * @param {object} o - the margin requirements of this object, or omit to delete\n *     this entry (like if it's hidden). Keys are:\n *     x, y: plot fraction of the anchor point.\n *     xl, xr, yt, yb: if the object has an extent defined in plot fraction,\n *         you can specify both edges as plot fractions in each dimension\n *     l, r, t, b: the pixels to pad past the plot fraction x[l|r] and y[t|b]\n *     pad: extra pixels to add in all directions, default 12 (why?)\n */\nplots.autoMargin = function(gd, id, o) {\n    var fullLayout = gd._fullLayout;\n\n    var pushMargin = fullLayout._pushmargin;\n    var pushMarginIds = fullLayout._pushmarginIds;\n\n    if(fullLayout.margin.autoexpand !== false) {\n        if(!o) {\n            delete pushMargin[id];\n            delete pushMarginIds[id];\n        } else {\n            var pad = o.pad;\n            if(pad === undefined) {\n                var margin = fullLayout.margin;\n                // if no explicit pad is given, use 12px unless there's a\n                // specified margin that's smaller than that\n                pad = Math.min(12, margin.l, margin.r, margin.t, margin.b);\n            }\n\n            // if the item is too big, just give it enough automargin to\n            // make sure you can still grab it and bring it back\n            if(o.l + o.r > fullLayout.width * 0.5) {\n                Lib.log('Margin push', id, 'is too big in x, dropping');\n                o.l = o.r = 0;\n            }\n            if(o.b + o.t > fullLayout.height * 0.5) {\n                Lib.log('Margin push', id, 'is too big in y, dropping');\n                o.b = o.t = 0;\n            }\n\n            var xl = o.xl !== undefined ? o.xl : o.x;\n            var xr = o.xr !== undefined ? o.xr : o.x;\n            var yt = o.yt !== undefined ? o.yt : o.y;\n            var yb = o.yb !== undefined ? o.yb : o.y;\n\n            pushMargin[id] = {\n                l: {val: xl, size: o.l + pad},\n                r: {val: xr, size: o.r + pad},\n                b: {val: yb, size: o.b + pad},\n                t: {val: yt, size: o.t + pad}\n            };\n            pushMarginIds[id] = 1;\n        }\n\n        if(!fullLayout._replotting) {\n            return plots.doAutoMargin(gd);\n        }\n    }\n};\n\nplots.doAutoMargin = function(gd) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout._size) fullLayout._size = {};\n    initMargins(fullLayout);\n\n    var gs = fullLayout._size;\n    var margin = fullLayout.margin;\n    var oldMargins = Lib.extendFlat({}, gs);\n\n    // adjust margins for outside components\n    // fullLayout.margin is the requested margin,\n    // fullLayout._size has margins and plotsize after adjustment\n    var ml = margin.l;\n    var mr = margin.r;\n    var mt = margin.t;\n    var mb = margin.b;\n    var width = fullLayout.width;\n    var height = fullLayout.height;\n    var pushMargin = fullLayout._pushmargin;\n    var pushMarginIds = fullLayout._pushmarginIds;\n\n    if(fullLayout.margin.autoexpand !== false) {\n        for(var k in pushMargin) {\n            if(!pushMarginIds[k]) delete pushMargin[k];\n        }\n\n        // fill in the requested margins\n        pushMargin.base = {\n            l: {val: 0, size: ml},\n            r: {val: 1, size: mr},\n            t: {val: 1, size: mt},\n            b: {val: 0, size: mb}\n        };\n\n        // now cycle through all the combinations of l and r\n        // (and t and b) to find the required margins\n\n        for(var k1 in pushMargin) {\n            var pushleft = pushMargin[k1].l || {};\n            var pushbottom = pushMargin[k1].b || {};\n            var fl = pushleft.val;\n            var pl = pushleft.size;\n            var fb = pushbottom.val;\n            var pb = pushbottom.size;\n\n            for(var k2 in pushMargin) {\n                if(isNumeric(pl) && pushMargin[k2].r) {\n                    var fr = pushMargin[k2].r.val;\n                    var pr = pushMargin[k2].r.size;\n\n                    if(fr > fl) {\n                        var newL = (pl * fr + (pr - width) * fl) / (fr - fl);\n                        var newR = (pr * (1 - fl) + (pl - width) * (1 - fr)) / (fr - fl);\n                        if(newL >= 0 && newR >= 0 && width - (newL + newR) > 0 && newL + newR > ml + mr) {\n                            ml = newL;\n                            mr = newR;\n                        }\n                    }\n                }\n\n                if(isNumeric(pb) && pushMargin[k2].t) {\n                    var ft = pushMargin[k2].t.val;\n                    var pt = pushMargin[k2].t.size;\n\n                    if(ft > fb) {\n                        var newB = (pb * ft + (pt - height) * fb) / (ft - fb);\n                        var newT = (pt * (1 - fb) + (pb - height) * (1 - ft)) / (ft - fb);\n                        if(newB >= 0 && newT >= 0 && height - (newT + newB) > 0 && newB + newT > mb + mt) {\n                            mb = newB;\n                            mt = newT;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    gs.l = Math.round(ml);\n    gs.r = Math.round(mr);\n    gs.t = Math.round(mt);\n    gs.b = Math.round(mb);\n    gs.p = Math.round(margin.pad);\n    gs.w = Math.round(width) - gs.l - gs.r;\n    gs.h = Math.round(height) - gs.t - gs.b;\n\n    // if things changed and we're not already redrawing, trigger a redraw\n    if(!fullLayout._replotting && plots.didMarginChange(oldMargins, gs)) {\n        if('_redrawFromAutoMarginCount' in fullLayout) {\n            fullLayout._redrawFromAutoMarginCount++;\n        } else {\n            fullLayout._redrawFromAutoMarginCount = 1;\n        }\n\n        // Always allow at least one redraw and give each margin-push\n        // call 3 loops to converge. Of course, for most cases this way too many,\n        // but let's keep things on the safe side until we fix our\n        // auto-margin pipeline problems:\n        // https://github.com/plotly/plotly.js/issues/2704\n        var maxNumberOfRedraws = 3 * (1 + Object.keys(pushMarginIds).length);\n\n        if(fullLayout._redrawFromAutoMarginCount < maxNumberOfRedraws) {\n            return Registry.call('plot', gd);\n        } else {\n            Lib.warn('Too many auto-margin redraws.');\n        }\n    }\n};\n\nvar marginKeys = ['l', 'r', 't', 'b', 'p', 'w', 'h'];\n\nplots.didMarginChange = function(margin0, margin1) {\n    for(var i = 0; i < marginKeys.length; i++) {\n        var k = marginKeys[i];\n        var m0 = margin0[k];\n        var m1 = margin1[k];\n        // use 1px tolerance in case we old/new differ only\n        // by rounding errors, which can lead to infinite loops\n        if(!isNumeric(m0) || Math.abs(m1 - m0) > 1) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * JSONify the graph data and layout\n *\n * This function needs to recurse because some src can be inside\n * sub-objects.\n *\n * It also strips out functions and private (starts with _) elements.\n * Therefore, we can add temporary things to data and layout that don't\n * get saved.\n *\n * @param gd The graphDiv\n * @param {Boolean} dataonly If true, don't return layout.\n * @param {'keepref'|'keepdata'|'keepall'} [mode='keepref'] Filter what's kept\n *      keepref: remove data for which there's a src present\n *          eg if there's xsrc present (and xsrc is well-formed,\n *          ie has : and some chars before it), strip out x\n *      keepdata: remove all src tags, don't remove the data itself\n *      keepall: keep data and src\n * @param {String} output If you specify 'object', the result will not be stringified\n * @param {Boolean} useDefaults If truthy, use _fullLayout and _fullData\n * @returns {Object|String}\n */\nplots.graphJson = function(gd, dataonly, mode, output, useDefaults) {\n    // if the defaults aren't supplied yet, we need to do that...\n    if((useDefaults && dataonly && !gd._fullData) ||\n            (useDefaults && !dataonly && !gd._fullLayout)) {\n        plots.supplyDefaults(gd);\n    }\n\n    var data = (useDefaults) ? gd._fullData : gd.data;\n    var layout = (useDefaults) ? gd._fullLayout : gd.layout;\n    var frames = (gd._transitionData || {})._frames;\n\n    function stripObj(d) {\n        if(typeof d === 'function') {\n            return null;\n        }\n        if(Lib.isPlainObject(d)) {\n            var o = {};\n            var v, src;\n            for(v in d) {\n                // remove private elements and functions\n                // _ is for private, [ is a mistake ie [object Object]\n                if(typeof d[v] === 'function' ||\n                        ['_', '['].indexOf(v.charAt(0)) !== -1) {\n                    continue;\n                }\n\n                // look for src/data matches and remove the appropriate one\n                if(mode === 'keepdata') {\n                    // keepdata: remove all ...src tags\n                    if(v.substr(v.length - 3) === 'src') {\n                        continue;\n                    }\n                } else if(mode === 'keepstream') {\n                    // keep sourced data if it's being streamed.\n                    // similar to keepref, but if the 'stream' object exists\n                    // in a trace, we will keep the data array.\n                    src = d[v + 'src'];\n                    if(typeof src === 'string' && src.indexOf(':') > 0) {\n                        if(!Lib.isPlainObject(d.stream)) {\n                            continue;\n                        }\n                    }\n                } else if(mode !== 'keepall') {\n                    // keepref: remove sourced data but only\n                    // if the source tag is well-formed\n                    src = d[v + 'src'];\n                    if(typeof src === 'string' && src.indexOf(':') > 0) {\n                        continue;\n                    }\n                }\n\n                // OK, we're including this... recurse into it\n                o[v] = stripObj(d[v]);\n            }\n            return o;\n        }\n\n        if(Array.isArray(d)) {\n            return d.map(stripObj);\n        }\n\n        if(Lib.isTypedArray(d)) {\n            return Lib.simpleMap(d, Lib.identity);\n        }\n\n        // convert native dates to date strings...\n        // mostly for external users exporting to plotly\n        if(Lib.isJSDate(d)) return Lib.ms2DateTimeLocal(+d);\n\n        return d;\n    }\n\n    var obj = {\n        data: (data || []).map(function(v) {\n            var d = stripObj(v);\n            // fit has some little arrays in it that don't contain data,\n            // just fit params and meta\n            if(dataonly) { delete d.fit; }\n            return d;\n        })\n    };\n    if(!dataonly) { obj.layout = stripObj(layout); }\n\n    if(gd.framework && gd.framework.isPolar) obj = gd.framework.getConfig();\n\n    if(frames) obj.frames = stripObj(frames);\n\n    return (output === 'object') ? obj : JSON.stringify(obj);\n};\n\n/**\n * Modify a keyframe using a list of operations:\n *\n * @param {array of objects} operations\n *      Sequence of operations to be performed on the keyframes\n */\nplots.modifyFrames = function(gd, operations) {\n    var i, op, frame;\n    var _frames = gd._transitionData._frames;\n    var _frameHash = gd._transitionData._frameHash;\n\n    for(i = 0; i < operations.length; i++) {\n        op = operations[i];\n\n        switch(op.type) {\n            // No reason this couldn't exist, but is currently unused/untested:\n            /* case 'rename':\n                frame = _frames[op.index];\n                delete _frameHash[frame.name];\n                _frameHash[op.name] = frame;\n                frame.name = op.name;\n                break;*/\n            case 'replace':\n                frame = op.value;\n                var oldName = (_frames[op.index] || {}).name;\n                var newName = frame.name;\n                _frames[op.index] = _frameHash[newName] = frame;\n\n                if(newName !== oldName) {\n                    // If name has changed in addition to replacement, then update\n                    // the lookup table:\n                    delete _frameHash[oldName];\n                    _frameHash[newName] = frame;\n                }\n\n                break;\n            case 'insert':\n                frame = op.value;\n                _frameHash[frame.name] = frame;\n                _frames.splice(op.index, 0, frame);\n                break;\n            case 'delete':\n                frame = _frames[op.index];\n                delete _frameHash[frame.name];\n                _frames.splice(op.index, 1);\n                break;\n        }\n    }\n\n    return Promise.resolve();\n};\n\n/*\n * Compute a keyframe. Merge a keyframe into its base frame(s) and\n * expand properties.\n *\n * @param {object} frameLookup\n *      An object containing frames keyed by name (i.e. gd._transitionData._frameHash)\n * @param {string} frame\n *      The name of the keyframe to be computed\n *\n * Returns: a new object with the merged content\n */\nplots.computeFrame = function(gd, frameName) {\n    var frameLookup = gd._transitionData._frameHash;\n    var i, traceIndices, traceIndex, destIndex;\n\n    // Null or undefined will fail on .toString(). We'll allow numbers since we\n    // make it clear frames must be given string names, but we'll allow numbers\n    // here since they're otherwise fine for looking up frames as long as they're\n    // properly cast to strings. We really just want to ensure here that this\n    // 1) doesn't fail, and\n    // 2) doens't give an incorrect answer (which String(frameName) would)\n    if(!frameName) {\n        throw new Error('computeFrame must be given a string frame name');\n    }\n\n    var framePtr = frameLookup[frameName.toString()];\n\n    // Return false if the name is invalid:\n    if(!framePtr) {\n        return false;\n    }\n\n    var frameStack = [framePtr];\n    var frameNameStack = [framePtr.name];\n\n    // Follow frame pointers:\n    while(framePtr.baseframe && (framePtr = frameLookup[framePtr.baseframe.toString()])) {\n        // Avoid infinite loops:\n        if(frameNameStack.indexOf(framePtr.name) !== -1) break;\n\n        frameStack.push(framePtr);\n        frameNameStack.push(framePtr.name);\n    }\n\n    // A new object for the merged result:\n    var result = {};\n\n    // Merge, starting with the last and ending with the desired frame:\n    while((framePtr = frameStack.pop())) {\n        if(framePtr.layout) {\n            result.layout = plots.extendLayout(result.layout, framePtr.layout);\n        }\n\n        if(framePtr.data) {\n            if(!result.data) {\n                result.data = [];\n            }\n            traceIndices = framePtr.traces;\n\n            if(!traceIndices) {\n                // If not defined, assume serial order starting at zero\n                traceIndices = [];\n                for(i = 0; i < framePtr.data.length; i++) {\n                    traceIndices[i] = i;\n                }\n            }\n\n            if(!result.traces) {\n                result.traces = [];\n            }\n\n            for(i = 0; i < framePtr.data.length; i++) {\n                // Loop through this frames data, find out where it should go,\n                // and merge it!\n                traceIndex = traceIndices[i];\n                if(traceIndex === undefined || traceIndex === null) {\n                    continue;\n                }\n\n                destIndex = result.traces.indexOf(traceIndex);\n                if(destIndex === -1) {\n                    destIndex = result.data.length;\n                    result.traces[destIndex] = traceIndex;\n                }\n\n                result.data[destIndex] = plots.extendTrace(result.data[destIndex], framePtr.data[i]);\n            }\n        }\n    }\n\n    return result;\n};\n\n/*\n * Recompute the lookup table that maps frame name -> frame object. addFrames/\n * deleteFrames already manages this data one at a time, so the only time this\n * is necessary is if you poke around manually in `gd._transitionData._frames`\n * and create and haven't updated the lookup table.\n */\nplots.recomputeFrameHash = function(gd) {\n    var hash = gd._transitionData._frameHash = {};\n    var frames = gd._transitionData._frames;\n    for(var i = 0; i < frames.length; i++) {\n        var frame = frames[i];\n        if(frame && frame.name) {\n            hash[frame.name] = frame;\n        }\n    }\n};\n\n/**\n * Extend an object, treating container arrays very differently by extracting\n * their contents and merging them separately.\n *\n * This exists so that we can extendDeepNoArrays and avoid stepping into data\n * arrays without knowledge of the plot schema, but so that we may also manually\n * recurse into known container arrays, such as transforms.\n *\n * See extendTrace and extendLayout below for usage.\n */\nplots.extendObjectWithContainers = function(dest, src, containerPaths) {\n    var containerProp, containerVal, i, j, srcProp, destProp, srcContainer, destContainer;\n    var copy = Lib.extendDeepNoArrays({}, src || {});\n    var expandedObj = Lib.expandObjectPaths(copy);\n    var containerObj = {};\n\n    // Step through and extract any container properties. Otherwise extendDeepNoArrays\n    // will clobber any existing properties with an empty array and then supplyDefaults\n    // will reset everything to defaults.\n    if(containerPaths && containerPaths.length) {\n        for(i = 0; i < containerPaths.length; i++) {\n            containerProp = Lib.nestedProperty(expandedObj, containerPaths[i]);\n            containerVal = containerProp.get();\n\n            if(containerVal === undefined) {\n                Lib.nestedProperty(containerObj, containerPaths[i]).set(null);\n            } else {\n                containerProp.set(null);\n                Lib.nestedProperty(containerObj, containerPaths[i]).set(containerVal);\n            }\n        }\n    }\n\n    dest = Lib.extendDeepNoArrays(dest || {}, expandedObj);\n\n    if(containerPaths && containerPaths.length) {\n        for(i = 0; i < containerPaths.length; i++) {\n            srcProp = Lib.nestedProperty(containerObj, containerPaths[i]);\n            srcContainer = srcProp.get();\n\n            if(!srcContainer) continue;\n\n            destProp = Lib.nestedProperty(dest, containerPaths[i]);\n            destContainer = destProp.get();\n\n            if(!Array.isArray(destContainer)) {\n                destContainer = [];\n                destProp.set(destContainer);\n            }\n\n            for(j = 0; j < srcContainer.length; j++) {\n                var srcObj = srcContainer[j];\n\n                if(srcObj === null) destContainer[j] = null;\n                else {\n                    destContainer[j] = plots.extendObjectWithContainers(destContainer[j], srcObj);\n                }\n            }\n\n            destProp.set(destContainer);\n        }\n    }\n\n    return dest;\n};\n\nplots.dataArrayContainers = ['transforms', 'dimensions'];\nplots.layoutArrayContainers = Registry.layoutArrayContainers;\n\n/*\n * Extend a trace definition. This method:\n *\n *  1. directly transfers any array references\n *  2. manually recurses into container arrays like transforms\n *\n * The result is the original object reference with the new contents merged in.\n */\nplots.extendTrace = function(destTrace, srcTrace) {\n    return plots.extendObjectWithContainers(destTrace, srcTrace, plots.dataArrayContainers);\n};\n\n/*\n * Extend a layout definition. This method:\n *\n *  1. directly transfers any array references (not critically important for\n *     layout since there aren't really data arrays)\n *  2. manually recurses into container arrays like annotations\n *\n * The result is the original object reference with the new contents merged in.\n */\nplots.extendLayout = function(destLayout, srcLayout) {\n    return plots.extendObjectWithContainers(destLayout, srcLayout, plots.layoutArrayContainers);\n};\n\n/**\n * Transition to a set of new data and layout properties from Plotly.animate\n *\n * @param {DOM element} gd\n * @param {Object[]} data\n *      an array of data objects following the normal Plotly data definition format\n * @param {Object} layout\n *      a layout object, following normal Plotly layout format\n * @param {Number[]} traces\n *      indices of the corresponding traces specified in `data`\n * @param {Object} frameOpts\n *      options for the frame (i.e. whether to redraw post-transition)\n * @param {Object} transitionOpts\n *      options for the transition\n */\nplots.transition = function(gd, data, layout, traces, frameOpts, transitionOpts) {\n    var opts = {redraw: frameOpts.redraw};\n    var transitionedTraces = {};\n    var axEdits = [];\n\n    opts.prepareFn = function() {\n        var dataLength = Array.isArray(data) ? data.length : 0;\n        var traceIndices = traces.slice(0, dataLength);\n\n        for(var i = 0; i < traceIndices.length; i++) {\n            var traceIdx = traceIndices[i];\n            var trace = gd._fullData[traceIdx];\n            var _module = trace._module;\n\n            // There's nothing to do if this module is not defined:\n            if(!_module) continue;\n\n            // Don't register the trace as transitioned if it doesn't know what to do.\n            // If it *is* registered, it will receive a callback that it's responsible\n            // for calling in order to register the transition as having completed.\n            if(_module.animatable) {\n                var n = _module.basePlotModule.name;\n                if(!transitionedTraces[n]) transitionedTraces[n] = [];\n                transitionedTraces[n].push(traceIdx);\n            }\n\n            gd.data[traceIndices[i]] = plots.extendTrace(gd.data[traceIndices[i]], data[i]);\n        }\n\n        // Follow the same procedure. Clone it so we don't mangle the input, then\n        // expand any object paths so we can merge deep into gd.layout:\n        var layoutUpdate = Lib.expandObjectPaths(Lib.extendDeepNoArrays({}, layout));\n\n        // Before merging though, we need to modify the incoming layout. We only\n        // know how to *transition* layout ranges, so it's imperative that a new\n        // range not be sent to the layout before the transition has started. So\n        // we must remove the things we can transition:\n        var axisAttrRe = /^[xy]axis[0-9]*$/;\n        for(var attr in layoutUpdate) {\n            if(!axisAttrRe.test(attr)) continue;\n            delete layoutUpdate[attr].range;\n        }\n\n        plots.extendLayout(gd.layout, layoutUpdate);\n\n        // Supply defaults after applying the incoming properties. Note that any attempt\n        // to simplify this step and reduce the amount of work resulted in the reconstruction\n        // of essentially the whole supplyDefaults step, so that it seems sensible to just use\n        // supplyDefaults even though it's heavier than would otherwise be desired for\n        // transitions:\n\n        // first delete calcdata so supplyDefaults knows a calc step is coming\n        delete gd.calcdata;\n\n        plots.supplyDefaults(gd);\n        plots.doCalcdata(gd);\n\n        var newLayout = Lib.expandObjectPaths(layout);\n\n        if(newLayout) {\n            var subplots = gd._fullLayout._plots;\n\n            for(var k in subplots) {\n                var plotinfo = subplots[k];\n                var xa = plotinfo.xaxis;\n                var ya = plotinfo.yaxis;\n                var xr0 = xa.range.slice();\n                var yr0 = ya.range.slice();\n\n                var xr1 = null;\n                var yr1 = null;\n                var editX = null;\n                var editY = null;\n\n                if(Array.isArray(newLayout[xa._name + '.range'])) {\n                    xr1 = newLayout[xa._name + '.range'].slice();\n                } else if(Array.isArray((newLayout[xa._name] || {}).range)) {\n                    xr1 = newLayout[xa._name].range.slice();\n                }\n                if(Array.isArray(newLayout[ya._name + '.range'])) {\n                    yr1 = newLayout[ya._name + '.range'].slice();\n                } else if(Array.isArray((newLayout[ya._name] || {}).range)) {\n                    yr1 = newLayout[ya._name].range.slice();\n                }\n\n                if(xr0 && xr1 &&\n                    (xa.r2l(xr0[0]) !== xa.r2l(xr1[0]) || xa.r2l(xr0[1]) !== xa.r2l(xr1[1]))\n                ) {\n                    editX = {xr0: xr0, xr1: xr1};\n                }\n                if(yr0 && yr1 &&\n                    (ya.r2l(yr0[0]) !== ya.r2l(yr1[0]) || ya.r2l(yr0[1]) !== ya.r2l(yr1[1]))\n                ) {\n                    editY = {yr0: yr0, yr1: yr1};\n                }\n\n                if(editX || editY) {\n                    axEdits.push(Lib.extendFlat({plotinfo: plotinfo}, editX, editY));\n                }\n            }\n        }\n\n        return Promise.resolve();\n    };\n\n    opts.runFn = function(makeCallback) {\n        var traceTransitionOpts;\n        var basePlotModules = gd._fullLayout._basePlotModules;\n        var hasAxisTransition = axEdits.length;\n        var i;\n\n        if(layout) {\n            for(i = 0; i < basePlotModules.length; i++) {\n                if(basePlotModules[i].transitionAxes) {\n                    basePlotModules[i].transitionAxes(gd, axEdits, transitionOpts, makeCallback);\n                }\n            }\n        }\n\n        // Here handle the exception that we refuse to animate scales and axes at the same\n        // time. In other words, if there's an axis transition, then set the data transition\n        // to instantaneous.\n        if(hasAxisTransition) {\n            traceTransitionOpts = Lib.extendFlat({}, transitionOpts);\n            traceTransitionOpts.duration = 0;\n            // This means do not transition cartesian traces,\n            // this happens on layout-only (e.g. axis range) animations\n            delete transitionedTraces.cartesian;\n        } else {\n            traceTransitionOpts = transitionOpts;\n        }\n\n        // Note that we pass a callback to *create* the callback that must be invoked on completion.\n        // This is since not all traces know about transitions, so it greatly simplifies matters if\n        // the trace is responsible for creating a callback, if needed, and then executing it when\n        // the time is right.\n        for(var n in transitionedTraces) {\n            var traceIndices = transitionedTraces[n];\n            var _module = gd._fullData[traceIndices[0]]._module;\n            _module.basePlotModule.plot(gd, traceIndices, traceTransitionOpts, makeCallback);\n        }\n    };\n\n    return _transition(gd, transitionOpts, opts);\n};\n\n/**\n * Transition to a set of new data and layout properties from Plotly.react\n *\n * @param {DOM element} gd\n * @param {object} restyleFlags\n * - anim {'all'|'some'}\n * @param {object} relayoutFlags\n * - anim {'all'|'some'}\n * @param {object} oldFullLayout : old (pre Plotly.react) fullLayout\n */\nplots.transitionFromReact = function(gd, restyleFlags, relayoutFlags, oldFullLayout) {\n    var fullLayout = gd._fullLayout;\n    var transitionOpts = fullLayout.transition;\n    var opts = {};\n    var axEdits = [];\n\n    opts.prepareFn = function() {\n        var subplots = fullLayout._plots;\n\n        // no need to redraw at end of transition,\n        // if all changes are animatable\n        opts.redraw = false;\n        if(restyleFlags.anim === 'some') opts.redraw = true;\n        if(relayoutFlags.anim === 'some') opts.redraw = true;\n\n        for(var k in subplots) {\n            var plotinfo = subplots[k];\n            var xa = plotinfo.xaxis;\n            var ya = plotinfo.yaxis;\n            var xr0 = oldFullLayout[xa._name].range.slice();\n            var yr0 = oldFullLayout[ya._name].range.slice();\n            var xr1 = xa.range.slice();\n            var yr1 = ya.range.slice();\n\n            xa.setScale();\n            ya.setScale();\n\n            var editX = null;\n            var editY = null;\n\n            if(xa.r2l(xr0[0]) !== xa.r2l(xr1[0]) || xa.r2l(xr0[1]) !== xa.r2l(xr1[1])) {\n                editX = {xr0: xr0, xr1: xr1};\n            }\n            if(ya.r2l(yr0[0]) !== ya.r2l(yr1[0]) || ya.r2l(yr0[1]) !== ya.r2l(yr1[1])) {\n                editY = {yr0: yr0, yr1: yr1};\n            }\n\n            if(editX || editY) {\n                axEdits.push(Lib.extendFlat({plotinfo: plotinfo}, editX, editY));\n            }\n        }\n\n        return Promise.resolve();\n    };\n\n    opts.runFn = function(makeCallback) {\n        var fullData = gd._fullData;\n        var fullLayout = gd._fullLayout;\n        var basePlotModules = fullLayout._basePlotModules;\n\n        var axisTransitionOpts;\n        var traceTransitionOpts;\n        var transitionedTraces;\n\n        var allTraceIndices = [];\n        for(var i = 0; i < fullData.length; i++) {\n            allTraceIndices.push(i);\n        }\n\n        function transitionAxes() {\n            for(var j = 0; j < basePlotModules.length; j++) {\n                if(basePlotModules[j].transitionAxes) {\n                    basePlotModules[j].transitionAxes(gd, axEdits, axisTransitionOpts, makeCallback);\n                }\n            }\n        }\n\n        function transitionTraces() {\n            for(var j = 0; j < basePlotModules.length; j++) {\n                basePlotModules[j].plot(gd, transitionedTraces, traceTransitionOpts, makeCallback);\n            }\n        }\n\n        if(axEdits.length && restyleFlags.anim) {\n            if(transitionOpts.ordering === 'traces first') {\n                axisTransitionOpts = Lib.extendFlat({}, transitionOpts, {duration: 0});\n                transitionedTraces = allTraceIndices;\n                traceTransitionOpts = transitionOpts;\n                setTimeout(transitionAxes, transitionOpts.duration);\n                transitionTraces();\n            } else {\n                axisTransitionOpts = transitionOpts;\n                transitionedTraces = null;\n                traceTransitionOpts = Lib.extendFlat({}, transitionOpts, {duration: 0});\n                setTimeout(transitionTraces, axisTransitionOpts.duration);\n                transitionAxes();\n            }\n        } else if(axEdits.length) {\n            axisTransitionOpts = transitionOpts;\n            transitionAxes();\n        } else if(restyleFlags.anim) {\n            transitionedTraces = allTraceIndices;\n            traceTransitionOpts = transitionOpts;\n            transitionTraces();\n        }\n    };\n\n    return _transition(gd, transitionOpts, opts);\n};\n\n/**\n * trace/layout transition wrapper that works\n * for transitions initiated by Plotly.animate and Plotly.react.\n *\n * @param {DOM element} gd\n * @param {object} transitionOpts\n * @param {object} opts\n * - redraw {boolean}\n * - prepareFn {function} *should return a Promise*\n * - runFn {function} ran inside executeTransitions\n */\nfunction _transition(gd, transitionOpts, opts) {\n    var aborted = false;\n\n    function executeCallbacks(list) {\n        var p = Promise.resolve();\n        if(!list) return p;\n        while(list.length) {\n            p = p.then((list.shift()));\n        }\n        return p;\n    }\n\n    function flushCallbacks(list) {\n        if(!list) return;\n        while(list.length) {\n            list.shift();\n        }\n    }\n\n    function executeTransitions() {\n        gd.emit('plotly_transitioning', []);\n\n        return new Promise(function(resolve) {\n            // This flag is used to disabled things like autorange:\n            gd._transitioning = true;\n\n            // When instantaneous updates are coming through quickly, it's too much to simply disable\n            // all interaction, so store this flag so we can disambiguate whether mouse interactions\n            // should be fully disabled or not:\n            if(transitionOpts.duration > 0) {\n                gd._transitioningWithDuration = true;\n            }\n\n            // If another transition is triggered, this callback will be executed simply because it's\n            // in the interruptCallbacks queue. If this transition completes, it will instead flush\n            // that queue and forget about this callback.\n            gd._transitionData._interruptCallbacks.push(function() {\n                aborted = true;\n            });\n\n            if(opts.redraw) {\n                gd._transitionData._interruptCallbacks.push(function() {\n                    return Registry.call('redraw', gd);\n                });\n            }\n\n            // Emit this and make sure it happens last:\n            gd._transitionData._interruptCallbacks.push(function() {\n                gd.emit('plotly_transitioninterrupted', []);\n            });\n\n            // Construct callbacks that are executed on transition end. This ensures the d3 transitions\n            // are *complete* before anything else is done.\n            var numCallbacks = 0;\n            var numCompleted = 0;\n            function makeCallback() {\n                numCallbacks++;\n                return function() {\n                    numCompleted++;\n                    // When all are complete, perform a redraw:\n                    if(!aborted && numCompleted === numCallbacks) {\n                        completeTransition(resolve);\n                    }\n                };\n            }\n\n            opts.runFn(makeCallback);\n\n            // If nothing else creates a callback, then this will trigger the completion in the next tick:\n            setTimeout(makeCallback());\n        });\n    }\n\n    function completeTransition(callback) {\n        // This a simple workaround for tests which purge the graph before animations\n        // have completed. That's not a very common case, so this is the simplest\n        // fix.\n        if(!gd._transitionData) return;\n\n        flushCallbacks(gd._transitionData._interruptCallbacks);\n\n        return Promise.resolve().then(function() {\n            if(opts.redraw) {\n                return Registry.call('redraw', gd);\n            }\n        }).then(function() {\n            // Set transitioning false again once the redraw has occurred. This is used, for example,\n            // to prevent the trailing redraw from autoranging:\n            gd._transitioning = false;\n            gd._transitioningWithDuration = false;\n\n            gd.emit('plotly_transitioned', []);\n        }).then(callback);\n    }\n\n    function interruptPreviousTransitions() {\n        // Fail-safe against purged plot:\n        if(!gd._transitionData) return;\n\n        // If a transition is interrupted, set this to false. At the moment, the only thing that would\n        // interrupt a transition is another transition, so that it will momentarily be set to true\n        // again, but this determines whether autorange or dragbox work, so it's for the sake of\n        // cleanliness:\n        gd._transitioning = false;\n\n        return executeCallbacks(gd._transitionData._interruptCallbacks);\n    }\n\n    var seq = [\n        plots.previousPromises,\n        interruptPreviousTransitions,\n        opts.prepareFn,\n        plots.rehover,\n        executeTransitions\n    ];\n\n    var transitionStarting = Lib.syncOrAsync(seq, gd);\n\n    if(!transitionStarting || !transitionStarting.then) {\n        transitionStarting = Promise.resolve();\n    }\n\n    return transitionStarting.then(function() { return gd; });\n}\n\nplots.doCalcdata = function(gd, traces) {\n    var axList = axisIDs.list(gd);\n    var fullData = gd._fullData;\n    var fullLayout = gd._fullLayout;\n\n    var trace, _module, i, j;\n\n    // XXX: Is this correct? Needs a closer look so that *some* traces can be recomputed without\n    // *all* needing doCalcdata:\n    var calcdata = new Array(fullData.length);\n    var oldCalcdata = (gd.calcdata || []).slice();\n    gd.calcdata = calcdata;\n\n    // extra helper variables\n\n    // how many box/violins plots do we have (in case they're grouped)\n    fullLayout._numBoxes = 0;\n    fullLayout._numViolins = 0;\n\n    // initialize violin per-scale-group stats container\n    fullLayout._violinScaleGroupStats = {};\n\n    // for calculating avg luminosity of heatmaps\n    gd._hmpixcount = 0;\n    gd._hmlumcount = 0;\n\n    // for sharing colors across pies / sunbursts / treemap / funnelarea (and for legend)\n    fullLayout._piecolormap = {};\n    fullLayout._sunburstcolormap = {};\n    fullLayout._treemapcolormap = {};\n    fullLayout._funnelareacolormap = {};\n\n    // If traces were specified and this trace was not included,\n    // then transfer it over from the old calcdata:\n    for(i = 0; i < fullData.length; i++) {\n        if(Array.isArray(traces) && traces.indexOf(i) === -1) {\n            calcdata[i] = oldCalcdata[i];\n            continue;\n        }\n    }\n\n    for(i = 0; i < fullData.length; i++) {\n        trace = fullData[i];\n\n        trace._arrayAttrs = PlotSchema.findArrayAttributes(trace);\n\n        // keep track of trace extremes (for autorange) in here\n        trace._extremes = {};\n    }\n\n    // add polar axes to axis list\n    var polarIds = fullLayout._subplots.polar || [];\n    for(i = 0; i < polarIds.length; i++) {\n        axList.push(\n            fullLayout[polarIds[i]].radialaxis,\n            fullLayout[polarIds[i]].angularaxis\n        );\n    }\n\n    var hasCalcTransform = false;\n\n    function transformCalci(i) {\n        trace = fullData[i];\n        _module = trace._module;\n\n        if(trace.visible === true && trace.transforms) {\n            // we need one round of trace module calc before\n            // the calc transform to 'fill in' the categories list\n            // used for example in the data-to-coordinate method\n            if(_module && _module.calc) {\n                var cdi = _module.calc(gd, trace);\n\n                // must clear scene 'batches', so that 2nd\n                // _module.calc call starts from scratch\n                if(cdi[0] && cdi[0].t && cdi[0].t._scene) {\n                    delete cdi[0].t._scene.dirty;\n                }\n            }\n\n            for(j = 0; j < trace.transforms.length; j++) {\n                var transform = trace.transforms[j];\n\n                _module = transformsRegistry[transform.type];\n                if(_module && _module.calcTransform) {\n                    trace._hasCalcTransform = true;\n                    hasCalcTransform = true;\n                    _module.calcTransform(gd, trace, transform);\n                }\n            }\n        }\n    }\n\n    function calci(i, isContainer) {\n        trace = fullData[i];\n        _module = trace._module;\n\n        if(!!_module.isContainer !== isContainer) return;\n\n        var cd = [];\n\n        if(trace.visible === true && trace._length !== 0) {\n            // clear existing ref in case it got relinked\n            delete trace._indexToPoints;\n            // keep ref of index-to-points map object of the *last* enabled transform,\n            // this index-to-points map object is required to determine the calcdata indices\n            // that correspond to input indices (e.g. from 'selectedpoints')\n            var transforms = trace.transforms || [];\n            for(j = transforms.length - 1; j >= 0; j--) {\n                if(transforms[j].enabled) {\n                    trace._indexToPoints = transforms[j]._indexToPoints;\n                    break;\n                }\n            }\n\n            if(_module && _module.calc) {\n                cd = _module.calc(gd, trace);\n            }\n        }\n\n        // Make sure there is a first point.\n        //\n        // This ensures there is a calcdata item for every trace,\n        // even if cartesian logic doesn't handle it (for things like legends).\n        if(!Array.isArray(cd) || !cd[0]) {\n            cd = [{x: BADNUM, y: BADNUM}];\n        }\n\n        // add the trace-wide properties to the first point,\n        // per point properties to every point\n        // t is the holder for trace-wide properties\n        if(!cd[0].t) cd[0].t = {};\n        cd[0].trace = trace;\n\n        calcdata[i] = cd;\n    }\n\n    setupAxisCategories(axList, fullData);\n\n    // 'transform' loop - must calc container traces first\n    // so that if their dependent traces can get transform properly\n    for(i = 0; i < fullData.length; i++) calci(i, true);\n    for(i = 0; i < fullData.length; i++) transformCalci(i);\n\n    // clear stuff that should recomputed in 'regular' loop\n    if(hasCalcTransform) setupAxisCategories(axList, fullData);\n\n    // 'regular' loop - make sure container traces (eg carpet) calc before\n    // contained traces (eg contourcarpet)\n    for(i = 0; i < fullData.length; i++) calci(i, true);\n    for(i = 0; i < fullData.length; i++) calci(i, false);\n\n    doCrossTraceCalc(gd);\n\n    // Sort axis categories per value if specified\n    var sorted = sortAxisCategoriesByValue(axList, gd);\n    if(sorted.length) {\n        // how many box/violins plots do we have (in case they're grouped)\n        fullLayout._numBoxes = 0;\n        fullLayout._numViolins = 0;\n        // If a sort operation was performed, run calc() again\n        for(i = 0; i < sorted.length; i++) calci(sorted[i], true);\n        for(i = 0; i < sorted.length; i++) calci(sorted[i], false);\n        doCrossTraceCalc(gd);\n    }\n\n    Registry.getComponentMethod('fx', 'calc')(gd);\n    Registry.getComponentMethod('errorbars', 'calc')(gd);\n};\n\nvar sortAxisCategoriesByValueRegex = /(total|sum|min|max|mean|median) (ascending|descending)/;\n\nfunction sortAxisCategoriesByValue(axList, gd) {\n    var affectedTraces = [];\n    var i, j, k, l, o;\n\n    function zMapCategory(type, ax, value) {\n        var axLetter = ax._id.charAt(0);\n        if(type === 'histogram2dcontour') {\n            var counterAxLetter = ax._counterAxes[0];\n            var counterAx = axisIDs.getFromId(gd, counterAxLetter);\n\n            var xCategorical = axLetter === 'x' || (counterAxLetter === 'x' && counterAx.type === 'category');\n            var yCategorical = axLetter === 'y' || (counterAxLetter === 'y' && counterAx.type === 'category');\n\n            return function(o, l) {\n                if(o === 0 || l === 0) return -1; // Skip first row and column\n                if(xCategorical && o === value[l].length - 1) return -1;\n                if(yCategorical && l === value.length - 1) return -1;\n\n                return (axLetter === 'y' ? l : o) - 1;\n            };\n        } else {\n            return function(o, l) {\n                return axLetter === 'y' ? l : o;\n            };\n        }\n    }\n\n    var aggFn = {\n        'min': function(values) {return Lib.aggNums(Math.min, null, values);},\n        'max': function(values) {return Lib.aggNums(Math.max, null, values);},\n        'sum': function(values) {return Lib.aggNums(function(a, b) { return a + b;}, null, values);},\n        'total': function(values) {return Lib.aggNums(function(a, b) { return a + b;}, null, values);},\n        'mean': function(values) {return Lib.mean(values);},\n        'median': function(values) {return Lib.median(values);}\n    };\n\n    for(i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n        if(ax.type !== 'category') continue;\n\n        // Order by value\n        var match = ax.categoryorder.match(sortAxisCategoriesByValueRegex);\n        if(match) {\n            var aggregator = match[1];\n            var order = match[2];\n\n            // Store values associated with each category\n            var categoriesValue = [];\n            for(j = 0; j < ax._categories.length; j++) {\n                categoriesValue.push([ax._categories[j], []]);\n            }\n\n            // Collect values across traces\n            for(j = 0; j < ax._traceIndices.length; j++) {\n                var traceIndex = ax._traceIndices[j];\n                var fullTrace = gd._fullData[traceIndex];\n                var axLetter = ax._id.charAt(0);\n\n                // Skip over invisible traces\n                if(fullTrace.visible !== true) continue;\n\n                var type = fullTrace.type;\n                if(Registry.traceIs(fullTrace, 'histogram')) {\n                    delete fullTrace._xautoBinFinished;\n                    delete fullTrace._yautoBinFinished;\n                }\n\n                var cd = gd.calcdata[traceIndex];\n                for(k = 0; k < cd.length; k++) {\n                    var cdi = cd[k];\n                    var cat, catIndex, value;\n\n                    if(type === 'splom') {\n                        // If `splom`, collect values across dimensions\n                        // Find which dimension the current axis is representing\n                        var currentDimensionIndex = fullTrace._axesDim[ax._id];\n\n                        // Apply logic to associated x axis if it's defined\n                        if(axLetter === 'y') {\n                            var associatedXAxisID = fullTrace._diag[currentDimensionIndex][0];\n                            if(associatedXAxisID) ax = gd._fullLayout[axisIDs.id2name(associatedXAxisID)];\n                        }\n\n                        var categories = cdi.trace.dimensions[currentDimensionIndex].values;\n                        for(l = 0; l < categories.length; l++) {\n                            cat = categories[l];\n                            catIndex = ax._categoriesMap[cat];\n\n                            // Collect associated values at index `l` over all other dimensions\n                            for(o = 0; o < cdi.trace.dimensions.length; o++) {\n                                if(o === currentDimensionIndex) continue;\n                                var dimension = cdi.trace.dimensions[o];\n                                categoriesValue[catIndex][1].push(dimension.values[l]);\n                            }\n                        }\n                    } else if(type === 'scattergl') {\n                        // If `scattergl`, collect all values stashed under cdi.t\n                        for(l = 0; l < cdi.t.x.length; l++) {\n                            if(axLetter === 'x') {\n                                cat = cdi.t.x[l];\n                                catIndex = cat;\n                                value = cdi.t.y[l];\n                            }\n\n                            if(axLetter === 'y') {\n                                cat = cdi.t.y[l];\n                                catIndex = cat;\n                                value = cdi.t.x[l];\n                            }\n                            categoriesValue[catIndex][1].push(value);\n                        }\n                        // must clear scene 'batches', so that 2nd\n                        // _module.calc call starts from scratch\n                        if(cdi.t && cdi.t._scene) {\n                            delete cdi.t._scene.dirty;\n                        }\n                    } else if(cdi.hasOwnProperty('z')) {\n                        // If 2dMap, collect values in `z`\n                        value = cdi.z;\n                        var mapping = zMapCategory(fullTrace.type, ax, value);\n\n                        for(l = 0; l < value.length; l++) {\n                            for(o = 0; o < value[l].length; o++) {\n                                catIndex = mapping(o, l);\n                                if(catIndex + 1) categoriesValue[catIndex][1].push(value[l][o]);\n                            }\n                        }\n                    } else {\n                        // For all other 2d cartesian traces\n                        if(axLetter === 'x') {\n                            cat = cdi.p + 1 ? cdi.p : cdi.x;\n                            value = cdi.s || cdi.v || cdi.y;\n                        } else if(axLetter === 'y') {\n                            cat = cdi.p + 1 ? cdi.p : cdi.y;\n                            value = cdi.s || cdi.v || cdi.x;\n                        }\n                        if(!Array.isArray(value)) value = [value];\n                        for(l = 0; l < value.length; l++) {\n                            categoriesValue[cat][1].push(value[l]);\n                        }\n                    }\n                }\n            }\n\n            ax._categoriesValue = categoriesValue;\n\n            var categoriesAggregatedValue = [];\n            for(j = 0; j < categoriesValue.length; j++) {\n                categoriesAggregatedValue.push([\n                    categoriesValue[j][0],\n                    aggFn[aggregator](categoriesValue[j][1])\n                ]);\n            }\n\n            // Sort by aggregated value\n            categoriesAggregatedValue.sort(function(a, b) {\n                return a[1] - b[1];\n            });\n\n            ax._categoriesAggregatedValue = categoriesAggregatedValue;\n\n            // Set new category order\n            ax._initialCategories = categoriesAggregatedValue.map(function(c) {\n                return c[0];\n            });\n\n            // Reverse if descending\n            if(order === 'descending') {\n                ax._initialCategories.reverse();\n            }\n\n            // Sort all matching axes\n            affectedTraces = affectedTraces.concat(ax.sortByInitialCategories());\n        }\n    }\n    return affectedTraces;\n}\n\nfunction setupAxisCategories(axList, fullData) {\n    for(var i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n        ax.clearCalc();\n        if(ax.type === 'multicategory') {\n            ax.setupMultiCategory(fullData);\n        }\n    }\n}\n\nfunction doCrossTraceCalc(gd) {\n    var fullLayout = gd._fullLayout;\n    var modules = fullLayout._visibleModules;\n    var hash = {};\n    var i, j, k;\n\n    // position and range calculations for traces that\n    // depend on each other ie bars (stacked or grouped)\n    // and boxes (grouped) push each other out of the way\n\n    for(j = 0; j < modules.length; j++) {\n        var _module = modules[j];\n        var fn = _module.crossTraceCalc;\n        if(fn) {\n            var spType = _module.basePlotModule.name;\n            if(hash[spType]) {\n                Lib.pushUnique(hash[spType], fn);\n            } else {\n                hash[spType] = [fn];\n            }\n        }\n    }\n\n    for(k in hash) {\n        var methods = hash[k];\n        var subplots = fullLayout._subplots[k];\n\n        if(Array.isArray(subplots)) {\n            for(i = 0; i < subplots.length; i++) {\n                var sp = subplots[i];\n                var spInfo = k === 'cartesian' ?\n                    fullLayout._plots[sp] :\n                    fullLayout[sp];\n\n                for(j = 0; j < methods.length; j++) {\n                    methods[j](gd, spInfo, sp);\n                }\n            }\n        } else {\n            for(j = 0; j < methods.length; j++) {\n                methods[j](gd);\n            }\n        }\n    }\n}\n\nplots.rehover = function(gd) {\n    if(gd._fullLayout._rehover) {\n        gd._fullLayout._rehover();\n    }\n};\n\nplots.redrag = function(gd) {\n    if(gd._fullLayout._redrag) {\n        gd._fullLayout._redrag();\n    }\n};\n\nplots.generalUpdatePerTraceModule = function(gd, subplot, subplotCalcData, subplotLayout) {\n    var traceHashOld = subplot.traceHash;\n    var traceHash = {};\n    var i;\n\n    // build up moduleName -> calcData hash\n    for(i = 0; i < subplotCalcData.length; i++) {\n        var calcTraces = subplotCalcData[i];\n        var trace = calcTraces[0].trace;\n\n        // skip over visible === false traces\n        // as they don't have `_module` ref\n        if(trace.visible) {\n            traceHash[trace.type] = traceHash[trace.type] || [];\n            traceHash[trace.type].push(calcTraces);\n        }\n    }\n\n    // when a trace gets deleted, make sure that its module's\n    // plot method is called so that it is properly\n    // removed from the DOM.\n    for(var moduleNameOld in traceHashOld) {\n        if(!traceHash[moduleNameOld]) {\n            var fakeCalcTrace = traceHashOld[moduleNameOld][0];\n            var fakeTrace = fakeCalcTrace[0].trace;\n\n            fakeTrace.visible = false;\n            traceHash[moduleNameOld] = [fakeCalcTrace];\n        }\n    }\n\n    // call module plot method\n    for(var moduleName in traceHash) {\n        var moduleCalcData = traceHash[moduleName];\n        var _module = moduleCalcData[0][0].trace._module;\n\n        _module.plot(gd, subplot, Lib.filterVisible(moduleCalcData), subplotLayout);\n    }\n\n    // update moduleName -> calcData hash\n    subplot.traceHash = traceHash;\n};\n\nplots.plotBasePlot = function(desiredType, gd, traces, transitionOpts, makeOnCompleteCallback) {\n    var _module = Registry.getModule(desiredType);\n    var cdmodule = getModuleCalcData(gd.calcdata, _module)[0];\n    _module.plot(gd, cdmodule, transitionOpts, makeOnCompleteCallback);\n};\n\nplots.cleanBasePlot = function(desiredType, newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var had = (oldFullLayout._has && oldFullLayout._has(desiredType));\n    var has = (newFullLayout._has && newFullLayout._has(desiredType));\n\n    if(had && !has) {\n        oldFullLayout['_' + desiredType + 'layer'].selectAll('g.trace').remove();\n    }\n};\n"]},"metadata":{},"sourceType":"script"}