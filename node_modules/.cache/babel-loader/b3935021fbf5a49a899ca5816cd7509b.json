{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js\";\nimport { Chart, Tooltip, Axis, Legend, Pie, Coord, StackArea, Line, Bar, Point } from 'viser-react';\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress } from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts';\n\nvar generateDayWiseTimeSeries = function (baseval, count, yrange) {\n  var i = 0;\n  var series = [];\n\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    series.push([x, y]);\n    baseval += 86400000;\n    i++;\n  }\n\n  return series;\n};\n\nclass AnalyticalTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        chart: {\n          stacked: true,\n          events: {\n            selection: function (chart, e) {\n              console.log(new Date(e.xaxis.min));\n            }\n          }\n        },\n        colors: ['#008FFB', '#00E396', '#CED4DC'],\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            opacityFrom: 0.6,\n            opacityTo: 0.8\n          }\n        },\n        legend: {\n          position: 'top',\n          horizontalAlign: 'left'\n        },\n        xaxis: {\n          type: 'datetime'\n        }\n      },\n      series: [{\n        name: 'South',\n        data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {})\n      }, {\n        name: 'North',\n        data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 20\n        })\n      }, {\n        name: 'Central',\n        data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 15\n        })\n      }]\n    };\n  }\n\n  render() {\n    var generateDayWiseTimeSeries = function (baseval, count, yrange) {\n      var i = 0;\n      var series = [];\n\n      while (i < count) {\n        var x = baseval;\n        var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n        series.push([x, y]);\n        baseval += 86400000;\n        i++;\n      }\n\n      return series;\n    };\n\n    return React.createElement(\"div\", {\n      id: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(ReactApexChart, {\n      options: this.state.options,\n      series: this.state.series,\n      type: \"area\",\n      width: \"600\",\n      height: \"350\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default AnalyticalTest;","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js"],"names":["Chart","Tooltip","Axis","Legend","Pie","Coord","StackArea","Line","Bar","Point","React","Row","Col","Card","Button","Icon","Progress","axios","ReactApexChart","generateDayWiseTimeSeries","baseval","count","yrange","i","series","x","y","Math","floor","random","max","min","push","AnalyticalTest","Component","constructor","props","state","options","chart","stacked","events","selection","e","console","log","Date","xaxis","colors","dataLabels","enabled","stroke","curve","fill","type","gradient","opacityFrom","opacityTo","legend","position","horizontalAlign","name","data","getTime","render"],"mappings":";AAEA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4CC,KAA5C,EAAmDC,SAAnD,EAA8DC,IAA9D,EAAoEC,GAApE,EAAyEC,KAAzE,QAAqF,aAArF;AAGA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,QAAvC,QAAuD,MAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAGA,IAAIC,yBAAyB,GAAG,UAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AAC5D,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,SAAOD,CAAC,GAAGF,KAAX,EAAkB;AAChB,QAAII,CAAC,GAAGL,OAAR;AACA,QAAIM,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,MAAM,CAACQ,GAAP,GAAaR,MAAM,CAACS,GAApB,GAA0B,CAA3C,CAAX,IAA4DT,MAAM,CAACS,GAA3E;AAEAP,IAAAA,MAAM,CAACQ,IAAP,CAAY,CAACP,CAAD,EAAIC,CAAJ,CAAZ;AACAN,IAAAA,OAAO,IAAI,QAAX;AACAG,IAAAA,CAAC;AACF;;AACD,SAAOC,MAAP;AACD,CAZL;;AAcI,MAAMS,cAAN,SAA6BvB,KAAK,CAACwB,SAAnC,CAA6C;AAE3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,OAAO,EAAE,IADJ;AAELC,UAAAA,MAAM,EAAE;AACNC,YAAAA,SAAS,EAAE,UAAUH,KAAV,EAAiBI,CAAjB,EAAoB;AAC7BC,cAAAA,OAAO,CAACC,GAAR,CAAY,IAAIC,IAAJ,CAASH,CAAC,CAACI,KAAF,CAAQhB,GAAjB,CAAZ;AACD;AAHK;AAFH,SADA;AASPiB,QAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CATD;AAUPC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AADC,SAVL;AAaPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE;AADD,SAbD;AAgBPC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,UADF;AAEJC,UAAAA,QAAQ,EAAE;AACRC,YAAAA,WAAW,EAAE,GADL;AAERC,YAAAA,SAAS,EAAE;AAFH;AAFN,SAhBC;AAuBPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE,KADJ;AAENC,UAAAA,eAAe,EAAE;AAFX,SAvBD;AA2BPb,QAAAA,KAAK,EAAE;AACLO,UAAAA,IAAI,EAAE;AADD;AA3BA,OADE;AAgCX9B,MAAAA,MAAM,EAAE,CACN;AACEqC,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,IAAI,EAAE3C,yBAAyB,CAAC,IAAI2B,IAAJ,CAAS,iBAAT,EAA4BiB,OAA5B,EAAD,EAAwC,EAAxC,EAA4C,EAA5C;AAFjC,OADM,EAKN;AACEF,QAAAA,IAAI,EAAE,OADR;AAEEC,QAAAA,IAAI,EAAE3C,yBAAyB,CAAC,IAAI2B,IAAJ,CAAS,iBAAT,EAA4BiB,OAA5B,EAAD,EAAwC,EAAxC,EAA4C;AACzEhC,UAAAA,GAAG,EAAE,EADoE;AAEzED,UAAAA,GAAG,EAAE;AAFoE,SAA5C;AAFjC,OALM,EAYN;AACE+B,QAAAA,IAAI,EAAE,SADR;AAEEC,QAAAA,IAAI,EAAE3C,yBAAyB,CAAC,IAAI2B,IAAJ,CAAS,iBAAT,EAA4BiB,OAA5B,EAAD,EAAwC,EAAxC,EAA4C;AACzEhC,UAAAA,GAAG,EAAE,EADoE;AAEzED,UAAAA,GAAG,EAAE;AAFoE,SAA5C;AAFjC,OAZM;AAhCG,KAAb;AAqDD;;AAEDkC,EAAAA,MAAM,GAAG;AAGT,QAAI7C,yBAAyB,GAAG,UAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AAClE,UAAIC,CAAC,GAAG,CAAR;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,aAAOD,CAAC,GAAGF,KAAX,EAAkB;AAChB,YAAII,CAAC,GAAGL,OAAR;AACA,YAAIM,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,MAAM,CAACQ,GAAP,GAAaR,MAAM,CAACS,GAApB,GAA0B,CAA3C,CAAX,IAA4DT,MAAM,CAACS,GAA3E;AAEAP,QAAAA,MAAM,CAACQ,IAAP,CAAY,CAACP,CAAD,EAAIC,CAAJ,CAAZ;AACAN,QAAAA,OAAO,IAAI,QAAX;AACAG,QAAAA,CAAC;AACF;;AACD,aAAOC,MAAP;AACD,KAZC;;AAcE,WAGE;AAAK,MAAA,EAAE,EAAC,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAgB,MAAA,OAAO,EAAE,KAAKa,KAAL,CAAWC,OAApC;AAA6C,MAAA,MAAM,EAAE,KAAKD,KAAL,CAAWb,MAAhE;AAAwE,MAAA,IAAI,EAAC,MAA7E;AAAoF,MAAA,KAAK,EAAC,KAA1F;AAAgG,MAAA,MAAM,EAAC,KAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF;AASD;;AAtF0C;;AA2FjD,eAAeS,cAAf","sourcesContent":["\n\nimport { Chart, Tooltip, Axis, Legend, Pie, Coord, StackArea, Line, Bar, Point} from 'viser-react';\n\n\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress } from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts'\n\n\nvar generateDayWiseTimeSeries = function (baseval, count, yrange) {\n      var i = 0;\n      var series = [];\n      while (i < count) {\n        var x = baseval;\n        var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\n        series.push([x, y]);\n        baseval += 86400000;\n        i++;\n      }\n      return series;\n    }\n\n    class AnalyticalTest extends React.Component {\n\n      constructor(props) {\n        super(props);\n\n        this.state = {\n          options: {\n            chart: {\n              stacked: true,\n              events: {\n                selection: function (chart, e) {\n                  console.log(new Date(e.xaxis.min))\n                }\n              },\n            },\n            colors: ['#008FFB', '#00E396', '#CED4DC'],\n            dataLabels: {\n              enabled: false\n            },\n            stroke: {\n              curve: 'smooth'\n            },\n            fill: {\n              type: 'gradient',\n              gradient: {\n                opacityFrom: 0.6,\n                opacityTo: 0.8,\n              }\n            },\n            legend: {\n              position: 'top',\n              horizontalAlign: 'left'\n            },\n            xaxis: {\n              type: 'datetime'\n            }\n          },\n          series: [\n            {\n              name: 'South',\n              data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {})\n            },\n            {\n              name: 'North',\n              data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n                min: 10,\n                max: 20\n              })\n            },\n            {\n              name: 'Central',\n              data: generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n                min: 10,\n                max: 15\n              })\n            }\n          ],\n        }\n      }\n\n      render() {\n\n\n      var generateDayWiseTimeSeries = function (baseval, count, yrange) {\n      var i = 0;\n      var series = [];\n      while (i < count) {\n        var x = baseval;\n        var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\n        series.push([x, y]);\n        baseval += 86400000;\n        i++;\n      }\n      return series;\n    }\n\n        return (\n\n\n          <div id=\"chart\">\n            <ReactApexChart options={this.state.options} series={this.state.series} type=\"area\" width=\"600\" height=\"350\" />\n          </div>\n\n\n        );\n      }\n    }\n\n\n\nexport default AnalyticalTest;"]},"metadata":{},"sourceType":"module"}