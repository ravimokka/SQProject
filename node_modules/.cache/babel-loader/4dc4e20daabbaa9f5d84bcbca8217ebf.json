{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n/* eslint-disable no-console */\n\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\n\nvar loggers = module.exports = {};\n/**\n * ------------------------------------------\n * debugging tools\n * ------------------------------------------\n */\n\nloggers.log = function () {\n  if (dfltConfig.logging > 1) {\n    var messages = ['LOG:'];\n\n    for (var i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    apply(console.trace || console.log, messages);\n  }\n};\n\nloggers.warn = function () {\n  if (dfltConfig.logging > 0) {\n    var messages = ['WARN:'];\n\n    for (var i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    apply(console.trace || console.log, messages);\n  }\n};\n\nloggers.error = function () {\n  if (dfltConfig.logging > 0) {\n    var messages = ['ERROR:'];\n\n    for (var i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n\n    apply(console.error, messages);\n  }\n};\n/*\n * Robust apply, for IE9 where console.log doesn't support\n * apply like other functions do\n */\n\n\nfunction apply(f, args) {\n  if (f && f.apply) {\n    try {\n      // `this` should always be console, since here we're always\n      // applying a method of the console object.\n      f.apply(console, args);\n      return;\n    } catch (e) {\n      /* in case apply failed, fall back on the code below */\n    }\n  } // no apply - just try calling the function on each arg independently\n\n\n  for (var i = 0; i < args.length; i++) {\n    try {\n      f(args[i]);\n    } catch (e) {\n      // still fails - last resort simple console.log\n      console.log(args[i]);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}