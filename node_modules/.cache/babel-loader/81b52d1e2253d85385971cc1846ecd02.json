{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar plotApi = require('./plot_api');\n\nvar Lib = require('../lib');\n\nvar helpers = require('../snapshot/helpers');\n\nvar toSVG = require('../snapshot/tosvg');\n\nvar svgToImg = require('../snapshot/svgtoimg');\n\nvar attrs = {\n  format: {\n    valType: 'enumerated',\n    values: ['png', 'jpeg', 'webp', 'svg'],\n    dflt: 'png',\n    description: 'Sets the format of exported image.'\n  },\n  width: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image width.', 'Defaults to the value found in `layout.width`', 'If set to *null*, the exported image width will match the current graph width.'].join(' ')\n  },\n  height: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image height.', 'Defaults to the value found in `layout.height`', 'If set to *null*, the exported image height will match the current graph height.'].join(' ')\n  },\n  scale: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: ['Sets a scaling for the generated image.', 'If set, all features of a graphs (e.g. text, line width)', 'are scaled, unlike simply setting', 'a bigger *width* and *height*.'].join(' ')\n  },\n  setBackground: {\n    valType: 'any',\n    dflt: false,\n    description: ['Sets the image background mode.', 'By default, the image background is determined by `layout.paper_bgcolor`,', 'the *transparent* mode.', 'One might consider setting `setBackground` to *opaque*', 'when exporting a *jpeg* image as JPEGs do not support opacity.'].join(' ')\n  },\n  imageDataOnly: {\n    valType: 'boolean',\n    dflt: false,\n    description: ['Determines whether or not the return value is prefixed by', 'the image format\\'s corresponding \\'data:image;\\' spec.'].join(' ')\n  }\n};\n/** Plotly.toImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see above)\n * @return {promise}\n */\n\nfunction toImage(gd, opts) {\n  opts = opts || {};\n  var data;\n  var layout;\n  var config;\n  var fullLayout;\n\n  if (Lib.isPlainObject(gd)) {\n    data = gd.data || [];\n    layout = gd.layout || {};\n    config = gd.config || {};\n    fullLayout = {};\n  } else {\n    gd = Lib.getGraphDiv(gd);\n    data = Lib.extendDeep([], gd.data);\n    layout = Lib.extendDeep({}, gd.layout);\n    config = gd._context;\n    fullLayout = gd._fullLayout || {};\n  }\n\n  function isImpliedOrValid(attr) {\n    return !(attr in opts) || Lib.validate(opts[attr], attrs[attr]);\n  }\n\n  if (!isImpliedOrValid('width') && opts.width !== null || !isImpliedOrValid('height') && opts.height !== null) {\n    throw new Error('Height and width should be pixel values.');\n  }\n\n  if (!isImpliedOrValid('format')) {\n    throw new Error('Image format is not jpeg, png, svg or webp.');\n  }\n\n  var fullOpts = {};\n\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts, fullOpts, attrs, attr, dflt);\n  }\n\n  var format = coerce('format');\n  var width = coerce('width');\n  var height = coerce('height');\n  var scale = coerce('scale');\n  var setBackground = coerce('setBackground');\n  var imageDataOnly = coerce('imageDataOnly'); // put the cloned div somewhere off screen before attaching to DOM\n\n  var clonedGd = document.createElement('div');\n  clonedGd.style.position = 'absolute';\n  clonedGd.style.left = '-5000px';\n  document.body.appendChild(clonedGd); // extend layout with image options\n\n  var layoutImage = Lib.extendFlat({}, layout);\n\n  if (width) {\n    layoutImage.width = width;\n  } else if (opts.width === null && isNumeric(fullLayout.width)) {\n    layoutImage.width = fullLayout.width;\n  }\n\n  if (height) {\n    layoutImage.height = height;\n  } else if (opts.height === null && isNumeric(fullLayout.height)) {\n    layoutImage.height = fullLayout.height;\n  } // extend config for static plot\n\n\n  var configImage = Lib.extendFlat({}, config, {\n    _exportedPlot: true,\n    staticPlot: true,\n    setBackground: setBackground\n  });\n  var redrawFunc = helpers.getRedrawFunc(clonedGd);\n\n  function wait() {\n    return new Promise(function (resolve) {\n      setTimeout(resolve, helpers.getDelay(clonedGd._fullLayout));\n    });\n  }\n\n  function convert() {\n    return new Promise(function (resolve, reject) {\n      var svg = toSVG(clonedGd, format, scale);\n      var width = clonedGd._fullLayout.width;\n      var height = clonedGd._fullLayout.height;\n      plotApi.purge(clonedGd);\n      document.body.removeChild(clonedGd);\n\n      if (format === 'svg') {\n        if (imageDataOnly) {\n          return resolve(svg);\n        } else {\n          return resolve(helpers.encodeSVG(svg));\n        }\n      }\n\n      var canvas = document.createElement('canvas');\n      canvas.id = Lib.randstr();\n      svgToImg({\n        format: format,\n        width: width,\n        height: height,\n        scale: scale,\n        canvas: canvas,\n        svg: svg,\n        // ask svgToImg to return a Promise\n        //  rather than EventEmitter\n        //  leave EventEmitter for backward\n        //  compatibility\n        promise: true\n      }).then(resolve).catch(reject);\n    });\n  }\n\n  function urlToImageData(url) {\n    if (imageDataOnly) {\n      return url.replace(helpers.IMAGE_URL_PREFIX, '');\n    } else {\n      return url;\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    plotApi.plot(clonedGd, data, layoutImage, configImage).then(redrawFunc).then(wait).then(convert).then(function (url) {\n      resolve(urlToImageData(url));\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\nmodule.exports = toImage;","map":null,"metadata":{},"sourceType":"script"}