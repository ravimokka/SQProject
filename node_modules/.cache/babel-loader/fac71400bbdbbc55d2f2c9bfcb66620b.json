{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar FORMAT_LINK = require('../constants/docs').FORMAT_LINK;\n\nvar DATE_FORMAT_LINK = require('../constants/docs').DATE_FORMAT_LINK;\n\nvar templateFormatStringDescription = ['Variables are inserted using %{variable}, for example \"y: %{y}\".', 'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\".', FORMAT_LINK, 'for details on the formatting syntax.', 'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\".', DATE_FORMAT_LINK, 'for details on the date formatting syntax.'].join(' ');\n\nfunction describeVariables(extra) {\n  var descPart = extra.description ? ' ' + extra.description : '';\n  var keys = extra.keys || [];\n\n  if (keys.length > 0) {\n    var quotedKeys = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      quotedKeys[i] = '`' + keys[i] + '`';\n    }\n\n    descPart = descPart + 'Finally, the template string has access to ';\n\n    if (keys.length === 1) {\n      descPart = 'variable ' + quotedKeys[0];\n    } else {\n      descPart = 'variables ' + quotedKeys.slice(0, -1).join(', ') + ' and ' + quotedKeys.slice(-1) + '.';\n    }\n  }\n\n  return descPart;\n}\n\nexports.hovertemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var hovertemplate = {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: opts.editType || 'none',\n    description: ['Template string used for rendering the information that appear on hover box.', 'Note that this will override `hoverinfo`.', templateFormatStringDescription, 'The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plot.ly/javascript/plotlyjs-events/#event-data.', 'Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart, 'Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\".', 'To hide the secondary box completely, use an empty tag `<extra></extra>`.'].join(' ')\n  };\n\n  if (opts.arrayOk !== false) {\n    hovertemplate.arrayOk = true;\n  }\n\n  return hovertemplate;\n};\n\nexports.texttemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var texttemplate = {\n    valType: 'string',\n    role: 'info',\n    dflt: '',\n    editType: opts.editType || 'calc',\n    description: ['Template string used for rendering the information text that appear on points.', 'Note that this will override `textinfo`.', templateFormatStringDescription, 'Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart].join(' ')\n  };\n\n  if (opts.arrayOk !== false) {\n    texttemplate.arrayOk = true;\n  }\n\n  return texttemplate;\n};","map":null,"metadata":{},"sourceType":"script"}