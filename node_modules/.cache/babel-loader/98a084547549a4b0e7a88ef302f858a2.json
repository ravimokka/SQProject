{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar hasColorbar = require('../colorbar/has_colorbar');\n\nvar colorbarDefaults = require('../colorbar/defaults');\n\nvar isValidScale = require('./scales').isValid;\n\nvar traceIs = require('../../registry').traceIs;\n\nfunction npMaybe(parentCont, prefix) {\n  var containerStr = prefix.slice(0, prefix.length - 1);\n  return prefix ? Lib.nestedProperty(parentCont, containerStr).get() || {} : parentCont;\n}\n/**\n * Colorscale / colorbar default handler\n *\n * @param {object} parentContIn : user (input) parent container (e.g. trace or layout coloraxis object)\n * @param {object} parentContOut : full parent container\n * @param {object} layout : (full) layout object\n * @param {fn} coerce : Lib.coerce wrapper\n * @param {object} opts :\n * - prefix {string} : attr string prefix to colorscale container from parent root\n * - cLetter {string} : 'c or 'z' color letter\n */\n\n\nmodule.exports = function colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts) {\n  var prefix = opts.prefix;\n  var cLetter = opts.cLetter;\n  var inTrace = '_module' in parentContOut;\n  var containerIn = npMaybe(parentContIn, prefix);\n  var containerOut = npMaybe(parentContOut, prefix);\n  var template = npMaybe(parentContOut._template || {}, prefix) || {}; // colorScaleDefaults wrapper called if-ever we need to reset the colorscale\n  // attributes for containers that were linked to invalid color axes\n\n  var thisFn = function () {\n    delete parentContIn.coloraxis;\n    delete parentContOut.coloraxis;\n    return colorScaleDefaults(parentContIn, parentContOut, layout, coerce, opts);\n  };\n\n  if (inTrace) {\n    var colorAxes = layout._colorAxes || {};\n    var colorAx = coerce(prefix + 'coloraxis');\n\n    if (colorAx) {\n      var colorbarVisuals = traceIs(parentContOut, 'contour') && Lib.nestedProperty(parentContOut, 'contours.coloring').get() || 'heatmap';\n      var stash = colorAxes[colorAx];\n\n      if (stash) {\n        stash[2].push(thisFn);\n\n        if (stash[0] !== colorbarVisuals) {\n          stash[0] = false;\n          Lib.warn(['Ignoring coloraxis:', colorAx, 'setting', 'as it is linked to incompatible colorscales.'].join(' '));\n        }\n      } else {\n        // stash:\n        // - colorbar visual 'type'\n        // - colorbar options to help in Colorbar.draw\n        // - list of colorScaleDefaults wrapper functions\n        colorAxes[colorAx] = [colorbarVisuals, parentContOut, [thisFn]];\n      }\n\n      return;\n    }\n  }\n\n  var minIn = containerIn[cLetter + 'min'];\n  var maxIn = containerIn[cLetter + 'max'];\n  var validMinMax = isNumeric(minIn) && isNumeric(maxIn) && minIn < maxIn;\n  var auto = coerce(prefix + cLetter + 'auto', !validMinMax);\n\n  if (auto) {\n    coerce(prefix + cLetter + 'mid');\n  } else {\n    coerce(prefix + cLetter + 'min');\n    coerce(prefix + cLetter + 'max');\n  } // handles both the trace case (autocolorscale is false by default) and\n  // the marker and marker.line case (autocolorscale is true by default)\n\n\n  var sclIn = containerIn.colorscale;\n  var sclTemplate = template.colorscale;\n  var autoColorscaleDflt;\n  if (sclIn !== undefined) autoColorscaleDflt = !isValidScale(sclIn);\n  if (sclTemplate !== undefined) autoColorscaleDflt = !isValidScale(sclTemplate);\n  coerce(prefix + 'autocolorscale', autoColorscaleDflt);\n  coerce(prefix + 'colorscale');\n  coerce(prefix + 'reversescale');\n\n  if (prefix !== 'marker.line.') {\n    // handles both the trace case where the dflt is listed in attributes and\n    // the marker case where the dflt is determined by hasColorbar\n    var showScaleDflt;\n    if (prefix && inTrace) showScaleDflt = hasColorbar(containerIn);\n    var showScale = coerce(prefix + 'showscale', showScaleDflt);\n    if (showScale) colorbarDefaults(containerIn, containerOut, layout);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}