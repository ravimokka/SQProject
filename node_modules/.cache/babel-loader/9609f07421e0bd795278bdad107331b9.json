{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar constants = require('./constants'); // convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\n\n\nexports.id2name = function id2name(id) {\n  if (typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n  var axNum = id.substr(1);\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + 'axis' + axNum;\n};\n\nexports.name2id = function name2id(name) {\n  if (!name.match(constants.AX_NAME_PATTERN)) return;\n  var axNum = name.substr(5);\n  if (axNum === '1') axNum = '';\n  return name.charAt(0) + axNum;\n};\n\nexports.cleanId = function cleanId(id, axLetter) {\n  if (!id.match(constants.AX_ID_PATTERN)) return;\n  if (axLetter && id.charAt(0) !== axLetter) return;\n  var axNum = id.substr(1).replace(/^0+/, '');\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + axNum;\n}; // get all axis objects, as restricted in listNames\n\n\nexports.list = function (gd, axLetter, only2d) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var idList = exports.listIds(gd, axLetter);\n  var out = new Array(idList.length);\n  var i;\n\n  for (i = 0; i < idList.length; i++) {\n    var idi = idList[i];\n    out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n  }\n\n  if (!only2d) {\n    var sceneIds3D = fullLayout._subplots.gl3d || [];\n\n    for (i = 0; i < sceneIds3D.length; i++) {\n      var scene = fullLayout[sceneIds3D[i]];\n      if (axLetter) out.push(scene[axLetter + 'axis']);else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n    }\n  }\n\n  return out;\n}; // get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\n\n\nexports.listIds = function (gd, axLetter) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var subplotLists = fullLayout._subplots;\n  if (axLetter) return subplotLists[axLetter + 'axis'];\n  return subplotLists.xaxis.concat(subplotLists.yaxis);\n}; // get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\n\n\nexports.getFromId = function (gd, id, type) {\n  var fullLayout = gd._fullLayout;\n  if (type === 'x') id = id.replace(/y[0-9]*/, '');else if (type === 'y') id = id.replace(/x[0-9]*/, '');\n  return fullLayout[exports.id2name(id)];\n}; // get an axis object of specified type from the containing trace\n\n\nexports.getFromTrace = function (gd, fullTrace, type) {\n  var fullLayout = gd._fullLayout;\n  var ax = null;\n\n  if (Registry.traceIs(fullTrace, 'gl3d')) {\n    var scene = fullTrace.scene;\n\n    if (scene.substr(0, 5) === 'scene') {\n      ax = fullLayout[scene][type + 'axis'];\n    }\n  } else {\n    ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n  }\n\n  return ax;\n}; // sort x, x2, x10, y, y2, y10...\n\n\nexports.idSort = function (id1, id2) {\n  var letter1 = id1.charAt(0);\n  var letter2 = id2.charAt(0);\n  if (letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n  return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};\n\nexports.getAxisGroup = function getAxisGroup(fullLayout, axId) {\n  var matchGroups = fullLayout._axisMatchGroups;\n\n  for (var i = 0; i < matchGroups.length; i++) {\n    var group = matchGroups[i];\n    if (group[axId]) return 'g' + i;\n  }\n\n  return axId;\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/cartesian/axis_ids.js"],"names":["Registry","require","constants","exports","id2name","id","match","AX_ID_PATTERN","axNum","substr","charAt","name2id","name","AX_NAME_PATTERN","cleanId","axLetter","replace","list","gd","only2d","fullLayout","_fullLayout","idList","listIds","out","Array","length","i","idi","sceneIds3D","_subplots","gl3d","scene","push","xaxis","yaxis","zaxis","subplotLists","concat","getFromId","type","getFromTrace","fullTrace","ax","traceIs","idSort","id1","id2","letter1","letter2","getAxisGroup","axId","matchGroups","_axisMatchGroups","group"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar constants = require('./constants');\n\n\n// convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\nexports.id2name = function id2name(id) {\n    if(typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n    var axNum = id.substr(1);\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + 'axis' + axNum;\n};\n\nexports.name2id = function name2id(name) {\n    if(!name.match(constants.AX_NAME_PATTERN)) return;\n    var axNum = name.substr(5);\n    if(axNum === '1') axNum = '';\n    return name.charAt(0) + axNum;\n};\n\nexports.cleanId = function cleanId(id, axLetter) {\n    if(!id.match(constants.AX_ID_PATTERN)) return;\n    if(axLetter && id.charAt(0) !== axLetter) return;\n\n    var axNum = id.substr(1).replace(/^0+/, '');\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + axNum;\n};\n\n// get all axis objects, as restricted in listNames\nexports.list = function(gd, axLetter, only2d) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var idList = exports.listIds(gd, axLetter);\n    var out = new Array(idList.length);\n    var i;\n\n    for(i = 0; i < idList.length; i++) {\n        var idi = idList[i];\n        out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n    }\n\n    if(!only2d) {\n        var sceneIds3D = fullLayout._subplots.gl3d || [];\n\n        for(i = 0; i < sceneIds3D.length; i++) {\n            var scene = fullLayout[sceneIds3D[i]];\n\n            if(axLetter) out.push(scene[axLetter + 'axis']);\n            else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n        }\n    }\n\n    return out;\n};\n\n// get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\nexports.listIds = function(gd, axLetter) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var subplotLists = fullLayout._subplots;\n    if(axLetter) return subplotLists[axLetter + 'axis'];\n    return subplotLists.xaxis.concat(subplotLists.yaxis);\n};\n\n// get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\nexports.getFromId = function(gd, id, type) {\n    var fullLayout = gd._fullLayout;\n\n    if(type === 'x') id = id.replace(/y[0-9]*/, '');\n    else if(type === 'y') id = id.replace(/x[0-9]*/, '');\n\n    return fullLayout[exports.id2name(id)];\n};\n\n// get an axis object of specified type from the containing trace\nexports.getFromTrace = function(gd, fullTrace, type) {\n    var fullLayout = gd._fullLayout;\n    var ax = null;\n\n    if(Registry.traceIs(fullTrace, 'gl3d')) {\n        var scene = fullTrace.scene;\n        if(scene.substr(0, 5) === 'scene') {\n            ax = fullLayout[scene][type + 'axis'];\n        }\n    } else {\n        ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n    }\n\n    return ax;\n};\n\n// sort x, x2, x10, y, y2, y10...\nexports.idSort = function(id1, id2) {\n    var letter1 = id1.charAt(0);\n    var letter2 = id2.charAt(0);\n    if(letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n    return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};\n\nexports.getAxisGroup = function getAxisGroup(fullLayout, axId) {\n    var matchGroups = fullLayout._axisMatchGroups;\n\n    for(var i = 0; i < matchGroups.length; i++) {\n        var group = matchGroups[i];\n        if(group[axId]) return 'g' + i;\n    }\n    return axId;\n};\n"]},"metadata":{},"sourceType":"script"}