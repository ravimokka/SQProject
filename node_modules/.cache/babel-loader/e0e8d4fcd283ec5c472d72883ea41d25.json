{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\n\nvar padAttrs = require('../../plots/pad_attributes');\n\nvar extendDeepAll = require('../../lib/extend').extendDeepAll;\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar animationAttrs = require('../../plots/animation_attributes');\n\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nvar constants = require('./constants');\n\nvar stepsAttrs = templatedArray('step', {\n  visible: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: ['Determines whether or not this step is included in the slider.'].join(' ')\n  },\n  method: {\n    valType: 'enumerated',\n    values: ['restyle', 'relayout', 'animate', 'update', 'skip'],\n    dflt: 'restyle',\n    role: 'info',\n    description: ['Sets the Plotly method to be called when the slider value is changed.', 'If the `skip` method is used, the API slider will function as normal', 'but will perform no API calls and will not bind automatically to state', 'updates. This may be used to create a component interface and attach to', 'slider events manually via JavaScript.'].join(' ')\n  },\n  args: {\n    valType: 'info_array',\n    role: 'info',\n    freeLength: true,\n    items: [{\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }, {\n      valType: 'any'\n    }],\n    description: ['Sets the arguments values to be passed to the Plotly', 'method set in `method` on slide.'].join(' ')\n  },\n  label: {\n    valType: 'string',\n    role: 'info',\n    description: 'Sets the text label to appear on the slider'\n  },\n  value: {\n    valType: 'string',\n    role: 'info',\n    description: ['Sets the value of the slider step, used to refer to the step programatically.', 'Defaults to the slider label if not provided.'].join(' ')\n  },\n  execute: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: ['When true, the API method is executed. When false, all other behaviors are the same', 'and command execution is skipped. This may be useful when hooking into, for example,', 'the `plotly_sliderchange` method and executing the API command manually without losing', 'the benefit of the slider automatically binding to the state of the plot through the', 'specification of `method` and `args`.'].join(' ')\n  }\n});\nmodule.exports = overrideAll(templatedArray('slider', {\n  visible: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: true,\n    description: ['Determines whether or not the slider is visible.'].join(' ')\n  },\n  active: {\n    valType: 'number',\n    role: 'info',\n    min: 0,\n    dflt: 0,\n    description: ['Determines which button (by index starting from 0) is', 'considered active.'].join(' ')\n  },\n  steps: stepsAttrs,\n  lenmode: {\n    valType: 'enumerated',\n    values: ['fraction', 'pixels'],\n    role: 'info',\n    dflt: 'fraction',\n    description: ['Determines whether this slider length', 'is set in units of plot *fraction* or in *pixels.', 'Use `len` to set the value.'].join(' ')\n  },\n  len: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'style',\n    description: ['Sets the length of the slider', 'This measure excludes the padding of both ends.', 'That is, the slider\\'s length is this length minus the', 'padding on both ends.'].join(' ')\n  },\n  x: {\n    valType: 'number',\n    min: -2,\n    max: 3,\n    dflt: 0,\n    role: 'style',\n    description: 'Sets the x position (in normalized coordinates) of the slider.'\n  },\n  pad: extendDeepAll(padAttrs({\n    editType: 'arraydraw'\n  }), {\n    description: 'Set the padding of the slider component along each side.'\n  }, {\n    t: {\n      dflt: 20\n    }\n  }),\n  xanchor: {\n    valType: 'enumerated',\n    values: ['auto', 'left', 'center', 'right'],\n    dflt: 'left',\n    role: 'info',\n    description: ['Sets the slider\\'s horizontal position anchor.', 'This anchor binds the `x` position to the *left*, *center*', 'or *right* of the range selector.'].join(' ')\n  },\n  y: {\n    valType: 'number',\n    min: -2,\n    max: 3,\n    dflt: 0,\n    role: 'style',\n    description: 'Sets the y position (in normalized coordinates) of the slider.'\n  },\n  yanchor: {\n    valType: 'enumerated',\n    values: ['auto', 'top', 'middle', 'bottom'],\n    dflt: 'top',\n    role: 'info',\n    description: ['Sets the slider\\'s vertical position anchor', 'This anchor binds the `y` position to the *top*, *middle*', 'or *bottom* of the range selector.'].join(' ')\n  },\n  transition: {\n    duration: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      dflt: 150,\n      description: 'Sets the duration of the slider transition'\n    },\n    easing: {\n      valType: 'enumerated',\n      values: animationAttrs.transition.easing.values,\n      role: 'info',\n      dflt: 'cubic-in-out',\n      description: 'Sets the easing function of the slider transition'\n    }\n  },\n  currentvalue: {\n    visible: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: true,\n      description: ['Shows the currently-selected value above the slider.'].join(' ')\n    },\n    xanchor: {\n      valType: 'enumerated',\n      values: ['left', 'center', 'right'],\n      dflt: 'left',\n      role: 'info',\n      description: ['The alignment of the value readout relative to the length of the slider.'].join(' ')\n    },\n    offset: {\n      valType: 'number',\n      dflt: 10,\n      role: 'info',\n      description: ['The amount of space, in pixels, between the current value label', 'and the slider.'].join(' ')\n    },\n    prefix: {\n      valType: 'string',\n      role: 'info',\n      description: 'When currentvalue.visible is true, this sets the prefix of the label.'\n    },\n    suffix: {\n      valType: 'string',\n      role: 'info',\n      description: 'When currentvalue.visible is true, this sets the suffix of the label.'\n    },\n    font: fontAttrs({\n      description: 'Sets the font of the current value label text.'\n    })\n  },\n  font: fontAttrs({\n    description: 'Sets the font of the slider step labels.'\n  }),\n  activebgcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.gripBgActiveColor,\n    description: ['Sets the background color of the slider grip', 'while dragging.'].join(' ')\n  },\n  bgcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.railBgColor,\n    description: 'Sets the background color of the slider.'\n  },\n  bordercolor: {\n    valType: 'color',\n    dflt: constants.railBorderColor,\n    role: 'style',\n    description: 'Sets the color of the border enclosing the slider.'\n  },\n  borderwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: constants.railBorderWidth,\n    role: 'style',\n    description: 'Sets the width (in px) of the border enclosing the slider.'\n  },\n  ticklen: {\n    valType: 'number',\n    min: 0,\n    dflt: constants.tickLength,\n    role: 'style',\n    description: 'Sets the length in pixels of step tick marks'\n  },\n  tickcolor: {\n    valType: 'color',\n    dflt: constants.tickColor,\n    role: 'style',\n    description: 'Sets the color of the border enclosing the slider.'\n  },\n  tickwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    role: 'style',\n    description: 'Sets the tick width (in px).'\n  },\n  minorticklen: {\n    valType: 'number',\n    min: 0,\n    dflt: constants.minorTickLength,\n    role: 'style',\n    description: 'Sets the length in pixels of minor step tick marks'\n  }\n}), 'arraydraw', 'from-root');","map":null,"metadata":{},"sourceType":"script"}