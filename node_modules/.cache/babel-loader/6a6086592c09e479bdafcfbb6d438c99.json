{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict'; // projection names to d3 function name\n\nexports.projNames = {\n  // d3.geo.projection\n  'equirectangular': 'equirectangular',\n  'mercator': 'mercator',\n  'orthographic': 'orthographic',\n  'natural earth': 'naturalEarth',\n  'kavrayskiy7': 'kavrayskiy7',\n  'miller': 'miller',\n  'robinson': 'robinson',\n  'eckert4': 'eckert4',\n  'azimuthal equal area': 'azimuthalEqualArea',\n  'azimuthal equidistant': 'azimuthalEquidistant',\n  'conic equal area': 'conicEqualArea',\n  'conic conformal': 'conicConformal',\n  'conic equidistant': 'conicEquidistant',\n  'gnomonic': 'gnomonic',\n  'stereographic': 'stereographic',\n  'mollweide': 'mollweide',\n  'hammer': 'hammer',\n  'transverse mercator': 'transverseMercator',\n  'albers usa': 'albersUsa',\n  'winkel tripel': 'winkel3',\n  'aitoff': 'aitoff',\n  'sinusoidal': 'sinusoidal'\n}; // name of the axes\n\nexports.axesNames = ['lonaxis', 'lataxis']; // max longitudinal angular span (EXPERIMENTAL)\n\nexports.lonaxisSpan = {\n  'orthographic': 180,\n  'azimuthal equal area': 360,\n  'azimuthal equidistant': 360,\n  'conic conformal': 180,\n  'gnomonic': 160,\n  'stereographic': 180,\n  'transverse mercator': 180,\n  '*': 360\n}; // max latitudinal angular span (EXPERIMENTAL)\n\nexports.lataxisSpan = {\n  'conic conformal': 150,\n  'stereographic': 179.5,\n  '*': 180\n}; // defaults for each scope\n\nexports.scopeDefaults = {\n  world: {\n    lonaxisRange: [-180, 180],\n    lataxisRange: [-90, 90],\n    projType: 'equirectangular',\n    projRotate: [0, 0, 0]\n  },\n  usa: {\n    lonaxisRange: [-180, -50],\n    lataxisRange: [15, 80],\n    projType: 'albers usa'\n  },\n  europe: {\n    lonaxisRange: [-30, 60],\n    lataxisRange: [30, 85],\n    projType: 'conic conformal',\n    projRotate: [15, 0, 0],\n    projParallels: [0, 60]\n  },\n  asia: {\n    lonaxisRange: [22, 160],\n    lataxisRange: [-15, 55],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  },\n  africa: {\n    lonaxisRange: [-30, 60],\n    lataxisRange: [-40, 40],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  },\n  'north america': {\n    lonaxisRange: [-180, -45],\n    lataxisRange: [5, 85],\n    projType: 'conic conformal',\n    projRotate: [-100, 0, 0],\n    projParallels: [29.5, 45.5]\n  },\n  'south america': {\n    lonaxisRange: [-100, -30],\n    lataxisRange: [-60, 15],\n    projType: 'mercator',\n    projRotate: [0, 0, 0]\n  }\n}; // angular pad to avoid rounding error around clip angles\n\nexports.clipPad = 1e-3; // map projection precision\n\nexports.precision = 0.1; // default land and water fill colors\n\nexports.landColor = '#F0DC82';\nexports.waterColor = '#3399FF'; // locationmode to layer name\n\nexports.locationmodeToLayer = {\n  'ISO-3': 'countries',\n  'USA-states': 'subunits',\n  'country names': 'countries'\n}; // SVG element for a sphere (use to frame maps)\n\nexports.sphereSVG = {\n  type: 'Sphere'\n}; // N.B. base layer names must be the same as in the topojson files\n// base layer with a fill color\n\nexports.fillLayers = {\n  ocean: 1,\n  land: 1,\n  lakes: 1\n}; // base layer with a only a line color\n\nexports.lineLayers = {\n  subunits: 1,\n  countries: 1,\n  coastlines: 1,\n  rivers: 1,\n  frame: 1\n};\nexports.layers = ['bg', 'ocean', 'land', 'lakes', 'subunits', 'countries', 'coastlines', 'rivers', 'lataxis', 'lonaxis', 'frame', 'backplot', 'frontplot'];\nexports.layersForChoropleth = ['bg', 'ocean', 'land', 'subunits', 'countries', 'coastlines', 'lataxis', 'lonaxis', 'frame', 'backplot', 'rivers', 'lakes', 'frontplot'];\nexports.layerNameToAdjective = {\n  ocean: 'ocean',\n  land: 'land',\n  lakes: 'lake',\n  subunits: 'subunit',\n  countries: 'country',\n  coastlines: 'coastline',\n  rivers: 'river',\n  frame: 'frame'\n};","map":null,"metadata":{},"sourceType":"script"}