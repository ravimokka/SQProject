{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js\";\nimport { Chart, Tooltip, Axis, Line, Guide, View } from 'viser-react';\nimport * as $ from 'jquery';\nimport * as React from 'react';\n\nconst DataSet = require('@antv/data-set');\n\nconst tooltipOpts = {\n  crosshairs: false\n};\nconst axis1 = {\n  dataKey: 'Year',\n  subTickCount: 3,\n  subTickLine: {\n    length: 3,\n    stroke: '#bfbfbf',\n    lineWidth: 1\n  },\n  tickLine: {\n    length: 6,\n    lineWidth: 1,\n    stroke: '#bfbfbf'\n  },\n  label: {\n    textStyle: {\n      fill: '#aaaaaa'\n    }\n  }\n};\nconst axis2 = {\n  dataKey: 'Deaths',\n  label: {\n    textStyle: {\n      fill: '#aaaaaa'\n    },\n    formatter: function formatter(text) {\n      return text.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\n    }\n  }\n};\n\nclass Reactjs extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dv1: [],\n      dv2: []\n    };\n  }\n\n  componentDidMount() {\n    $.getJSON('/assets/data/terrorism.json', data => {\n      const ds = new DataSet();\n      const dv1 = ds.createView().source(data);\n      dv1.transform({\n        type: 'map',\n        callback: function callback(row) {\n          if (typeof row.Deaths === 'string') {\n            row.Deaths = row.Deaths.replace(',', '');\n          }\n\n          row.Deaths = parseInt(row.Deaths);\n          row.death = row.Deaths;\n          row.year = row.Year;\n          return row;\n        }\n      });\n      const dv2 = ds.createView().source(dv1.rows);\n      dv2.transform({\n        type: 'regression',\n        method: 'polynomial',\n        fields: ['year', 'death'],\n        bandwidth: .1,\n        as: ['year', 'death']\n      });\n      this.setState({\n        dv1: dv1.rows,\n        dv2: dv2.rows\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          dv1 = _this$state.dv1,\n          dv2 = _this$state.dv2;\n    return React.createElement(Chart, {\n      forceFit: true,\n      height: 400,\n      padding: [20, 20, 50, 50],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Tooltip, Object.assign({}, tooltipOpts, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(View, {\n      data: dv1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Axis, Object.assign({}, axis1, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(Axis, Object.assign({}, axis2, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(Line, {\n      position: \"Year*Deaths\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Guide, {\n      type: \"text\",\n      content: \"\\u8D8B\\u52BF\\u7EBF\",\n      position: ['1970', 12000],\n      style: {\n        fill: '#8c8c8c',\n        fontSize: 14,\n        fontWeight: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(View, {\n      data: dv2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Line, {\n      position: \"year*death\",\n      tooltip: false,\n      style: {\n        stroke: '#969696',\n        lineDash: [3, 3]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Reactjs;","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js"],"names":["Chart","Tooltip","Axis","Line","Guide","View","$","React","DataSet","require","tooltipOpts","crosshairs","axis1","dataKey","subTickCount","subTickLine","length","stroke","lineWidth","tickLine","label","textStyle","fill","axis2","formatter","text","replace","Reactjs","Component","state","dv1","dv2","componentDidMount","getJSON","data","ds","createView","source","transform","type","callback","row","Deaths","parseInt","death","year","Year","rows","method","fields","bandwidth","as","setState","render","fontSize","fontWeight","lineDash"],"mappings":"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","sourcesContent":["import { Chart, Tooltip, Axis, Line, Guide, View } from 'viser-react';\nimport * as $ from 'jquery';\nimport * as React from 'react';\nconst DataSet = require('@antv/data-set');\n\nconst tooltipOpts = {\n  crosshairs: false\n};\nconst axis1 = {\n  dataKey: 'Year',\n  subTickCount: 3,\n  subTickLine: {\n    length: 3,\n    stroke: '#bfbfbf',\n    lineWidth: 1\n  },\n  tickLine: {\n    length: 6,\n    lineWidth: 1,\n    stroke: '#bfbfbf'\n  },\n  label: {\n    textStyle: {\n      fill: '#aaaaaa'\n    }\n  }\n}\nconst axis2 = {\n  dataKey: 'Deaths',\n  label: {\n    textStyle: {\n      fill: '#aaaaaa'\n    },\n    formatter: function formatter(text) {\n      return text.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\n    }\n  }\n}\n\nclass Reactjs extends React.Component {\n  state = {\n    dv1: [],\n    dv2: []\n  };\n  componentDidMount() {\n    $.getJSON('/assets/data/terrorism.json', data => {\n      const ds = new DataSet();\n      const dv1 = ds.createView().source(data);\n      dv1.transform({\n        type: 'map',\n        callback: function callback(row) {\n          if (typeof row.Deaths === 'string') {\n            row.Deaths = row.Deaths.replace(',', '');\n          }\n          row.Deaths = parseInt(row.Deaths);\n          row.death = row.Deaths;\n          row.year = row.Year;\n          return row;\n        }\n      });\n      const dv2 = ds.createView().source(dv1.rows);\n      dv2.transform({\n        type: 'regression',\n        method: 'polynomial',\n        fields: ['year', 'death'],\n        bandwidth: .1,\n        as: ['year', 'death']\n      });\n\n      this.setState({ dv1:dv1.rows, dv2:dv2.rows });\n    });\n  }\n  render() {\n    const { dv1, dv2 } = this.state;\n    return (\n      <Chart forceFit height={400} padding={[20, 20, 50, 50]}>\n        <Tooltip {...tooltipOpts} />\n        <View data={dv1}>\n          <Axis {...axis1}/>\n          <Axis {...axis2}/>\n          <Line position=\"Year*Deaths\"/>\n          <Guide type=\"text\" content=\"趋势线\" position={['1970', 12000]} style={{\n            fill: '#8c8c8c',\n            fontSize: 14,\n            fontWeight: 300\n          }}/>\n        </View>\n        <View data={dv2}>\n          <Line position=\"year*death\" tooltip={false} style={{\n            stroke: '#969696',\n            lineDash: [3, 3]\n          }}/>\n        </View>\n      </Chart>\n    );\n  }\n}\nexport default  Reactjs"]},"metadata":{},"sourceType":"module"}