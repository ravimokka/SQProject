{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar histogram2dCalc = require('../histogram2d/calc');\n\nvar colorscaleCalc = require('../../components/colorscale/calc');\n\nvar convertColumnData = require('./convert_column_xyz');\n\nvar clean2dArray = require('./clean_2d_array');\n\nvar interp2d = require('./interp2d');\n\nvar findEmpties = require('./find_empties');\n\nvar makeBoundArray = require('./make_bound_array');\n\nmodule.exports = function calc(gd, trace) {\n  // prepare the raw data\n  // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n  var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n  var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n  var isContour = Registry.traceIs(trace, 'contour');\n  var isHist = Registry.traceIs(trace, 'histogram');\n  var isGL2D = Registry.traceIs(trace, 'gl2d');\n  var zsmooth = isContour ? 'best' : trace.zsmooth;\n  var x;\n  var x0;\n  var dx;\n  var y;\n  var y0;\n  var dy;\n  var z;\n  var i;\n  var binned; // cancel minimum tick spacings (only applies to bars and boxes)\n\n  xa._minDtick = 0;\n  ya._minDtick = 0;\n\n  if (isHist) {\n    binned = histogram2dCalc(gd, trace);\n    x = binned.x;\n    x0 = binned.x0;\n    dx = binned.dx;\n    y = binned.y;\n    y0 = binned.y0;\n    dy = binned.dy;\n    z = binned.z;\n  } else {\n    var zIn = trace.z;\n\n    if (Lib.isArray1D(zIn)) {\n      convertColumnData(trace, xa, ya, 'x', 'y', ['z']);\n      x = trace._x;\n      y = trace._y;\n      zIn = trace._z;\n    } else {\n      x = trace._x = trace.x ? xa.makeCalcdata(trace, 'x') : [];\n      y = trace._y = trace.y ? ya.makeCalcdata(trace, 'y') : [];\n    }\n\n    x0 = trace.x0;\n    dx = trace.dx;\n    y0 = trace.y0;\n    dy = trace.dy;\n    z = clean2dArray(zIn, trace, xa, ya);\n\n    if (isContour || trace.connectgaps) {\n      trace._emptypoints = findEmpties(z);\n      interp2d(z, trace._emptypoints);\n    }\n  }\n\n  function noZsmooth(msg) {\n    zsmooth = trace._input.zsmooth = trace.zsmooth = false;\n    Lib.warn('cannot use zsmooth: \"fast\": ' + msg);\n  } // check whether we really can smooth (ie all boxes are about the same size)\n\n\n  if (zsmooth === 'fast') {\n    if (xa.type === 'log' || ya.type === 'log') {\n      noZsmooth('log axis found');\n    } else if (!isHist) {\n      if (x.length) {\n        var avgdx = (x[x.length - 1] - x[0]) / (x.length - 1);\n        var maxErrX = Math.abs(avgdx / 100);\n\n        for (i = 0; i < x.length - 1; i++) {\n          if (Math.abs(x[i + 1] - x[i] - avgdx) > maxErrX) {\n            noZsmooth('x scale is not linear');\n            break;\n          }\n        }\n      }\n\n      if (y.length && zsmooth === 'fast') {\n        var avgdy = (y[y.length - 1] - y[0]) / (y.length - 1);\n        var maxErrY = Math.abs(avgdy / 100);\n\n        for (i = 0; i < y.length - 1; i++) {\n          if (Math.abs(y[i + 1] - y[i] - avgdy) > maxErrY) {\n            noZsmooth('y scale is not linear');\n            break;\n          }\n        }\n      }\n    }\n  } // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n\n\n  var xlen = Lib.maxRowLength(z);\n  var xIn = trace.xtype === 'scaled' ? '' : x;\n  var xArray = makeBoundArray(trace, xIn, x0, dx, xlen, xa);\n  var yIn = trace.ytype === 'scaled' ? '' : y;\n  var yArray = makeBoundArray(trace, yIn, y0, dy, z.length, ya); // handled in gl2d convert step\n\n  if (!isGL2D) {\n    trace._extremes[xa._id] = Axes.findExtremes(xa, xArray);\n    trace._extremes[ya._id] = Axes.findExtremes(ya, yArray);\n  }\n\n  var cd0 = {\n    x: xArray,\n    y: yArray,\n    z: z,\n    text: trace._text || trace.text,\n    hovertext: trace._hovertext || trace.hovertext\n  };\n  if (xIn && xIn.length === xArray.length - 1) cd0.xCenter = xIn;\n  if (yIn && yIn.length === yArray.length - 1) cd0.yCenter = yIn;\n\n  if (isHist) {\n    cd0.xRanges = binned.xRanges;\n    cd0.yRanges = binned.yRanges;\n    cd0.pts = binned.pts;\n  }\n\n  if (!isContour) {\n    colorscaleCalc(gd, trace, {\n      vals: z,\n      cLetter: 'z'\n    });\n  }\n\n  if (isContour && trace.contours && trace.contours.coloring === 'heatmap') {\n    var dummyTrace = {\n      type: trace.type === 'contour' ? 'heatmap' : 'histogram2d',\n      xcalendar: trace.xcalendar,\n      ycalendar: trace.ycalendar\n    };\n    cd0.xfill = makeBoundArray(dummyTrace, xIn, x0, dx, xlen, xa);\n    cd0.yfill = makeBoundArray(dummyTrace, yIn, y0, dy, z.length, ya);\n  }\n\n  return [cd0];\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/traces/heatmap/calc.js"],"names":["Registry","require","Lib","Axes","histogram2dCalc","colorscaleCalc","convertColumnData","clean2dArray","interp2d","findEmpties","makeBoundArray","module","exports","calc","gd","trace","xa","getFromId","xaxis","ya","yaxis","isContour","traceIs","isHist","isGL2D","zsmooth","x","x0","dx","y","y0","dy","z","i","binned","_minDtick","zIn","isArray1D","_x","_y","_z","makeCalcdata","connectgaps","_emptypoints","noZsmooth","msg","_input","warn","type","length","avgdx","maxErrX","Math","abs","avgdy","maxErrY","xlen","maxRowLength","xIn","xtype","xArray","yIn","ytype","yArray","_extremes","_id","findExtremes","cd0","text","_text","hovertext","_hovertext","xCenter","yCenter","xRanges","yRanges","pts","vals","cLetter","contours","coloring","dummyTrace","xcalendar","ycalendar","xfill","yfill"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Axes = require('../../plots/cartesian/axes');\n\nvar histogram2dCalc = require('../histogram2d/calc');\nvar colorscaleCalc = require('../../components/colorscale/calc');\nvar convertColumnData = require('./convert_column_xyz');\nvar clean2dArray = require('./clean_2d_array');\nvar interp2d = require('./interp2d');\nvar findEmpties = require('./find_empties');\nvar makeBoundArray = require('./make_bound_array');\n\nmodule.exports = function calc(gd, trace) {\n    // prepare the raw data\n    // run makeCalcdata on x and y even for heatmaps, in case of category mappings\n    var xa = Axes.getFromId(gd, trace.xaxis || 'x');\n    var ya = Axes.getFromId(gd, trace.yaxis || 'y');\n    var isContour = Registry.traceIs(trace, 'contour');\n    var isHist = Registry.traceIs(trace, 'histogram');\n    var isGL2D = Registry.traceIs(trace, 'gl2d');\n    var zsmooth = isContour ? 'best' : trace.zsmooth;\n    var x;\n    var x0;\n    var dx;\n    var y;\n    var y0;\n    var dy;\n    var z;\n    var i;\n    var binned;\n\n    // cancel minimum tick spacings (only applies to bars and boxes)\n    xa._minDtick = 0;\n    ya._minDtick = 0;\n\n    if(isHist) {\n        binned = histogram2dCalc(gd, trace);\n        x = binned.x;\n        x0 = binned.x0;\n        dx = binned.dx;\n        y = binned.y;\n        y0 = binned.y0;\n        dy = binned.dy;\n        z = binned.z;\n    } else {\n        var zIn = trace.z;\n        if(Lib.isArray1D(zIn)) {\n            convertColumnData(trace, xa, ya, 'x', 'y', ['z']);\n            x = trace._x;\n            y = trace._y;\n            zIn = trace._z;\n        } else {\n            x = trace._x = trace.x ? xa.makeCalcdata(trace, 'x') : [];\n            y = trace._y = trace.y ? ya.makeCalcdata(trace, 'y') : [];\n        }\n\n        x0 = trace.x0;\n        dx = trace.dx;\n        y0 = trace.y0;\n        dy = trace.dy;\n\n        z = clean2dArray(zIn, trace, xa, ya);\n\n        if(isContour || trace.connectgaps) {\n            trace._emptypoints = findEmpties(z);\n            interp2d(z, trace._emptypoints);\n        }\n    }\n\n    function noZsmooth(msg) {\n        zsmooth = trace._input.zsmooth = trace.zsmooth = false;\n        Lib.warn('cannot use zsmooth: \"fast\": ' + msg);\n    }\n\n    // check whether we really can smooth (ie all boxes are about the same size)\n    if(zsmooth === 'fast') {\n        if(xa.type === 'log' || ya.type === 'log') {\n            noZsmooth('log axis found');\n        } else if(!isHist) {\n            if(x.length) {\n                var avgdx = (x[x.length - 1] - x[0]) / (x.length - 1);\n                var maxErrX = Math.abs(avgdx / 100);\n                for(i = 0; i < x.length - 1; i++) {\n                    if(Math.abs(x[i + 1] - x[i] - avgdx) > maxErrX) {\n                        noZsmooth('x scale is not linear');\n                        break;\n                    }\n                }\n            }\n            if(y.length && zsmooth === 'fast') {\n                var avgdy = (y[y.length - 1] - y[0]) / (y.length - 1);\n                var maxErrY = Math.abs(avgdy / 100);\n                for(i = 0; i < y.length - 1; i++) {\n                    if(Math.abs(y[i + 1] - y[i] - avgdy) > maxErrY) {\n                        noZsmooth('y scale is not linear');\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    // create arrays of brick boundaries, to be used by autorange and heatmap.plot\n    var xlen = Lib.maxRowLength(z);\n    var xIn = trace.xtype === 'scaled' ? '' : x;\n    var xArray = makeBoundArray(trace, xIn, x0, dx, xlen, xa);\n    var yIn = trace.ytype === 'scaled' ? '' : y;\n    var yArray = makeBoundArray(trace, yIn, y0, dy, z.length, ya);\n\n    // handled in gl2d convert step\n    if(!isGL2D) {\n        trace._extremes[xa._id] = Axes.findExtremes(xa, xArray);\n        trace._extremes[ya._id] = Axes.findExtremes(ya, yArray);\n    }\n\n    var cd0 = {\n        x: xArray,\n        y: yArray,\n        z: z,\n        text: trace._text || trace.text,\n        hovertext: trace._hovertext || trace.hovertext\n    };\n\n    if(xIn && xIn.length === xArray.length - 1) cd0.xCenter = xIn;\n    if(yIn && yIn.length === yArray.length - 1) cd0.yCenter = yIn;\n\n    if(isHist) {\n        cd0.xRanges = binned.xRanges;\n        cd0.yRanges = binned.yRanges;\n        cd0.pts = binned.pts;\n    }\n\n    if(!isContour) {\n        colorscaleCalc(gd, trace, {vals: z, cLetter: 'z'});\n    }\n\n    if(isContour && trace.contours && trace.contours.coloring === 'heatmap') {\n        var dummyTrace = {\n            type: trace.type === 'contour' ? 'heatmap' : 'histogram2d',\n            xcalendar: trace.xcalendar,\n            ycalendar: trace.ycalendar\n        };\n        cd0.xfill = makeBoundArray(dummyTrace, xIn, x0, dx, xlen, xa);\n        cd0.yfill = makeBoundArray(dummyTrace, yIn, y0, dy, z.length, ya);\n    }\n\n    return [cd0];\n};\n"]},"metadata":{},"sourceType":"script"}