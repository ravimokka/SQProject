{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport viser from 'viser';\n\nfunction retain(obj, attr) {\n  var newObj = Object.create(null);\n\n  for (var item in obj) {\n    if (obj.hasOwnProperty(item)) {\n      var arrAttr = Array.isArray(attr) ? attr : [attr];\n\n      if (arrAttr.indexOf(item) >= 0) {\n        newObj[item] = obj[item];\n      }\n    }\n  }\n\n  return newObj;\n}\n\nvar LiteChart = function (_super) {\n  __extends(LiteChart, _super);\n\n  function LiteChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.config = {};\n    _this.displayName = '';\n\n    _this.portalRef = function (container) {\n      if (!_this.container) {\n        _this.container = container;\n      }\n    };\n\n    return _this;\n  }\n\n  LiteChart.prototype.combineChartConfig = function (props, config) {\n    var chartRetain = ['height', 'width', 'animate', 'forceFit', 'background', 'plotBackground', 'padding'];\n    config.chart = retain(props, chartRetain);\n    return config;\n  };\n\n  LiteChart.prototype.combineViewConfig = function (props, config) {\n    if (props.data) {\n      config.data = props.data;\n    }\n\n    if (props.dataPre) {\n      config.dataPre = props.dataPre;\n    }\n\n    if (props.scale) {\n      config.scale = props.scale;\n    }\n\n    if (props.guide) {\n      config.guide = props.guide;\n    }\n\n    config.tooltip = props.tooltip ? props.tooltip : true;\n    config.legend = props.legend ? props.legend : true;\n    config.axis = props.axis ? props.axis : true;\n    return config;\n  };\n\n  LiteChart.prototype.combineSeriesConfig = function (props, config) {\n    var regSeries = ['pie', 'sector', 'line', 'smoothLine', 'dashLine', 'area', 'stackArea', 'smoothArea', 'bar', 'stackBar', 'dodgeBar', 'interval', 'stackInterval', 'dodgeInterval', 'point', 'waterfall', 'funnel', 'pyramid', 'radialBar', 'schema', 'box', 'candle', 'polygon', 'contour', 'heatmap', 'edge', 'jitterPoint'];\n\n    for (var _i = 0, regSeries_1 = regSeries; _i < regSeries_1.length; _i++) {\n      var res = regSeries_1[_i];\n\n      if (props[res]) {\n        config.series = __assign({}, config.series, {\n          quickType: res\n        });\n        break;\n      }\n    }\n\n    return config;\n  };\n\n  LiteChart.prototype.createChartInstance = function (config) {\n    var elm = this.elm;\n\n    if (elm) {\n      ReactDOM.unmountComponentAtNode(elm);\n    }\n\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    this.combineChartConfig(this.props, this.config);\n    this.combineViewConfig(this.props, this.config);\n    this.combineSeriesConfig(this.props, this.config);\n    var root = document.createElement('div');\n    this.container.appendChild(root);\n    config.chart.container = root;\n    this.elm = document.createElement('div');\n    this.chart = viser(config);\n  };\n\n  LiteChart.prototype.repaintChartInstance = function (config) {\n    this.combineChartConfig(this.props, this.config);\n    this.combineViewConfig(this.props, this.config);\n    this.combineSeriesConfig(this.props, this.config);\n\n    if (this.chart) {\n      this.chart.repaint(config);\n    } else {\n      config.chart.container = this.container;\n      this.chart = viser(config);\n    }\n  };\n\n  LiteChart.prototype.clearConfigData = function () {\n    this.config = {};\n  };\n\n  LiteChart.prototype.componentDidMount = function () {\n    this.createChartInstance(this.config);\n    this.clearConfigData();\n  };\n\n  LiteChart.prototype.componentDidUpdate = function () {\n    this.repaintChartInstance(this.config);\n    this.clearConfigData();\n  };\n\n  LiteChart.prototype.componentWillUnmount = function () {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = null;\n    }\n\n    this.elm = this.container = null;\n  };\n\n  LiteChart.prototype.render = function () {\n    return React.createElement(\"div\", {\n      ref: this.portalRef\n    }, this.props.children);\n  };\n\n  return LiteChart;\n}(React.Component);\n\nexport default LiteChart;","map":null,"metadata":{},"sourceType":"module"}