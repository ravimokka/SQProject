{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../lib');\n\nvar Plots = require('../plots/plots');\n\nvar PlotSchema = require('./plot_schema');\n\nvar dfltConfig = require('./plot_config').dfltConfig;\n\nvar isPlainObject = Lib.isPlainObject;\nvar isArray = Array.isArray;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\n/**\n * Validate a data array and layout object.\n *\n * @param {array} data\n * @param {object} layout\n *\n * @return {array} array of error objects each containing:\n *  - {string} code\n *      error code ('object', 'array', 'schema', 'unused', 'invisible' or 'value')\n *  - {string} container\n *      container where the error occurs ('data' or 'layout')\n *  - {number} trace\n *      trace index of the 'data' container where the error occurs\n *  - {array} path\n *      nested path to the key that causes the error\n *  - {string} astr\n *      attribute string variant of 'path' compatible with Plotly.restyle and\n *      Plotly.relayout.\n *  - {string} msg\n *      error message (shown in console in logger config argument is enable)\n */\n\nmodule.exports = function validate(data, layout) {\n  var schema = PlotSchema.get();\n  var errorList = [];\n  var gd = {\n    _context: Lib.extendFlat({}, dfltConfig)\n  };\n  var dataIn, layoutIn;\n\n  if (isArray(data)) {\n    gd.data = Lib.extendDeep([], data);\n    dataIn = data;\n  } else {\n    gd.data = [];\n    dataIn = [];\n    errorList.push(format('array', 'data'));\n  }\n\n  if (isPlainObject(layout)) {\n    gd.layout = Lib.extendDeep({}, layout);\n    layoutIn = layout;\n  } else {\n    gd.layout = {};\n    layoutIn = {};\n\n    if (arguments.length > 1) {\n      errorList.push(format('object', 'layout'));\n    }\n  } // N.B. dataIn and layoutIn are in general not the same as\n  // gd.data and gd.layout after supplyDefaults as some attributes\n  // in gd.data and gd.layout (still) get mutated during this step.\n\n\n  Plots.supplyDefaults(gd);\n  var dataOut = gd._fullData;\n  var len = dataIn.length;\n\n  for (var i = 0; i < len; i++) {\n    var traceIn = dataIn[i];\n    var base = ['data', i];\n\n    if (!isPlainObject(traceIn)) {\n      errorList.push(format('object', base));\n      continue;\n    }\n\n    var traceOut = dataOut[i];\n    var traceType = traceOut.type;\n    var traceSchema = schema.traces[traceType].attributes; // PlotSchema does something fancy with trace 'type', reset it here\n    // to make the trace schema compatible with Lib.validate.\n\n    traceSchema.type = {\n      valType: 'enumerated',\n      values: [traceType]\n    };\n\n    if (traceOut.visible === false && traceIn.visible !== false) {\n      errorList.push(format('invisible', base));\n    }\n\n    crawl(traceIn, traceOut, traceSchema, errorList, base);\n    var transformsIn = traceIn.transforms;\n    var transformsOut = traceOut.transforms;\n\n    if (transformsIn) {\n      if (!isArray(transformsIn)) {\n        errorList.push(format('array', base, ['transforms']));\n      }\n\n      base.push('transforms');\n\n      for (var j = 0; j < transformsIn.length; j++) {\n        var path = ['transforms', j];\n        var transformType = transformsIn[j].type;\n\n        if (!isPlainObject(transformsIn[j])) {\n          errorList.push(format('object', base, path));\n          continue;\n        }\n\n        var transformSchema = schema.transforms[transformType] ? schema.transforms[transformType].attributes : {}; // add 'type' to transform schema to validate the transform type\n\n        transformSchema.type = {\n          valType: 'enumerated',\n          values: Object.keys(schema.transforms)\n        };\n        crawl(transformsIn[j], transformsOut[j], transformSchema, errorList, base, path);\n      }\n    }\n  }\n\n  var layoutOut = gd._fullLayout;\n  var layoutSchema = fillLayoutSchema(schema, dataOut);\n  crawl(layoutIn, layoutOut, layoutSchema, errorList, 'layout'); // return undefined if no validation errors were found\n\n  return errorList.length === 0 ? void 0 : errorList;\n};\n\nfunction crawl(objIn, objOut, schema, list, base, path) {\n  path = path || [];\n  var keys = Object.keys(objIn);\n\n  for (var i = 0; i < keys.length; i++) {\n    var k = keys[i]; // transforms are handled separately\n\n    if (k === 'transforms') continue;\n    var p = path.slice();\n    p.push(k);\n    var valIn = objIn[k];\n    var valOut = objOut[k];\n    var nestedSchema = getNestedSchema(schema, k);\n    var isInfoArray = (nestedSchema || {}).valType === 'info_array';\n    var isColorscale = (nestedSchema || {}).valType === 'colorscale';\n    var items = (nestedSchema || {}).items;\n\n    if (!isInSchema(schema, k)) {\n      list.push(format('schema', base, p));\n    } else if (isPlainObject(valIn) && isPlainObject(valOut)) {\n      crawl(valIn, valOut, nestedSchema, list, base, p);\n    } else if (isInfoArray && isArray(valIn)) {\n      if (valIn.length > valOut.length) {\n        list.push(format('unused', base, p.concat(valOut.length)));\n      }\n\n      var len = valOut.length;\n      var arrayItems = Array.isArray(items);\n      if (arrayItems) len = Math.min(len, items.length);\n      var m, n, item, valInPart, valOutPart;\n\n      if (nestedSchema.dimensions === 2) {\n        for (n = 0; n < len; n++) {\n          if (isArray(valIn[n])) {\n            if (valIn[n].length > valOut[n].length) {\n              list.push(format('unused', base, p.concat(n, valOut[n].length)));\n            }\n\n            var len2 = valOut[n].length;\n\n            for (m = 0; m < (arrayItems ? Math.min(len2, items[n].length) : len2); m++) {\n              item = arrayItems ? items[n][m] : items;\n              valInPart = valIn[n][m];\n              valOutPart = valOut[n][m];\n\n              if (!Lib.validate(valInPart, item)) {\n                list.push(format('value', base, p.concat(n, m), valInPart));\n              } else if (valOutPart !== valInPart && valOutPart !== +valInPart) {\n                list.push(format('dynamic', base, p.concat(n, m), valInPart, valOutPart));\n              }\n            }\n          } else {\n            list.push(format('array', base, p.concat(n), valIn[n]));\n          }\n        }\n      } else {\n        for (n = 0; n < len; n++) {\n          item = arrayItems ? items[n] : items;\n          valInPart = valIn[n];\n          valOutPart = valOut[n];\n\n          if (!Lib.validate(valInPart, item)) {\n            list.push(format('value', base, p.concat(n), valInPart));\n          } else if (valOutPart !== valInPart && valOutPart !== +valInPart) {\n            list.push(format('dynamic', base, p.concat(n), valInPart, valOutPart));\n          }\n        }\n      }\n    } else if (nestedSchema.items && !isInfoArray && isArray(valIn)) {\n      var _nestedSchema = items[Object.keys(items)[0]];\n      var indexList = [];\n\n      var j, _p; // loop over valOut items while keeping track of their\n      // corresponding input container index (given by _index)\n\n\n      for (j = 0; j < valOut.length; j++) {\n        var _index = valOut[j]._index || j;\n\n        _p = p.slice();\n\n        _p.push(_index);\n\n        if (isPlainObject(valIn[_index]) && isPlainObject(valOut[j])) {\n          indexList.push(_index);\n          var valInj = valIn[_index];\n          var valOutj = valOut[j];\n\n          if (isPlainObject(valInj) && valInj.visible !== false && valOutj.visible === false) {\n            list.push(format('invisible', base, _p));\n          } else crawl(valInj, valOutj, _nestedSchema, list, base, _p);\n        }\n      } // loop over valIn to determine where it went wrong for some items\n\n\n      for (j = 0; j < valIn.length; j++) {\n        _p = p.slice();\n\n        _p.push(j);\n\n        if (!isPlainObject(valIn[j])) {\n          list.push(format('object', base, _p, valIn[j]));\n        } else if (indexList.indexOf(j) === -1) {\n          list.push(format('unused', base, _p));\n        }\n      }\n    } else if (!isPlainObject(valIn) && isPlainObject(valOut)) {\n      list.push(format('object', base, p, valIn));\n    } else if (!isArrayOrTypedArray(valIn) && isArrayOrTypedArray(valOut) && !isInfoArray && !isColorscale) {\n      list.push(format('array', base, p, valIn));\n    } else if (!(k in objOut)) {\n      list.push(format('unused', base, p, valIn));\n    } else if (!Lib.validate(valIn, nestedSchema)) {\n      list.push(format('value', base, p, valIn));\n    } else if (nestedSchema.valType === 'enumerated' && (nestedSchema.coerceNumber && valIn !== +valOut || valIn !== valOut)) {\n      list.push(format('dynamic', base, p, valIn, valOut));\n    }\n  }\n\n  return list;\n} // the 'full' layout schema depends on the traces types presents\n\n\nfunction fillLayoutSchema(schema, dataOut) {\n  var layoutSchema = schema.layout.layoutAttributes;\n\n  for (var i = 0; i < dataOut.length; i++) {\n    var traceOut = dataOut[i];\n    var traceSchema = schema.traces[traceOut.type];\n    var traceLayoutAttr = traceSchema.layoutAttributes;\n\n    if (traceLayoutAttr) {\n      if (traceOut.subplot) {\n        Lib.extendFlat(layoutSchema[traceSchema.attributes.subplot.dflt], traceLayoutAttr);\n      } else {\n        Lib.extendFlat(layoutSchema, traceLayoutAttr);\n      }\n    }\n  }\n\n  return layoutSchema;\n} // validation error codes\n\n\nvar code2msgFunc = {\n  object: function object(base, astr) {\n    var prefix;\n    if (base === 'layout' && astr === '') prefix = 'The layout argument';else if (base[0] === 'data' && astr === '') {\n      prefix = 'Trace ' + base[1] + ' in the data argument';\n    } else prefix = inBase(base) + 'key ' + astr;\n    return prefix + ' must be linked to an object container';\n  },\n  array: function array(base, astr) {\n    var prefix;\n    if (base === 'data') prefix = 'The data argument';else prefix = inBase(base) + 'key ' + astr;\n    return prefix + ' must be linked to an array container';\n  },\n  schema: function schema(base, astr) {\n    return inBase(base) + 'key ' + astr + ' is not part of the schema';\n  },\n  unused: function unused(base, astr, valIn) {\n    var target = isPlainObject(valIn) ? 'container' : 'key';\n    return inBase(base) + target + ' ' + astr + ' did not get coerced';\n  },\n  dynamic: function dynamic(base, astr, valIn, valOut) {\n    return [inBase(base) + 'key', astr, '(set to \\'' + valIn + '\\')', 'got reset to', '\\'' + valOut + '\\'', 'during defaults.'].join(' ');\n  },\n  invisible: function invisible(base, astr) {\n    return (astr ? inBase(base) + 'item ' + astr : 'Trace ' + base[1]) + ' got defaulted to be not visible';\n  },\n  value: function value(base, astr, valIn) {\n    return [inBase(base) + 'key ' + astr, 'is set to an invalid value (' + valIn + ')'].join(' ');\n  }\n};\n\nfunction inBase(base) {\n  if (isArray(base)) return 'In data trace ' + base[1] + ', ';\n  return 'In ' + base + ', ';\n}\n\nfunction format(code, base, path, valIn, valOut) {\n  path = path || '';\n  var container, trace; // container is either 'data' or 'layout\n  // trace is the trace index if 'data', null otherwise\n\n  if (isArray(base)) {\n    container = base[0];\n    trace = base[1];\n  } else {\n    container = base;\n    trace = null;\n  }\n\n  var astr = convertPathToAttributeString(path);\n  var msg = code2msgFunc[code](base, astr, valIn, valOut); // log to console if logger config option is enabled\n\n  Lib.log(msg);\n  return {\n    code: code,\n    container: container,\n    trace: trace,\n    path: path,\n    astr: astr,\n    msg: msg\n  };\n}\n\nfunction isInSchema(schema, key) {\n  var parts = splitKey(key);\n  var keyMinusId = parts.keyMinusId;\n  var id = parts.id;\n\n  if (keyMinusId in schema && schema[keyMinusId]._isSubplotObj && id) {\n    return true;\n  }\n\n  return key in schema;\n}\n\nfunction getNestedSchema(schema, key) {\n  if (key in schema) return schema[key];\n  var parts = splitKey(key);\n  return schema[parts.keyMinusId];\n}\n\nvar idRegex = Lib.counterRegex('([a-z]+)');\n\nfunction splitKey(key) {\n  var idMatch = key.match(idRegex);\n  return {\n    keyMinusId: idMatch && idMatch[1],\n    id: idMatch && idMatch[2]\n  };\n}\n\nfunction convertPathToAttributeString(path) {\n  if (!isArray(path)) return String(path);\n  var astr = '';\n\n  for (var i = 0; i < path.length; i++) {\n    var p = path[i];\n\n    if (typeof p === 'number') {\n      astr = astr.substr(0, astr.length - 1) + '[' + p + ']';\n    } else {\n      astr += p;\n    }\n\n    if (i < path.length - 1) astr += '.';\n  }\n\n  return astr;\n}","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plot_api/validate.js"],"names":["Lib","require","Plots","PlotSchema","dfltConfig","isPlainObject","isArray","Array","isArrayOrTypedArray","module","exports","validate","data","layout","schema","get","errorList","gd","_context","extendFlat","dataIn","layoutIn","extendDeep","push","format","arguments","length","supplyDefaults","dataOut","_fullData","len","i","traceIn","base","traceOut","traceType","type","traceSchema","traces","attributes","valType","values","visible","crawl","transformsIn","transforms","transformsOut","j","path","transformType","transformSchema","Object","keys","layoutOut","_fullLayout","layoutSchema","fillLayoutSchema","objIn","objOut","list","k","p","slice","valIn","valOut","nestedSchema","getNestedSchema","isInfoArray","isColorscale","items","isInSchema","concat","arrayItems","Math","min","m","n","item","valInPart","valOutPart","dimensions","len2","_nestedSchema","indexList","_p","_index","valInj","valOutj","indexOf","coerceNumber","layoutAttributes","traceLayoutAttr","subplot","dflt","code2msgFunc","object","astr","prefix","inBase","array","unused","target","dynamic","join","invisible","value","code","container","trace","convertPathToAttributeString","msg","log","key","parts","splitKey","keyMinusId","id","_isSubplotObj","idRegex","counterRegex","idMatch","match","String","substr"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Lib = require('../lib');\nvar Plots = require('../plots/plots');\nvar PlotSchema = require('./plot_schema');\nvar dfltConfig = require('./plot_config').dfltConfig;\n\nvar isPlainObject = Lib.isPlainObject;\nvar isArray = Array.isArray;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\n\n/**\n * Validate a data array and layout object.\n *\n * @param {array} data\n * @param {object} layout\n *\n * @return {array} array of error objects each containing:\n *  - {string} code\n *      error code ('object', 'array', 'schema', 'unused', 'invisible' or 'value')\n *  - {string} container\n *      container where the error occurs ('data' or 'layout')\n *  - {number} trace\n *      trace index of the 'data' container where the error occurs\n *  - {array} path\n *      nested path to the key that causes the error\n *  - {string} astr\n *      attribute string variant of 'path' compatible with Plotly.restyle and\n *      Plotly.relayout.\n *  - {string} msg\n *      error message (shown in console in logger config argument is enable)\n */\nmodule.exports = function validate(data, layout) {\n    var schema = PlotSchema.get();\n    var errorList = [];\n    var gd = {_context: Lib.extendFlat({}, dfltConfig)};\n\n    var dataIn, layoutIn;\n\n    if(isArray(data)) {\n        gd.data = Lib.extendDeep([], data);\n        dataIn = data;\n    } else {\n        gd.data = [];\n        dataIn = [];\n        errorList.push(format('array', 'data'));\n    }\n\n    if(isPlainObject(layout)) {\n        gd.layout = Lib.extendDeep({}, layout);\n        layoutIn = layout;\n    } else {\n        gd.layout = {};\n        layoutIn = {};\n        if(arguments.length > 1) {\n            errorList.push(format('object', 'layout'));\n        }\n    }\n\n    // N.B. dataIn and layoutIn are in general not the same as\n    // gd.data and gd.layout after supplyDefaults as some attributes\n    // in gd.data and gd.layout (still) get mutated during this step.\n\n    Plots.supplyDefaults(gd);\n\n    var dataOut = gd._fullData;\n    var len = dataIn.length;\n\n    for(var i = 0; i < len; i++) {\n        var traceIn = dataIn[i];\n        var base = ['data', i];\n\n        if(!isPlainObject(traceIn)) {\n            errorList.push(format('object', base));\n            continue;\n        }\n\n        var traceOut = dataOut[i];\n        var traceType = traceOut.type;\n        var traceSchema = schema.traces[traceType].attributes;\n\n        // PlotSchema does something fancy with trace 'type', reset it here\n        // to make the trace schema compatible with Lib.validate.\n        traceSchema.type = {\n            valType: 'enumerated',\n            values: [traceType]\n        };\n\n        if(traceOut.visible === false && traceIn.visible !== false) {\n            errorList.push(format('invisible', base));\n        }\n\n        crawl(traceIn, traceOut, traceSchema, errorList, base);\n\n        var transformsIn = traceIn.transforms;\n        var transformsOut = traceOut.transforms;\n\n        if(transformsIn) {\n            if(!isArray(transformsIn)) {\n                errorList.push(format('array', base, ['transforms']));\n            }\n\n            base.push('transforms');\n\n            for(var j = 0; j < transformsIn.length; j++) {\n                var path = ['transforms', j];\n                var transformType = transformsIn[j].type;\n\n                if(!isPlainObject(transformsIn[j])) {\n                    errorList.push(format('object', base, path));\n                    continue;\n                }\n\n                var transformSchema = schema.transforms[transformType] ?\n                    schema.transforms[transformType].attributes :\n                    {};\n\n                // add 'type' to transform schema to validate the transform type\n                transformSchema.type = {\n                    valType: 'enumerated',\n                    values: Object.keys(schema.transforms)\n                };\n\n                crawl(transformsIn[j], transformsOut[j], transformSchema, errorList, base, path);\n            }\n        }\n    }\n\n    var layoutOut = gd._fullLayout;\n    var layoutSchema = fillLayoutSchema(schema, dataOut);\n\n    crawl(layoutIn, layoutOut, layoutSchema, errorList, 'layout');\n\n    // return undefined if no validation errors were found\n    return (errorList.length === 0) ? void(0) : errorList;\n};\n\nfunction crawl(objIn, objOut, schema, list, base, path) {\n    path = path || [];\n\n    var keys = Object.keys(objIn);\n\n    for(var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n\n        // transforms are handled separately\n        if(k === 'transforms') continue;\n\n        var p = path.slice();\n        p.push(k);\n\n        var valIn = objIn[k];\n        var valOut = objOut[k];\n\n        var nestedSchema = getNestedSchema(schema, k);\n        var isInfoArray = (nestedSchema || {}).valType === 'info_array';\n        var isColorscale = (nestedSchema || {}).valType === 'colorscale';\n        var items = (nestedSchema || {}).items;\n\n        if(!isInSchema(schema, k)) {\n            list.push(format('schema', base, p));\n        } else if(isPlainObject(valIn) && isPlainObject(valOut)) {\n            crawl(valIn, valOut, nestedSchema, list, base, p);\n        } else if(isInfoArray && isArray(valIn)) {\n            if(valIn.length > valOut.length) {\n                list.push(format('unused', base, p.concat(valOut.length)));\n            }\n            var len = valOut.length;\n            var arrayItems = Array.isArray(items);\n            if(arrayItems) len = Math.min(len, items.length);\n            var m, n, item, valInPart, valOutPart;\n            if(nestedSchema.dimensions === 2) {\n                for(n = 0; n < len; n++) {\n                    if(isArray(valIn[n])) {\n                        if(valIn[n].length > valOut[n].length) {\n                            list.push(format('unused', base, p.concat(n, valOut[n].length)));\n                        }\n                        var len2 = valOut[n].length;\n                        for(m = 0; m < (arrayItems ? Math.min(len2, items[n].length) : len2); m++) {\n                            item = arrayItems ? items[n][m] : items;\n                            valInPart = valIn[n][m];\n                            valOutPart = valOut[n][m];\n                            if(!Lib.validate(valInPart, item)) {\n                                list.push(format('value', base, p.concat(n, m), valInPart));\n                            } else if(valOutPart !== valInPart && valOutPart !== +valInPart) {\n                                list.push(format('dynamic', base, p.concat(n, m), valInPart, valOutPart));\n                            }\n                        }\n                    } else {\n                        list.push(format('array', base, p.concat(n), valIn[n]));\n                    }\n                }\n            } else {\n                for(n = 0; n < len; n++) {\n                    item = arrayItems ? items[n] : items;\n                    valInPart = valIn[n];\n                    valOutPart = valOut[n];\n                    if(!Lib.validate(valInPart, item)) {\n                        list.push(format('value', base, p.concat(n), valInPart));\n                    } else if(valOutPart !== valInPart && valOutPart !== +valInPart) {\n                        list.push(format('dynamic', base, p.concat(n), valInPart, valOutPart));\n                    }\n                }\n            }\n        } else if(nestedSchema.items && !isInfoArray && isArray(valIn)) {\n            var _nestedSchema = items[Object.keys(items)[0]];\n            var indexList = [];\n\n            var j, _p;\n\n            // loop over valOut items while keeping track of their\n            // corresponding input container index (given by _index)\n            for(j = 0; j < valOut.length; j++) {\n                var _index = valOut[j]._index || j;\n\n                _p = p.slice();\n                _p.push(_index);\n\n                if(isPlainObject(valIn[_index]) && isPlainObject(valOut[j])) {\n                    indexList.push(_index);\n                    var valInj = valIn[_index];\n                    var valOutj = valOut[j];\n                    if(isPlainObject(valInj) && valInj.visible !== false && valOutj.visible === false) {\n                        list.push(format('invisible', base, _p));\n                    } else crawl(valInj, valOutj, _nestedSchema, list, base, _p);\n                }\n            }\n\n            // loop over valIn to determine where it went wrong for some items\n            for(j = 0; j < valIn.length; j++) {\n                _p = p.slice();\n                _p.push(j);\n\n                if(!isPlainObject(valIn[j])) {\n                    list.push(format('object', base, _p, valIn[j]));\n                } else if(indexList.indexOf(j) === -1) {\n                    list.push(format('unused', base, _p));\n                }\n            }\n        } else if(!isPlainObject(valIn) && isPlainObject(valOut)) {\n            list.push(format('object', base, p, valIn));\n        } else if(!isArrayOrTypedArray(valIn) && isArrayOrTypedArray(valOut) && !isInfoArray && !isColorscale) {\n            list.push(format('array', base, p, valIn));\n        } else if(!(k in objOut)) {\n            list.push(format('unused', base, p, valIn));\n        } else if(!Lib.validate(valIn, nestedSchema)) {\n            list.push(format('value', base, p, valIn));\n        } else if(nestedSchema.valType === 'enumerated' &&\n            ((nestedSchema.coerceNumber && valIn !== +valOut) || valIn !== valOut)\n        ) {\n            list.push(format('dynamic', base, p, valIn, valOut));\n        }\n    }\n\n    return list;\n}\n\n// the 'full' layout schema depends on the traces types presents\nfunction fillLayoutSchema(schema, dataOut) {\n    var layoutSchema = schema.layout.layoutAttributes;\n\n    for(var i = 0; i < dataOut.length; i++) {\n        var traceOut = dataOut[i];\n        var traceSchema = schema.traces[traceOut.type];\n        var traceLayoutAttr = traceSchema.layoutAttributes;\n\n        if(traceLayoutAttr) {\n            if(traceOut.subplot) {\n                Lib.extendFlat(layoutSchema[traceSchema.attributes.subplot.dflt], traceLayoutAttr);\n            } else {\n                Lib.extendFlat(layoutSchema, traceLayoutAttr);\n            }\n        }\n    }\n\n    return layoutSchema;\n}\n\n// validation error codes\nvar code2msgFunc = {\n    object: function(base, astr) {\n        var prefix;\n\n        if(base === 'layout' && astr === '') prefix = 'The layout argument';\n        else if(base[0] === 'data' && astr === '') {\n            prefix = 'Trace ' + base[1] + ' in the data argument';\n        } else prefix = inBase(base) + 'key ' + astr;\n\n        return prefix + ' must be linked to an object container';\n    },\n    array: function(base, astr) {\n        var prefix;\n\n        if(base === 'data') prefix = 'The data argument';\n        else prefix = inBase(base) + 'key ' + astr;\n\n        return prefix + ' must be linked to an array container';\n    },\n    schema: function(base, astr) {\n        return inBase(base) + 'key ' + astr + ' is not part of the schema';\n    },\n    unused: function(base, astr, valIn) {\n        var target = isPlainObject(valIn) ? 'container' : 'key';\n\n        return inBase(base) + target + ' ' + astr + ' did not get coerced';\n    },\n    dynamic: function(base, astr, valIn, valOut) {\n        return [\n            inBase(base) + 'key',\n            astr,\n            '(set to \\'' + valIn + '\\')',\n            'got reset to',\n            '\\'' + valOut + '\\'',\n            'during defaults.'\n        ].join(' ');\n    },\n    invisible: function(base, astr) {\n        return (\n            astr ? (inBase(base) + 'item ' + astr) : ('Trace ' + base[1])\n        ) + ' got defaulted to be not visible';\n    },\n    value: function(base, astr, valIn) {\n        return [\n            inBase(base) + 'key ' + astr,\n            'is set to an invalid value (' + valIn + ')'\n        ].join(' ');\n    }\n};\n\nfunction inBase(base) {\n    if(isArray(base)) return 'In data trace ' + base[1] + ', ';\n\n    return 'In ' + base + ', ';\n}\n\nfunction format(code, base, path, valIn, valOut) {\n    path = path || '';\n\n    var container, trace;\n\n    // container is either 'data' or 'layout\n    // trace is the trace index if 'data', null otherwise\n\n    if(isArray(base)) {\n        container = base[0];\n        trace = base[1];\n    } else {\n        container = base;\n        trace = null;\n    }\n\n    var astr = convertPathToAttributeString(path);\n    var msg = code2msgFunc[code](base, astr, valIn, valOut);\n\n    // log to console if logger config option is enabled\n    Lib.log(msg);\n\n    return {\n        code: code,\n        container: container,\n        trace: trace,\n        path: path,\n        astr: astr,\n        msg: msg\n    };\n}\n\nfunction isInSchema(schema, key) {\n    var parts = splitKey(key);\n    var keyMinusId = parts.keyMinusId;\n    var id = parts.id;\n\n    if((keyMinusId in schema) && schema[keyMinusId]._isSubplotObj && id) {\n        return true;\n    }\n\n    return (key in schema);\n}\n\nfunction getNestedSchema(schema, key) {\n    if(key in schema) return schema[key];\n\n    var parts = splitKey(key);\n\n    return schema[parts.keyMinusId];\n}\n\nvar idRegex = Lib.counterRegex('([a-z]+)');\n\nfunction splitKey(key) {\n    var idMatch = key.match(idRegex);\n\n    return {\n        keyMinusId: idMatch && idMatch[1],\n        id: idMatch && idMatch[2]\n    };\n}\n\nfunction convertPathToAttributeString(path) {\n    if(!isArray(path)) return String(path);\n\n    var astr = '';\n\n    for(var i = 0; i < path.length; i++) {\n        var p = path[i];\n\n        if(typeof p === 'number') {\n            astr = astr.substr(0, astr.length - 1) + '[' + p + ']';\n        } else {\n            astr += p;\n        }\n\n        if(i < path.length - 1) astr += '.';\n    }\n\n    return astr;\n}\n"]},"metadata":{},"sourceType":"script"}