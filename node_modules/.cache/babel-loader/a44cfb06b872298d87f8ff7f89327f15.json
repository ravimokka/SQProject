{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nmodule.exports = {\n  mode: {\n    valType: 'enumerated',\n    dflt: 'afterall',\n    role: 'info',\n    values: ['immediate', 'next', 'afterall'],\n    description: ['Describes how a new animate call interacts with currently-running', 'animations. If `immediate`, current animations are interrupted and', 'the new animation is started. If `next`, the current frame is allowed', 'to complete, after which the new animation is started. If `afterall`', 'all existing frames are animated to completion before the new animation', 'is started.'].join(' ')\n  },\n  direction: {\n    valType: 'enumerated',\n    role: 'info',\n    values: ['forward', 'reverse'],\n    dflt: 'forward',\n    description: ['The direction in which to play the frames triggered by the animation call'].join(' ')\n  },\n  fromcurrent: {\n    valType: 'boolean',\n    dflt: false,\n    role: 'info',\n    description: ['Play frames starting at the current frame instead of the beginning.'].join(' ')\n  },\n  frame: {\n    duration: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      dflt: 500,\n      description: ['The duration in milliseconds of each frame. If greater than the frame', 'duration, it will be limited to the frame duration.'].join(' ')\n    },\n    redraw: {\n      valType: 'boolean',\n      role: 'info',\n      dflt: true,\n      description: ['Redraw the plot at completion of the transition. This is desirable', 'for transitions that include properties that cannot be transitioned,', 'but may significantly slow down updates that do not require a full', 'redraw of the plot'].join(' ')\n    }\n  },\n  transition: {\n    duration: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      dflt: 500,\n      editType: 'none',\n      description: ['The duration of the transition, in milliseconds. If equal to zero,', 'updates are synchronous.'].join(' ')\n    },\n    easing: {\n      valType: 'enumerated',\n      dflt: 'cubic-in-out',\n      values: ['linear', 'quad', 'cubic', 'sin', 'exp', 'circle', 'elastic', 'back', 'bounce', 'linear-in', 'quad-in', 'cubic-in', 'sin-in', 'exp-in', 'circle-in', 'elastic-in', 'back-in', 'bounce-in', 'linear-out', 'quad-out', 'cubic-out', 'sin-out', 'exp-out', 'circle-out', 'elastic-out', 'back-out', 'bounce-out', 'linear-in-out', 'quad-in-out', 'cubic-in-out', 'sin-in-out', 'exp-in-out', 'circle-in-out', 'elastic-in-out', 'back-in-out', 'bounce-in-out'],\n      role: 'info',\n      editType: 'none',\n      description: 'The easing function used for the transition'\n    },\n    ordering: {\n      valType: 'enumerated',\n      values: ['layout first', 'traces first'],\n      dflt: 'layout first',\n      role: 'info',\n      editType: 'none',\n      description: ['Determines whether the figure\\'s layout or traces smoothly transitions', 'during updates that make both traces and layout change.'].join(' ')\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}