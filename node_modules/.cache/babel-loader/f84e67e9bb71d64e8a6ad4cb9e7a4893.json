{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as CustomizeUtils from '../utils/CustomizeUtils';\nvar DEFAULT_ERRORBAR_SHAPE = 'errorbar';\n\nfunction renderBarPath(points) {\n  return [['M', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['Z'], ['M', ((points[1].x || 0) + (points[2].x || 0)) / 2, ((points[1].y || 0) + (points[2].y || 0)) / 2], ['L', ((points[0].x || 0) + (points[3].x || 0)) / 2, ((points[0].y || 0) + (points[3].y || 0)) / 2], ['Z'], ['M', points[0].x, points[0].y], ['L', points[3].x, points[3].y], ['Z']];\n}\n\nexport var registerShape = function () {\n  var barWidth = 1;\n  var hasPoint = false;\n  CustomizeUtils.registerShape('schema', DEFAULT_ERRORBAR_SHAPE, {\n    getPoints: function (_a) {\n      var _b = _a.x,\n          x = _b === void 0 ? 0 : _b,\n          _c = _a.y,\n          y = _c === void 0 ? [0, 0, 0] : _c,\n          _d = _a.size,\n          size = _d === void 0 ? 0 : _d;\n      return [{\n        x: x - size / 2 * barWidth,\n        y: y[0]\n      }, {\n        x: x - size / 2 * barWidth,\n        y: y[2]\n      }, {\n        x: x + size / 2 * barWidth,\n        y: y[2]\n      }, {\n        x: x + size / 2 * barWidth,\n        y: y[0]\n      }, {\n        x: x,\n        y: y[1]\n      }, {\n        x: x - size / 2 * barWidth,\n        y: y[1]\n      }];\n    },\n    drawShape: function (cfg, group) {\n      var newGroup = group;\n      var points = cfg.points;\n      newGroup.addShape('path', {\n        attrs: __assign({\n          stroke: cfg.color,\n          strokeOpacity: cfg.opacity || 1,\n          lineWidth: cfg.style.lineWidth || 1,\n          fill: cfg.color,\n          opacity: cfg.opacity || 1,\n          path: this.parsePath(renderBarPath(points))\n        }, cfg.style)\n      });\n\n      if (hasPoint) {\n        newGroup.addShape('circle', {\n          attrs: __assign({\n            stroke: cfg.color,\n            strokeOpacity: cfg.opacity || 1,\n            lineWidth: cfg.style.lineWidth || 1,\n            fill: cfg.color,\n            opacity: cfg.opacity || 1,\n            x: this.parsePoint(points[4]).x,\n            y: this.parsePoint(points[4]).y,\n            r: cfg.style.lineWidth + 0.5 || 1.5\n          }, cfg.style)\n        });\n      }\n\n      return newGroup;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/shapes/ErrorBar.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as CustomizeUtils from '../utils/CustomizeUtils';\nvar DEFAULT_ERRORBAR_SHAPE = 'errorbar';\nfunction renderBarPath(points) {\n    return [\n        ['M', points[1].x, points[1].y],\n        ['L', points[2].x, points[2].y],\n        ['Z'],\n        ['M', ((points[1].x || 0) + (points[2].x || 0)) / 2, ((points[1].y || 0) + (points[2].y || 0)) / 2],\n        ['L', ((points[0].x || 0) + (points[3].x || 0)) / 2, ((points[0].y || 0) + (points[3].y || 0)) / 2],\n        ['Z'],\n        ['M', points[0].x, points[0].y],\n        ['L', points[3].x, points[3].y],\n        ['Z'],\n    ];\n}\nexport var registerShape = function () {\n    var barWidth = 1;\n    var hasPoint = false;\n    CustomizeUtils.registerShape('schema', DEFAULT_ERRORBAR_SHAPE, {\n        getPoints: function (_a) {\n            var _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? [0, 0, 0] : _c, _d = _a.size, size = _d === void 0 ? 0 : _d;\n            return [\n                { x: x - (size / 2) * barWidth, y: y[0] },\n                { x: x - (size / 2) * barWidth, y: y[2] },\n                { x: x + (size / 2) * barWidth, y: y[2] },\n                { x: x + (size / 2) * barWidth, y: y[0] },\n                { x: x, y: y[1] },\n                { x: x - (size / 2) * barWidth, y: y[1] },\n            ];\n        },\n        drawShape: function (cfg, group) {\n            var newGroup = group;\n            var points = cfg.points;\n            newGroup.addShape('path', {\n                attrs: __assign({ stroke: cfg.color, strokeOpacity: cfg.opacity || 1, lineWidth: cfg.style.lineWidth || 1, fill: cfg.color, opacity: cfg.opacity || 1, path: this.parsePath(renderBarPath(points)) }, cfg.style)\n            });\n            if (hasPoint) {\n                newGroup.addShape('circle', {\n                    attrs: __assign({ stroke: cfg.color, strokeOpacity: cfg.opacity || 1, lineWidth: cfg.style.lineWidth || 1, fill: cfg.color, opacity: cfg.opacity || 1, x: this.parsePoint(points[4]).x, y: this.parsePoint(points[4]).y, r: cfg.style.lineWidth + 0.5 || 1.5 }, cfg.style)\n                });\n            }\n            return newGroup;\n        }\n    });\n};\n//# sourceMappingURL=ErrorBar.js.map"]},"metadata":{},"sourceType":"module"}