{"ast":null,"code":"import * as CustomizeUtils from '../utils/CustomizeUtils';\nvar DEFAULT_SANKEY_SHAPE = 'sankey';\n\nfunction interpolationGenerator(a, b) {\n  var ka = +a;\n  var kb = b - ka;\n  return function (t) {\n    return ka + kb * t;\n  };\n}\n\nfunction getCurvePath(from, to, curvature) {\n  var interpolationFunc = interpolationGenerator(from.x, to.x);\n  var fromCtrlX = interpolationFunc(curvature);\n  var toCtrlX = interpolationFunc(1 - curvature);\n  var points = ['C', fromCtrlX, from.y, toCtrlX, to.y, to.x, to.y];\n  return points;\n}\n\nfunction getEdgePath(points, curvature) {\n  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y]];\n  var c1 = getCurvePath(points[1], points[3], curvature);\n  path.push(c1);\n  path.push(['L', points[3].x, points[3].y]);\n  path.push(['L', points[2].x, points[2].y]);\n  var c2 = getCurvePath(points[2], points[0], curvature);\n  path.push(c2);\n  path.push(['Z']);\n  return path;\n}\n\nexport var registerShape = function () {\n  CustomizeUtils.registerShape('edge', DEFAULT_SANKEY_SHAPE, {\n    drawShape: function (cfg, group) {\n      var points = cfg.points,\n          style = cfg.style;\n      var curvature = style.curvature || 0.5;\n      var path = this.parsePath(getEdgePath(points, curvature));\n      var shape = group.addShape('path', {\n        attrs: {\n          stroke: 'none',\n          strokeOpacity: 0,\n          fill: cfg.color,\n          opacity: cfg.opacity,\n          path: path\n        }\n      });\n      return shape;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/shapes/Sankey.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as CustomizeUtils from '../utils/CustomizeUtils';\nvar DEFAULT_SANKEY_SHAPE = 'sankey';\nfunction interpolationGenerator(a, b) {\n    var ka = +a;\n    var kb = b - ka;\n    return function (t) { return ka + kb * t; };\n}\nfunction getCurvePath(from, to, curvature) {\n    var interpolationFunc = interpolationGenerator(from.x, to.x);\n    var fromCtrlX = interpolationFunc(curvature);\n    var toCtrlX = interpolationFunc(1 - curvature);\n    var points = [\n        'C',\n        fromCtrlX, from.y,\n        toCtrlX, to.y,\n        to.x, to.y,\n    ];\n    return points;\n}\nfunction getEdgePath(points, curvature) {\n    var path = [\n        ['M', points[0].x, points[0].y],\n        ['L', points[1].x, points[1].y],\n    ];\n    var c1 = getCurvePath(points[1], points[3], curvature);\n    path.push(c1);\n    path.push(['L', points[3].x, points[3].y]);\n    path.push(['L', points[2].x, points[2].y]);\n    var c2 = getCurvePath(points[2], points[0], curvature);\n    path.push(c2);\n    path.push(['Z']);\n    return path;\n}\nexport var registerShape = function () {\n    CustomizeUtils.registerShape('edge', DEFAULT_SANKEY_SHAPE, {\n        drawShape: function (cfg, group) {\n            var points = cfg.points, style = cfg.style;\n            var curvature = style.curvature || 0.5;\n            var path = this.parsePath(getEdgePath(points, curvature));\n            var shape = group.addShape('path', {\n                attrs: {\n                    stroke: 'none',\n                    strokeOpacity: 0,\n                    fill: cfg.color,\n                    opacity: cfg.opacity,\n                    path: path\n                }\n            });\n            return shape;\n        }\n    });\n};\n//# sourceMappingURL=Sankey.js.map"]},"metadata":{},"sourceType":"module"}