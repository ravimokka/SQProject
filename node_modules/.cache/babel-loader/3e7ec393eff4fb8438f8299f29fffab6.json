{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\n\nvar handleTickValueDefaults = require('./tick_value_defaults');\n\nvar handleTickMarkDefaults = require('./tick_mark_defaults');\n\nvar handleTickLabelDefaults = require('./tick_label_defaults');\n\nvar handleCategoryOrderDefaults = require('./category_order_defaults');\n\nvar handleLineGridDefaults = require('./line_grid_defaults');\n\nvar setConvert = require('./set_convert');\n/**\n * options: object containing:\n *\n *  letter: 'x' or 'y'\n *  title: name of the axis (ie 'Colorbar') to go in default title\n *  font: the default font to inherit\n *  outerTicks: boolean, should ticks default to outside?\n *  showGrid: boolean, should gridlines be shown by default?\n *  noHover: boolean, this axis doesn't support hover effects?\n *  noTickson: boolean, this axis doesn't support 'tickson'\n *  data: the plot data, used to manage categories\n *  bgColor: the plot background color, to calculate default gridline colors\n *  calendar:\n *  splomStash:\n *  visibleDflt: boolean\n *  reverseDflt: boolean\n *  automargin: boolean\n */\n\n\nmodule.exports = function handleAxisDefaults(containerIn, containerOut, coerce, options, layoutOut) {\n  var letter = options.letter;\n  var font = options.font || {};\n  var splomStash = options.splomStash || {};\n  var visible = coerce('visible', !options.visibleDflt);\n  var axType = containerOut.type;\n\n  if (axType === 'date') {\n    var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleDefaults');\n    handleCalendarDefaults(containerIn, containerOut, 'calendar', options.calendar);\n  }\n\n  setConvert(containerOut, layoutOut);\n  var autorangeDflt = !containerOut.isValidRange(containerIn.range);\n  if (autorangeDflt && options.reverseDflt) autorangeDflt = 'reversed';\n  var autoRange = coerce('autorange', autorangeDflt);\n  if (autoRange && (axType === 'linear' || axType === '-')) coerce('rangemode');\n  coerce('range');\n  containerOut.cleanRange();\n  handleCategoryOrderDefaults(containerIn, containerOut, coerce, options);\n  if (axType !== 'category' && !options.noHover) coerce('hoverformat');\n  var dfltColor = coerce('color'); // if axis.color was provided, use it for fonts too; otherwise,\n  // inherit from global font color in case that was provided.\n  // Compare to dflt rather than to containerIn, so we can provide color via\n  // template too.\n\n  var dfltFontColor = dfltColor !== layoutAttributes.color.dflt ? dfltColor : font.color; // try to get default title from splom trace, fallback to graph-wide value\n\n  var dfltTitle = splomStash.label || layoutOut._dfltTitle[letter];\n  handleTickLabelDefaults(containerIn, containerOut, coerce, axType, options, {\n    pass: 1\n  });\n  if (!visible) return containerOut;\n  coerce('title.text', dfltTitle);\n  Lib.coerceFont(coerce, 'title.font', {\n    family: font.family,\n    size: Math.round(font.size * 1.2),\n    color: dfltFontColor\n  });\n  handleTickValueDefaults(containerIn, containerOut, coerce, axType);\n  handleTickLabelDefaults(containerIn, containerOut, coerce, axType, options, {\n    pass: 2\n  });\n  handleTickMarkDefaults(containerIn, containerOut, coerce, options);\n  handleLineGridDefaults(containerIn, containerOut, coerce, {\n    dfltColor: dfltColor,\n    bgColor: options.bgColor,\n    showGrid: options.showGrid,\n    attributes: layoutAttributes\n  });\n  if (containerOut.showline || containerOut.ticks) coerce('mirror');\n  if (options.automargin) coerce('automargin');\n  var isMultiCategory = containerOut.type === 'multicategory';\n\n  if (!options.noTickson && (containerOut.type === 'category' || isMultiCategory) && (containerOut.ticks || containerOut.showgrid)) {\n    var ticksonDflt;\n    if (isMultiCategory) ticksonDflt = 'boundaries';\n    coerce('tickson', ticksonDflt);\n  }\n\n  if (isMultiCategory) {\n    var showDividers = coerce('showdividers');\n\n    if (showDividers) {\n      coerce('dividercolor');\n      coerce('dividerwidth');\n    }\n  }\n\n  return containerOut;\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/cartesian/axis_defaults.js"],"names":["Registry","require","Lib","layoutAttributes","handleTickValueDefaults","handleTickMarkDefaults","handleTickLabelDefaults","handleCategoryOrderDefaults","handleLineGridDefaults","setConvert","module","exports","handleAxisDefaults","containerIn","containerOut","coerce","options","layoutOut","letter","font","splomStash","visible","visibleDflt","axType","type","handleCalendarDefaults","getComponentMethod","calendar","autorangeDflt","isValidRange","range","reverseDflt","autoRange","cleanRange","noHover","dfltColor","dfltFontColor","color","dflt","dfltTitle","label","_dfltTitle","pass","coerceFont","family","size","Math","round","bgColor","showGrid","attributes","showline","ticks","automargin","isMultiCategory","noTickson","showgrid","ticksonDflt","showDividers"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\n\nvar layoutAttributes = require('./layout_attributes');\nvar handleTickValueDefaults = require('./tick_value_defaults');\nvar handleTickMarkDefaults = require('./tick_mark_defaults');\nvar handleTickLabelDefaults = require('./tick_label_defaults');\nvar handleCategoryOrderDefaults = require('./category_order_defaults');\nvar handleLineGridDefaults = require('./line_grid_defaults');\nvar setConvert = require('./set_convert');\n\n/**\n * options: object containing:\n *\n *  letter: 'x' or 'y'\n *  title: name of the axis (ie 'Colorbar') to go in default title\n *  font: the default font to inherit\n *  outerTicks: boolean, should ticks default to outside?\n *  showGrid: boolean, should gridlines be shown by default?\n *  noHover: boolean, this axis doesn't support hover effects?\n *  noTickson: boolean, this axis doesn't support 'tickson'\n *  data: the plot data, used to manage categories\n *  bgColor: the plot background color, to calculate default gridline colors\n *  calendar:\n *  splomStash:\n *  visibleDflt: boolean\n *  reverseDflt: boolean\n *  automargin: boolean\n */\nmodule.exports = function handleAxisDefaults(containerIn, containerOut, coerce, options, layoutOut) {\n    var letter = options.letter;\n    var font = options.font || {};\n    var splomStash = options.splomStash || {};\n\n    var visible = coerce('visible', !options.visibleDflt);\n\n    var axType = containerOut.type;\n\n    if(axType === 'date') {\n        var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleDefaults');\n        handleCalendarDefaults(containerIn, containerOut, 'calendar', options.calendar);\n    }\n\n    setConvert(containerOut, layoutOut);\n\n    var autorangeDflt = !containerOut.isValidRange(containerIn.range);\n    if(autorangeDflt && options.reverseDflt) autorangeDflt = 'reversed';\n    var autoRange = coerce('autorange', autorangeDflt);\n    if(autoRange && (axType === 'linear' || axType === '-')) coerce('rangemode');\n\n    coerce('range');\n    containerOut.cleanRange();\n\n    handleCategoryOrderDefaults(containerIn, containerOut, coerce, options);\n\n    if(axType !== 'category' && !options.noHover) coerce('hoverformat');\n\n    var dfltColor = coerce('color');\n    // if axis.color was provided, use it for fonts too; otherwise,\n    // inherit from global font color in case that was provided.\n    // Compare to dflt rather than to containerIn, so we can provide color via\n    // template too.\n    var dfltFontColor = (dfltColor !== layoutAttributes.color.dflt) ? dfltColor : font.color;\n    // try to get default title from splom trace, fallback to graph-wide value\n    var dfltTitle = splomStash.label || layoutOut._dfltTitle[letter];\n\n    handleTickLabelDefaults(containerIn, containerOut, coerce, axType, options, {pass: 1});\n    if(!visible) return containerOut;\n\n    coerce('title.text', dfltTitle);\n    Lib.coerceFont(coerce, 'title.font', {\n        family: font.family,\n        size: Math.round(font.size * 1.2),\n        color: dfltFontColor\n    });\n\n    handleTickValueDefaults(containerIn, containerOut, coerce, axType);\n    handleTickLabelDefaults(containerIn, containerOut, coerce, axType, options, {pass: 2});\n    handleTickMarkDefaults(containerIn, containerOut, coerce, options);\n    handleLineGridDefaults(containerIn, containerOut, coerce, {\n        dfltColor: dfltColor,\n        bgColor: options.bgColor,\n        showGrid: options.showGrid,\n        attributes: layoutAttributes\n    });\n\n    if(containerOut.showline || containerOut.ticks) coerce('mirror');\n\n    if(options.automargin) coerce('automargin');\n\n    var isMultiCategory = containerOut.type === 'multicategory';\n\n    if(!options.noTickson &&\n        (containerOut.type === 'category' || isMultiCategory) &&\n        (containerOut.ticks || containerOut.showgrid)\n    ) {\n        var ticksonDflt;\n        if(isMultiCategory) ticksonDflt = 'boundaries';\n        coerce('tickson', ticksonDflt);\n    }\n\n    if(isMultiCategory) {\n        var showDividers = coerce('showdividers');\n        if(showDividers) {\n            coerce('dividercolor');\n            coerce('dividerwidth');\n        }\n    }\n\n    return containerOut;\n};\n"]},"metadata":{},"sourceType":"script"}