{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar tinycolor = require('tinycolor2');\n\nvar Registry = require('../../registry');\n\nvar Lib = require('../../lib');\n\nvar makeColorScaleFuncFromTrace = require('../../components/colorscale').makeColorScaleFuncFromTrace;\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nmodule.exports = function (gd, plotinfo, cdheatmaps, heatmapLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(heatmapLayer, cdheatmaps, 'hm').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var z = cd0.z;\n    var x = cd0.x;\n    var y = cd0.y;\n    var xc = cd0.xCenter;\n    var yc = cd0.yCenter;\n    var isContour = Registry.traceIs(trace, 'contour');\n    var zsmooth = isContour ? 'best' : trace.zsmooth; // get z dims\n\n    var m = z.length;\n    var n = Lib.maxRowLength(z);\n    var xrev = false;\n    var yrev = false;\n    var left, right, temp, top, bottom, i; // TODO: if there are multiple overlapping categorical heatmaps,\n    // or if we allow category sorting, then the categories may not be\n    // sequential... may need to reorder and/or expand z\n    // Get edges of png in pixels (xa.c2p() maps axes coordinates to pixel coordinates)\n    // figure out if either axis is reversed (y is usually reversed, in pixel coords)\n    // also clip the image to maximum 50% outside the visible plot area\n    // bigger image lets you pan more naturally, but slows performance.\n    // TODO: use low-resolution images outside the visible plot for panning\n    // these while loops find the first and last brick bounds that are defined\n    // (in case of log of a negative)\n\n    i = 0;\n\n    while (left === undefined && i < x.length - 1) {\n      left = xa.c2p(x[i]);\n      i++;\n    }\n\n    i = x.length - 1;\n\n    while (right === undefined && i > 0) {\n      right = xa.c2p(x[i]);\n      i--;\n    }\n\n    if (right < left) {\n      temp = right;\n      right = left;\n      left = temp;\n      xrev = true;\n    }\n\n    i = 0;\n\n    while (top === undefined && i < y.length - 1) {\n      top = ya.c2p(y[i]);\n      i++;\n    }\n\n    i = y.length - 1;\n\n    while (bottom === undefined && i > 0) {\n      bottom = ya.c2p(y[i]);\n      i--;\n    }\n\n    if (bottom < top) {\n      temp = top;\n      top = bottom;\n      bottom = temp;\n      yrev = true;\n    } // for contours with heatmap fill, we generate the boundaries based on\n    // brick centers but then use the brick edges for drawing the bricks\n\n\n    if (isContour) {\n      xc = x;\n      yc = y;\n      x = cd0.xfill;\n      y = cd0.yfill;\n    } // make an image that goes at most half a screen off either side, to keep\n    // time reasonable when you zoom in. if zsmooth is true/fast, don't worry\n    // about this, because zooming doesn't increase number of pixels\n    // if zsmooth is best, don't include anything off screen because it takes too long\n\n\n    if (zsmooth !== 'fast') {\n      var extra = zsmooth === 'best' ? 0 : 0.5;\n      left = Math.max(-extra * xa._length, left);\n      right = Math.min((1 + extra) * xa._length, right);\n      top = Math.max(-extra * ya._length, top);\n      bottom = Math.min((1 + extra) * ya._length, bottom);\n    }\n\n    var imageWidth = Math.round(right - left);\n    var imageHeight = Math.round(bottom - top); // setup image nodes\n    // if image is entirely off-screen, don't even draw it\n\n    var isOffScreen = imageWidth <= 0 || imageHeight <= 0;\n\n    if (isOffScreen) {\n      var noImage = plotGroup.selectAll('image').data([]);\n      noImage.exit().remove();\n      return;\n    } // generate image data\n\n\n    var canvasW, canvasH;\n\n    if (zsmooth === 'fast') {\n      canvasW = n;\n      canvasH = m;\n    } else {\n      canvasW = imageWidth;\n      canvasH = imageHeight;\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = canvasW;\n    canvas.height = canvasH;\n    var context = canvas.getContext('2d');\n    var sclFunc = makeColorScaleFuncFromTrace(trace, {\n      noNumericCheck: true,\n      returnArray: true\n    }); // map brick boundaries to image pixels\n\n    var xpx, ypx;\n\n    if (zsmooth === 'fast') {\n      xpx = xrev ? function (index) {\n        return n - 1 - index;\n      } : Lib.identity;\n      ypx = yrev ? function (index) {\n        return m - 1 - index;\n      } : Lib.identity;\n    } else {\n      xpx = function (index) {\n        return Lib.constrain(Math.round(xa.c2p(x[index]) - left), 0, imageWidth);\n      };\n\n      ypx = function (index) {\n        return Lib.constrain(Math.round(ya.c2p(y[index]) - top), 0, imageHeight);\n      };\n    } // build the pixel map brick-by-brick\n    // cruise through z-matrix row-by-row\n    // build a brick at each z-matrix value\n\n\n    var yi = ypx(0);\n    var yb = [yi, yi];\n    var xbi = xrev ? 0 : 1;\n    var ybi = yrev ? 0 : 1; // for collecting an average luminosity of the heatmap\n\n    var pixcount = 0;\n    var rcount = 0;\n    var gcount = 0;\n    var bcount = 0;\n    var xb, j, xi, v, row, c;\n\n    function setColor(v, pixsize) {\n      if (v !== undefined) {\n        var c = sclFunc(v);\n        c[0] = Math.round(c[0]);\n        c[1] = Math.round(c[1]);\n        c[2] = Math.round(c[2]);\n        pixcount += pixsize;\n        rcount += c[0] * pixsize;\n        gcount += c[1] * pixsize;\n        bcount += c[2] * pixsize;\n        return c;\n      }\n\n      return [0, 0, 0, 0];\n    }\n\n    function interpColor(r0, r1, xinterp, yinterp) {\n      var z00 = r0[xinterp.bin0];\n      if (z00 === undefined) return setColor(undefined, 1);\n      var z01 = r0[xinterp.bin1];\n      var z10 = r1[xinterp.bin0];\n      var z11 = r1[xinterp.bin1];\n      var dx = z01 - z00 || 0;\n      var dy = z10 - z00 || 0;\n      var dxy; // the bilinear interpolation term needs different calculations\n      // for all the different permutations of missing data\n      // among the neighbors of the main point, to ensure\n      // continuity across brick boundaries.\n\n      if (z01 === undefined) {\n        if (z11 === undefined) dxy = 0;else if (z10 === undefined) dxy = 2 * (z11 - z00);else dxy = (2 * z11 - z10 - z00) * 2 / 3;\n      } else if (z11 === undefined) {\n        if (z10 === undefined) dxy = 0;else dxy = (2 * z00 - z01 - z10) * 2 / 3;\n      } else if (z10 === undefined) dxy = (2 * z11 - z01 - z00) * 2 / 3;else dxy = z11 + z00 - z01 - z10;\n\n      return setColor(z00 + xinterp.frac * dx + yinterp.frac * (dy + xinterp.frac * dxy));\n    }\n\n    if (zsmooth) {\n      // best or fast, works fastest with imageData\n      var pxIndex = 0;\n      var pixels;\n\n      try {\n        pixels = new Uint8Array(imageWidth * imageHeight * 4);\n      } catch (e) {\n        pixels = new Array(imageWidth * imageHeight * 4);\n      }\n\n      if (zsmooth === 'best') {\n        var xForPx = xc || x;\n        var yForPx = yc || y;\n        var xPixArray = new Array(xForPx.length);\n        var yPixArray = new Array(yForPx.length);\n        var xinterpArray = new Array(imageWidth);\n        var findInterpX = xc ? findInterpFromCenters : findInterp;\n        var findInterpY = yc ? findInterpFromCenters : findInterp;\n        var yinterp, r0, r1; // first make arrays of x and y pixel locations of brick boundaries\n\n        for (i = 0; i < xForPx.length; i++) xPixArray[i] = Math.round(xa.c2p(xForPx[i]) - left);\n\n        for (i = 0; i < yForPx.length; i++) yPixArray[i] = Math.round(ya.c2p(yForPx[i]) - top); // then make arrays of interpolations\n        // (bin0=closest, bin1=next, frac=fractional dist.)\n\n\n        for (i = 0; i < imageWidth; i++) xinterpArray[i] = findInterpX(i, xPixArray); // now do the interpolations and fill the png\n\n\n        for (j = 0; j < imageHeight; j++) {\n          yinterp = findInterpY(j, yPixArray);\n          r0 = z[yinterp.bin0];\n          r1 = z[yinterp.bin1];\n\n          for (i = 0; i < imageWidth; i++, pxIndex += 4) {\n            c = interpColor(r0, r1, xinterpArray[i], yinterp);\n            putColor(pixels, pxIndex, c);\n          }\n        }\n      } else {\n        // zsmooth = fast\n        for (j = 0; j < m; j++) {\n          row = z[j];\n          yb = ypx(j);\n\n          for (i = 0; i < imageWidth; i++) {\n            c = setColor(row[i], 1);\n            pxIndex = (yb * imageWidth + xpx(i)) * 4;\n            putColor(pixels, pxIndex, c);\n          }\n        }\n      }\n\n      var imageData = context.createImageData(imageWidth, imageHeight);\n\n      try {\n        imageData.data.set(pixels);\n      } catch (e) {\n        var pxArray = imageData.data;\n        var dlen = pxArray.length;\n\n        for (j = 0; j < dlen; j++) {\n          pxArray[j] = pixels[j];\n        }\n      }\n\n      context.putImageData(imageData, 0, 0);\n    } else {\n      // zsmooth = false -> filling potentially large bricks works fastest with fillRect\n      // gaps do not need to be exact integers, but if they *are* we will get\n      // cleaner edges by rounding at least one edge\n      var xGap = trace.xgap;\n      var yGap = trace.ygap;\n      var xGapLeft = Math.floor(xGap / 2);\n      var yGapTop = Math.floor(yGap / 2);\n\n      for (j = 0; j < m; j++) {\n        row = z[j];\n        yb.reverse();\n        yb[ybi] = ypx(j + 1);\n\n        if (yb[0] === yb[1] || yb[0] === undefined || yb[1] === undefined) {\n          continue;\n        }\n\n        xi = xpx(0);\n        xb = [xi, xi];\n\n        for (i = 0; i < n; i++) {\n          // build one color brick!\n          xb.reverse();\n          xb[xbi] = xpx(i + 1);\n\n          if (xb[0] === xb[1] || xb[0] === undefined || xb[1] === undefined) {\n            continue;\n          }\n\n          v = row[i];\n          c = setColor(v, (xb[1] - xb[0]) * (yb[1] - yb[0]));\n          context.fillStyle = 'rgba(' + c.join(',') + ')';\n          context.fillRect(xb[0] + xGapLeft, yb[0] + yGapTop, xb[1] - xb[0] - xGap, yb[1] - yb[0] - yGap);\n        }\n      }\n    }\n\n    rcount = Math.round(rcount / pixcount);\n    gcount = Math.round(gcount / pixcount);\n    bcount = Math.round(bcount / pixcount);\n    var avgColor = tinycolor('rgb(' + rcount + ',' + gcount + ',' + bcount + ')');\n    gd._hmpixcount = (gd._hmpixcount || 0) + pixcount;\n    gd._hmlumcount = (gd._hmlumcount || 0) + pixcount * avgColor.getLuminance();\n    var image3 = plotGroup.selectAll('image').data(cd);\n    image3.enter().append('svg:image').attr({\n      xmlns: xmlnsNamespaces.svg,\n      preserveAspectRatio: 'none'\n    });\n    image3.attr({\n      height: imageHeight,\n      width: imageWidth,\n      x: left,\n      y: top,\n      'xlink:href': canvas.toDataURL('image/png')\n    });\n  });\n}; // get interpolated bin value. Returns {bin0:closest bin, frac:fractional dist to next, bin1:next bin}\n\n\nfunction findInterp(pixel, pixArray) {\n  var maxBin = pixArray.length - 2;\n  var bin = Lib.constrain(Lib.findBin(pixel, pixArray), 0, maxBin);\n  var pix0 = pixArray[bin];\n  var pix1 = pixArray[bin + 1];\n  var interp = Lib.constrain(bin + (pixel - pix0) / (pix1 - pix0) - 0.5, 0, maxBin);\n  var bin0 = Math.round(interp);\n  var frac = Math.abs(interp - bin0);\n\n  if (!interp || interp === maxBin || !frac) {\n    return {\n      bin0: bin0,\n      bin1: bin0,\n      frac: 0\n    };\n  }\n\n  return {\n    bin0: bin0,\n    frac: frac,\n    bin1: Math.round(bin0 + frac / (interp - bin0))\n  };\n}\n\nfunction findInterpFromCenters(pixel, centerPixArray) {\n  var maxBin = centerPixArray.length - 1;\n  var bin = Lib.constrain(Lib.findBin(pixel, centerPixArray), 0, maxBin);\n  var pix0 = centerPixArray[bin];\n  var pix1 = centerPixArray[bin + 1];\n  var frac = (pixel - pix0) / (pix1 - pix0) || 0;\n\n  if (frac <= 0) {\n    return {\n      bin0: bin,\n      bin1: bin,\n      frac: 0\n    };\n  }\n\n  if (frac < 0.5) {\n    return {\n      bin0: bin,\n      bin1: bin + 1,\n      frac: frac\n    };\n  }\n\n  return {\n    bin0: bin + 1,\n    bin1: bin,\n    frac: 1 - frac\n  };\n}\n\nfunction putColor(pixels, pxIndex, c) {\n  pixels[pxIndex] = c[0];\n  pixels[pxIndex + 1] = c[1];\n  pixels[pxIndex + 2] = c[2];\n  pixels[pxIndex + 3] = Math.round(c[3] * 255);\n}","map":null,"metadata":{},"sourceType":"script"}