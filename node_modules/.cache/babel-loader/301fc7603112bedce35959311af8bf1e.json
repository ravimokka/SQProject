{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar Color = require('../color');\n\nvar ARROWPATHS = require('./arrow_paths');\n/**\n * Add arrowhead(s) to a path or line element\n *\n * @param {d3.selection} el3: a d3-selected line or path element\n *\n * @param {string} ends: 'none', 'start', 'end', or 'start+end' for which ends get arrowheads\n *\n * @param {object} options: style information. Must have all the following:\n * @param {number} options.arrowhead: end head style - see ./arrow_paths\n * @param {number} options.startarrowhead: start head style - see ./arrow_paths\n * @param {number} options.arrowsize: relative size of the end head vs line width\n * @param {number} options.startarrowsize: relative size of the start head vs line width\n * @param {number} options.standoff: distance in px to move the end arrow point from its target\n * @param {number} options.startstandoff: distance in px to move the start arrow point from its target\n * @param {number} options.arrowwidth: width of the arrow line\n * @param {string} options.arrowcolor: color of the arrow line, for the head to match\n *     Note that the opacity of this color is ignored, as it's assumed the container\n *     of both the line and head has opacity applied to it so there isn't greater opacity\n *     where they overlap.\n */\n\n\nmodule.exports = function drawArrowHead(el3, ends, options) {\n  var el = el3.node();\n  var headStyle = ARROWPATHS[options.arrowhead || 0];\n  var startHeadStyle = ARROWPATHS[options.startarrowhead || 0];\n  var scale = (options.arrowwidth || 1) * (options.arrowsize || 1);\n  var startScale = (options.arrowwidth || 1) * (options.startarrowsize || 1);\n  var doStart = ends.indexOf('start') >= 0;\n  var doEnd = ends.indexOf('end') >= 0;\n  var backOff = headStyle.backoff * scale + options.standoff;\n  var startBackOff = startHeadStyle.backoff * startScale + options.startstandoff;\n  var start, end, startRot, endRot;\n\n  if (el.nodeName === 'line') {\n    start = {\n      x: +el3.attr('x1'),\n      y: +el3.attr('y1')\n    };\n    end = {\n      x: +el3.attr('x2'),\n      y: +el3.attr('y2')\n    };\n    var dx = start.x - end.x;\n    var dy = start.y - end.y;\n    startRot = Math.atan2(dy, dx);\n    endRot = startRot + Math.PI;\n\n    if (backOff && startBackOff) {\n      if (backOff + startBackOff > Math.sqrt(dx * dx + dy * dy)) {\n        hideLine();\n        return;\n      }\n    }\n\n    if (backOff) {\n      if (backOff * backOff > dx * dx + dy * dy) {\n        hideLine();\n        return;\n      }\n\n      var backOffX = backOff * Math.cos(startRot);\n      var backOffY = backOff * Math.sin(startRot);\n      end.x += backOffX;\n      end.y += backOffY;\n      el3.attr({\n        x2: end.x,\n        y2: end.y\n      });\n    }\n\n    if (startBackOff) {\n      if (startBackOff * startBackOff > dx * dx + dy * dy) {\n        hideLine();\n        return;\n      }\n\n      var startBackOffX = startBackOff * Math.cos(startRot);\n      var startbackOffY = startBackOff * Math.sin(startRot);\n      start.x -= startBackOffX;\n      start.y -= startbackOffY;\n      el3.attr({\n        x1: start.x,\n        y1: start.y\n      });\n    }\n  } else if (el.nodeName === 'path') {\n    var pathlen = el.getTotalLength(); // using dash to hide the backOff region of the path.\n    // if we ever allow dash for the arrow we'll have to\n    // do better than this hack... maybe just manually\n    // combine the two\n\n    var dashArray = '';\n\n    if (pathlen < backOff + startBackOff) {\n      hideLine();\n      return;\n    }\n\n    var start0 = el.getPointAtLength(0);\n    var dstart = el.getPointAtLength(0.1);\n    startRot = Math.atan2(start0.y - dstart.y, start0.x - dstart.x);\n    start = el.getPointAtLength(Math.min(startBackOff, pathlen));\n    dashArray = '0px,' + startBackOff + 'px,';\n    var end0 = el.getPointAtLength(pathlen);\n    var dend = el.getPointAtLength(pathlen - 0.1);\n    endRot = Math.atan2(end0.y - dend.y, end0.x - dend.x);\n    end = el.getPointAtLength(Math.max(0, pathlen - backOff));\n    var shortening = dashArray ? startBackOff + backOff : backOff;\n    dashArray += pathlen - shortening + 'px,' + pathlen + 'px';\n    el3.style('stroke-dasharray', dashArray);\n  }\n\n  function hideLine() {\n    el3.style('stroke-dasharray', '0px,100px');\n  }\n\n  function drawhead(arrowHeadStyle, p, rot, arrowScale) {\n    if (!arrowHeadStyle.path) return;\n    if (arrowHeadStyle.noRotate) rot = 0;\n    d3.select(el.parentNode).append('path').attr({\n      'class': el3.attr('class'),\n      d: arrowHeadStyle.path,\n      transform: 'translate(' + p.x + ',' + p.y + ')' + (rot ? 'rotate(' + rot * 180 / Math.PI + ')' : '') + 'scale(' + arrowScale + ')'\n    }).style({\n      fill: Color.rgb(options.arrowcolor),\n      'stroke-width': 0\n    });\n  }\n\n  if (doStart) drawhead(startHeadStyle, start, startRot, startScale);\n  if (doEnd) drawhead(headStyle, end, endRot, scale);\n};","map":null,"metadata":{},"sourceType":"script"}