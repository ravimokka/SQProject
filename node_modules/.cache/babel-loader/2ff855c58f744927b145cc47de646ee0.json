{"ast":null,"code":"import * as _ from 'lodash';\nimport * as EventUtils from '../utils/EventUtils';\nimport * as setCustomFormatter from './setCustomFormatter';\nimport * as setQuickType from './setQuickType';\n\nfunction setSeriesGemo(chart, currSeries) {\n  var gemo = currSeries.gemo;\n\n  switch (gemo) {\n    case 'line':\n      chart = chart.line();\n      break;\n\n    case 'area':\n      chart = chart.area();\n      break;\n\n    case 'bar':\n    case 'interval':\n      chart = chart.interval();\n      break;\n\n    case 'point':\n      chart = chart.point();\n      break;\n\n    case 'schema':\n      chart = chart.schema();\n      break;\n\n    case 'polygon':\n      chart = chart.polygon();\n      break;\n\n    case 'contour':\n      chart = chart.contour();\n      break;\n\n    case 'heatmap':\n      chart = chart.heatmap();\n      break;\n\n    case 'edge':\n      chart = chart.edge();\n      break;\n\n    case 'path':\n      chart = chart.path();\n      break;\n\n    case 'venn':\n      chart = chart.venn();\n      break;\n\n    default:\n      chart = chart.line();\n  }\n\n  return chart;\n}\n\nfunction setSeriesPosition(chart, currSeries) {\n  var position = currSeries.position;\n\n  if (!_.isNil(position)) {\n    return chart.position(position);\n  }\n\n  return chart;\n}\n\nfunction setSeriesAdjust(chart, currSeries) {\n  var adjust = currSeries.adjust;\n\n  if (!_.isNil(adjust)) {\n    return chart.adjust(adjust);\n  }\n\n  return chart;\n}\n\nfunction setSeriesShape(chart, currSeries) {\n  var shape = currSeries.shape;\n\n  if (_.isString(shape)) {\n    return chart.shape(shape);\n  }\n\n  if (_.isArray(shape) && shape.length >= 1) {\n    if (shape[1]) {\n      return chart.shape(shape[0], shape[1]);\n    }\n\n    return chart.shape(shape[0]);\n  }\n\n  return chart;\n}\n\nfunction setSeriesColor(chart, currSeries) {\n  var color = currSeries.color;\n\n  if (_.isString(color)) {\n    return chart.color(color);\n  }\n\n  if (_.isArray(color) && color.length >= 1) {\n    if (color[1]) {\n      return chart.color(color[0], color[1]);\n    }\n\n    return chart.color(color[0]);\n  }\n\n  return chart;\n}\n\nfunction setSeriesSize(chart, currSeries) {\n  var size = currSeries.size;\n\n  if (_.isNumber(size) || _.isString(size)) {\n    return chart.size(size);\n  }\n\n  if (_.isArray(size) && size.length >= 1) {\n    if (size[1]) {\n      return chart.size(size[0], size[1]);\n    }\n\n    return chart.size(size[0]);\n  }\n\n  return chart;\n}\n\nfunction setSeriesOpacity(chart, currSeries) {\n  var opacity = currSeries.opacity;\n\n  if (_.isNumber(opacity) || _.isString(opacity)) {\n    return chart.opacity(opacity);\n  }\n\n  if (_.isArray(opacity) && opacity.length >= 1) {\n    if (opacity[1]) {\n      return chart.opacity(opacity[0], opacity[1]);\n    }\n\n    return chart.opacity(opacity[0]);\n  }\n\n  return chart;\n}\n\nfunction setSeriesLabel(chart, currSeries) {\n  var label = currSeries.label;\n\n  if (_.isString(label)) {\n    return chart.label(label);\n  }\n\n  if (_.isArray(label) && label.length >= 2) {\n    if (_.isNumber(label[1].density) && 0 < label[1].density && label[1].density < 1 && (_.isFunction(label[1].formatter) || _.isString(label[1].formatter))) {\n      var gap_1 = Math.floor(1 / label[1].density);\n      var formatter_1 = _.isString(label[1].formatter) ? setCustomFormatter.supportD3Formatter(label[1]).formatter : label[1].formatter;\n\n      label[1].formatter = function (val, item, i) {\n        if (i % gap_1) {\n          return ' ';\n        } else {\n          return formatter_1(val, item, i);\n        }\n      };\n    }\n\n    return chart.label.apply(chart, label);\n  }\n\n  return chart;\n}\n\nfunction setSeriesStyle(chart, currSeries) {\n  var style = currSeries.style;\n\n  if (_.isArray(style) && style.length >= 1) {\n    if (style[1]) {\n      return chart.style(style[0], style[1]);\n    }\n\n    return chart.style(style[0]);\n  }\n\n  if (_.isPlainObject(style)) {\n    return chart.style(style);\n  }\n\n  return chart;\n}\n\nfunction setSeriesTooltip(chart, currSeries) {\n  var tooltip = currSeries.tooltip;\n\n  if (_.isBoolean(tooltip) || _.isString(tooltip)) {\n    return chart.tooltip(tooltip);\n  }\n\n  if (_.isArray(tooltip) && tooltip.length >= 1) {\n    if (tooltip[1]) {\n      return chart.tooltip(tooltip[0], tooltip[1]);\n    }\n\n    return chart.tooltip(tooltip[0]);\n  }\n\n  return chart;\n}\n\nfunction setSeriesSelect(chart, currSeries) {\n  var select = currSeries.select;\n\n  if (_.isBoolean(select)) {\n    return chart.select(select);\n  }\n\n  if (_.isArray(select) && select.length >= 1) {\n    if (select[1]) {\n      return chart.select(select[0], select[1]);\n    }\n\n    return chart.select(select[0]);\n  }\n\n  return chart;\n}\n\nfunction setSeriesActive(chart, currSeries) {\n  var active = currSeries.active;\n\n  if (_.isArray(active)) {\n    return chart.active.apply(chart, active);\n  }\n\n  if (_.isBoolean(active) || _.isPlainObject(active)) {\n    return chart.active(active);\n  }\n\n  return chart;\n}\n\nfunction setSeriesAnimate(chart, currSeries) {\n  var animate = currSeries.animate;\n\n  if (!_.isEmpty(animate)) {\n    return chart.animate(animate);\n  }\n\n  return chart;\n}\n\nexport var process = function (chart, config) {\n  var cSeries = _.cloneDeep(config.series);\n\n  var isArr = _.isArray(cSeries);\n\n  if (_.isNil(cSeries) || _.isEmpty(cSeries)) {\n    return chart;\n  }\n\n  var arrSeries = isArr ? cSeries : [cSeries];\n  arrSeries = setQuickType.process(arrSeries, config.coord);\n  arrSeries = _.sortBy(arrSeries, 'zIndex');\n  var chartInstance;\n  arrSeries.forEach(function (currSeries) {\n    EventUtils.setEvent(chart, currSeries.gemo, currSeries);\n\n    for (var item in currSeries) {\n      if (currSeries.hasOwnProperty(item)) {\n        EventUtils.setSEvent(chart, 'label', name, currSeries[item]);\n      }\n    }\n\n    chartInstance = setSeriesGemo(chart, currSeries);\n    chartInstance = setSeriesPosition(chartInstance, currSeries);\n    chartInstance = setSeriesAdjust(chartInstance, currSeries);\n    chartInstance = setSeriesShape(chartInstance, currSeries);\n    chartInstance = setSeriesColor(chartInstance, currSeries);\n    chartInstance = setSeriesOpacity(chartInstance, currSeries);\n    chartInstance = setSeriesSize(chartInstance, currSeries);\n    chartInstance = setSeriesLabel(chartInstance, currSeries);\n    chartInstance = setSeriesTooltip(chartInstance, currSeries);\n    chartInstance = setSeriesStyle(chartInstance, currSeries);\n    chartInstance = setSeriesSelect(chartInstance, currSeries);\n    chartInstance = setSeriesActive(chartInstance, currSeries);\n    chartInstance = setSeriesAnimate(chartInstance, currSeries);\n  });\n  return chartInstance;\n};","map":null,"metadata":{},"sourceType":"module"}