{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar Drawing = require('../drawing');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nmodule.exports = function draw(gd) {\n  var fullLayout = gd._fullLayout;\n  var imageDataAbove = [];\n  var imageDataSubplot = {};\n  var imageDataBelow = [];\n  var subplot;\n  var i; // Sort into top, subplot, and bottom layers\n\n  for (i = 0; i < fullLayout.images.length; i++) {\n    var img = fullLayout.images[i];\n\n    if (img.visible) {\n      if (img.layer === 'below' && img.xref !== 'paper' && img.yref !== 'paper') {\n        subplot = img.xref + img.yref;\n        var plotinfo = fullLayout._plots[subplot];\n\n        if (!plotinfo) {\n          // Fall back to _imageLowerLayer in case the requested subplot doesn't exist.\n          // This can happen if you reference the image to an x / y axis combination\n          // that doesn't have any data on it (and layer is below)\n          imageDataBelow.push(img);\n          continue;\n        }\n\n        if (plotinfo.mainplot) {\n          subplot = plotinfo.mainplot.id;\n        }\n\n        if (!imageDataSubplot[subplot]) {\n          imageDataSubplot[subplot] = [];\n        }\n\n        imageDataSubplot[subplot].push(img);\n      } else if (img.layer === 'above') {\n        imageDataAbove.push(img);\n      } else {\n        imageDataBelow.push(img);\n      }\n    }\n  }\n\n  var anchors = {\n    x: {\n      left: {\n        sizing: 'xMin',\n        offset: 0\n      },\n      center: {\n        sizing: 'xMid',\n        offset: -1 / 2\n      },\n      right: {\n        sizing: 'xMax',\n        offset: -1\n      }\n    },\n    y: {\n      top: {\n        sizing: 'YMin',\n        offset: 0\n      },\n      middle: {\n        sizing: 'YMid',\n        offset: -1 / 2\n      },\n      bottom: {\n        sizing: 'YMax',\n        offset: -1\n      }\n    }\n  }; // Images must be converted to dataURL's for exporting.\n\n  function setImage(d) {\n    var thisImage = d3.select(this);\n\n    if (this._imgSrc === d.source) {\n      return;\n    }\n\n    thisImage.attr('xmlns', xmlnsNamespaces.svg);\n\n    if (d.source && d.source.slice(0, 5) === 'data:') {\n      thisImage.attr('xlink:href', d.source);\n      this._imgSrc = d.source;\n    } else {\n      var imagePromise = new Promise(function (resolve) {\n        var img = new Image();\n        this.img = img; // If not set, a `tainted canvas` error is thrown\n\n        img.setAttribute('crossOrigin', 'anonymous');\n        img.onerror = errorHandler;\n\n        img.onload = function () {\n          var canvas = document.createElement('canvas');\n          canvas.width = this.width;\n          canvas.height = this.height;\n          var ctx = canvas.getContext('2d');\n          ctx.drawImage(this, 0, 0);\n          var dataURL = canvas.toDataURL('image/png');\n          thisImage.attr('xlink:href', dataURL); // resolve promise in onload handler instead of on 'load' to support IE11\n          // see https://github.com/plotly/plotly.js/issues/1685\n          // for more details\n\n          resolve();\n        };\n\n        thisImage.on('error', errorHandler);\n        img.src = d.source;\n        this._imgSrc = d.source;\n\n        function errorHandler() {\n          thisImage.remove();\n          resolve();\n        }\n      }.bind(this));\n\n      gd._promises.push(imagePromise);\n    }\n  }\n\n  function applyAttributes(d) {\n    var thisImage = d3.select(this); // Axes if specified\n\n    var xa = Axes.getFromId(gd, d.xref);\n    var ya = Axes.getFromId(gd, d.yref);\n    var size = fullLayout._size;\n    var width = xa ? Math.abs(xa.l2p(d.sizex) - xa.l2p(0)) : d.sizex * size.w;\n    var height = ya ? Math.abs(ya.l2p(d.sizey) - ya.l2p(0)) : d.sizey * size.h; // Offsets for anchor positioning\n\n    var xOffset = width * anchors.x[d.xanchor].offset;\n    var yOffset = height * anchors.y[d.yanchor].offset;\n    var sizing = anchors.x[d.xanchor].sizing + anchors.y[d.yanchor].sizing; // Final positions\n\n    var xPos = (xa ? xa.r2p(d.x) + xa._offset : d.x * size.w + size.l) + xOffset;\n    var yPos = (ya ? ya.r2p(d.y) + ya._offset : size.h - d.y * size.h + size.t) + yOffset; // Construct the proper aspectRatio attribute\n\n    switch (d.sizing) {\n      case 'fill':\n        sizing += ' slice';\n        break;\n\n      case 'stretch':\n        sizing = 'none';\n        break;\n    }\n\n    thisImage.attr({\n      x: xPos,\n      y: yPos,\n      width: width,\n      height: height,\n      preserveAspectRatio: sizing,\n      opacity: d.opacity\n    }); // Set proper clipping on images\n\n    var xId = xa ? xa._id : '';\n    var yId = ya ? ya._id : '';\n    var clipAxes = xId + yId;\n    Drawing.setClipUrl(thisImage, clipAxes ? 'clip' + fullLayout._uid + clipAxes : null, gd);\n  }\n\n  var imagesBelow = fullLayout._imageLowerLayer.selectAll('image').data(imageDataBelow);\n\n  var imagesAbove = fullLayout._imageUpperLayer.selectAll('image').data(imageDataAbove);\n\n  imagesBelow.enter().append('image');\n  imagesAbove.enter().append('image');\n  imagesBelow.exit().remove();\n  imagesAbove.exit().remove();\n  imagesBelow.each(function (d) {\n    setImage.bind(this)(d);\n    applyAttributes.bind(this)(d);\n  });\n  imagesAbove.each(function (d) {\n    setImage.bind(this)(d);\n    applyAttributes.bind(this)(d);\n  });\n  var allSubplots = Object.keys(fullLayout._plots);\n\n  for (i = 0; i < allSubplots.length; i++) {\n    subplot = allSubplots[i];\n    var subplotObj = fullLayout._plots[subplot]; // filter out overlaid plots (which havd their images on the main plot)\n    // and gl2d plots (which don't support below images, at least not yet)\n\n    if (!subplotObj.imagelayer) continue;\n    var imagesOnSubplot = subplotObj.imagelayer.selectAll('image') // even if there are no images on this subplot, we need to run\n    // enter and exit in case there were previously\n    .data(imageDataSubplot[subplot] || []);\n    imagesOnSubplot.enter().append('image');\n    imagesOnSubplot.exit().remove();\n    imagesOnSubplot.each(function (d) {\n      setImage.bind(this)(d);\n      applyAttributes.bind(this)(d);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}