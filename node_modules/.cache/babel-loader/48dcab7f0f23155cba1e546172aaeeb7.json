{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar BADNUM = require('../constants/numerical').BADNUM;\n/**\n * Convert calcTrace to GeoJSON 'MultiLineString' coordinate arrays\n *\n * @param {object} calcTrace\n *  gd.calcdata item.\n *  Note that calcTrace[i].lonlat is assumed to be defined\n *\n * @return {array}\n *  return line coords array (or array of arrays)\n *\n */\n\n\nexports.calcTraceToLineCoords = function (calcTrace) {\n  var trace = calcTrace[0].trace;\n  var connectgaps = trace.connectgaps;\n  var coords = [];\n  var lineString = [];\n\n  for (var i = 0; i < calcTrace.length; i++) {\n    var calcPt = calcTrace[i];\n    var lonlat = calcPt.lonlat;\n\n    if (lonlat[0] !== BADNUM) {\n      lineString.push(lonlat);\n    } else if (!connectgaps && lineString.length > 0) {\n      coords.push(lineString);\n      lineString = [];\n    }\n  }\n\n  if (lineString.length > 0) {\n    coords.push(lineString);\n  }\n\n  return coords;\n};\n/**\n * Make line ('LineString' or 'MultiLineString') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n *\n */\n\n\nexports.makeLine = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'LineString',\n      coordinates: coords[0]\n    };\n  } else {\n    return {\n      type: 'MultiLineString',\n      coordinates: coords\n    };\n  }\n};\n/**\n * Make polygon ('Polygon' or 'MultiPolygon') GeoJSON\n *\n * @param {array} coords\n *  results form calcTraceToLineCoords\n * @return {object} out\n *  GeoJSON object\n */\n\n\nexports.makePolygon = function (coords) {\n  if (coords.length === 1) {\n    return {\n      type: 'Polygon',\n      coordinates: coords\n    };\n  } else {\n    var _coords = new Array(coords.length);\n\n    for (var i = 0; i < coords.length; i++) {\n      _coords[i] = [coords[i]];\n    }\n\n    return {\n      type: 'MultiPolygon',\n      coordinates: _coords\n    };\n  }\n};\n/**\n * Make blank GeoJSON\n *\n * @return {object}\n *  Blank GeoJSON object\n *\n */\n\n\nexports.makeBlank = function () {\n  return {\n    type: 'Point',\n    coordinates: []\n  };\n};","map":null,"metadata":{},"sourceType":"script"}