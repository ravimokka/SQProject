{"ast":null,"code":"// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc\n// MIT License\n// Project Home: https://github.com/voidqk/polybooljs\n//\n// filter a list of segments based on boolean operations\n//\nfunction select(segments, selection, buildLog) {\n  var result = [];\n  segments.forEach(function (seg) {\n    var index = (seg.myFill.above ? 8 : 0) + (seg.myFill.below ? 4 : 0) + (seg.otherFill && seg.otherFill.above ? 2 : 0) + (seg.otherFill && seg.otherFill.below ? 1 : 0);\n\n    if (selection[index] !== 0) {\n      // copy the segment to the results, while also calculating the fill status\n      result.push({\n        id: buildLog ? buildLog.segmentId() : -1,\n        start: seg.start,\n        end: seg.end,\n        myFill: {\n          above: selection[index] === 1,\n          // 1 if filled above\n          below: selection[index] === 2 // 2 if filled below\n\n        },\n        otherFill: null\n      });\n    }\n  });\n  if (buildLog) buildLog.selected(result);\n  return result;\n}\n\nvar SegmentSelector = {\n  union: function (segments, buildLog) {\n    // primary | secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   yes filled below    2\n    //    0      0      1      0   =>   yes filled above    1\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   yes filled below    2\n    //    0      1      0      1   =>   yes filled below    2\n    //    0      1      1      0   =>   no                  0\n    //    0      1      1      1   =>   no                  0\n    //    1      0      0      0   =>   yes filled above    1\n    //    1      0      0      1   =>   no                  0\n    //    1      0      1      0   =>   yes filled above    1\n    //    1      0      1      1   =>   no                  0\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   no                  0\n    //    1      1      1      0   =>   no                  0\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 2, 1, 0, 2, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], buildLog);\n  },\n  intersect: function (segments, buildLog) {\n    // primary & secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   no                  0\n    //    0      0      1      0   =>   no                  0\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   no                  0\n    //    0      1      0      1   =>   yes filled below    2\n    //    0      1      1      0   =>   no                  0\n    //    0      1      1      1   =>   yes filled below    2\n    //    1      0      0      0   =>   no                  0\n    //    1      0      0      1   =>   no                  0\n    //    1      0      1      0   =>   yes filled above    1\n    //    1      0      1      1   =>   yes filled above    1\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   yes filled below    2\n    //    1      1      1      0   =>   yes filled above    1\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0], buildLog);\n  },\n  difference: function (segments, buildLog) {\n    // primary - secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   no                  0\n    //    0      0      1      0   =>   no                  0\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   yes filled below    2\n    //    0      1      0      1   =>   no                  0\n    //    0      1      1      0   =>   yes filled below    2\n    //    0      1      1      1   =>   no                  0\n    //    1      0      0      0   =>   yes filled above    1\n    //    1      0      0      1   =>   yes filled above    1\n    //    1      0      1      0   =>   no                  0\n    //    1      0      1      1   =>   no                  0\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   yes filled above    1\n    //    1      1      1      0   =>   yes filled below    2\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 0, 0, 0, 2, 0, 2, 0, 1, 1, 0, 0, 0, 1, 2, 0], buildLog);\n  },\n  differenceRev: function (segments, buildLog) {\n    // secondary - primary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   yes filled below    2\n    //    0      0      1      0   =>   yes filled above    1\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   no                  0\n    //    0      1      0      1   =>   no                  0\n    //    0      1      1      0   =>   yes filled above    1\n    //    0      1      1      1   =>   yes filled above    1\n    //    1      0      0      0   =>   no                  0\n    //    1      0      0      1   =>   yes filled below    2\n    //    1      0      1      0   =>   no                  0\n    //    1      0      1      1   =>   yes filled below    2\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   no                  0\n    //    1      1      1      0   =>   no                  0\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 0, 2, 0, 0, 0, 0], buildLog);\n  },\n  xor: function (segments, buildLog) {\n    // primary ^ secondary\n    // above1 below1 above2 below2    Keep?               Value\n    //    0      0      0      0   =>   no                  0\n    //    0      0      0      1   =>   yes filled below    2\n    //    0      0      1      0   =>   yes filled above    1\n    //    0      0      1      1   =>   no                  0\n    //    0      1      0      0   =>   yes filled below    2\n    //    0      1      0      1   =>   no                  0\n    //    0      1      1      0   =>   no                  0\n    //    0      1      1      1   =>   yes filled above    1\n    //    1      0      0      0   =>   yes filled above    1\n    //    1      0      0      1   =>   no                  0\n    //    1      0      1      0   =>   no                  0\n    //    1      0      1      1   =>   yes filled below    2\n    //    1      1      0      0   =>   no                  0\n    //    1      1      0      1   =>   yes filled above    1\n    //    1      1      1      0   =>   yes filled below    2\n    //    1      1      1      1   =>   no                  0\n    return select(segments, [0, 2, 1, 0, 2, 0, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0], buildLog);\n  }\n};\nmodule.exports = SegmentSelector;","map":null,"metadata":{},"sourceType":"script"}