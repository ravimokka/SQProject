{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n/* eslint-disable new-cap */\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../../../lib');\n\nvar Color = require('../../../components/color');\n\nvar micropolar = require('./micropolar');\n\nvar UndoManager = require('./undo_manager');\n\nvar extendDeepAll = Lib.extendDeepAll;\nvar manager = module.exports = {};\n\nmanager.framework = function (_gd) {\n  var config, previousConfigClone, plot, convertedInput, container;\n  var undoManager = new UndoManager();\n\n  function exports(_inputConfig, _container) {\n    if (_container) container = _container;\n    d3.select(d3.select(container).node().parentNode).selectAll('.svg-container>*:not(.chart-root)').remove();\n    config = !config ? _inputConfig : extendDeepAll(config, _inputConfig);\n    if (!plot) plot = micropolar.Axis();\n    convertedInput = micropolar.adapter.plotly().convert(config);\n    plot.config(convertedInput).render(container);\n    _gd.data = config.data;\n    _gd.layout = config.layout;\n    manager.fillLayout(_gd);\n    return config;\n  }\n\n  exports.isPolar = true;\n\n  exports.svg = function () {\n    return plot.svg();\n  };\n\n  exports.getConfig = function () {\n    return config;\n  };\n\n  exports.getLiveConfig = function () {\n    return micropolar.adapter.plotly().convert(plot.getLiveConfig(), true);\n  };\n\n  exports.getLiveScales = function () {\n    return {\n      t: plot.angularScale(),\n      r: plot.radialScale()\n    };\n  };\n\n  exports.setUndoPoint = function () {\n    var that = this;\n    var configClone = micropolar.util.cloneJson(config);\n\n    (function (_configClone, _previousConfigClone) {\n      undoManager.add({\n        undo: function () {\n          if (_previousConfigClone) that(_previousConfigClone);\n        },\n        redo: function () {\n          that(_configClone);\n        }\n      });\n    })(configClone, previousConfigClone);\n\n    previousConfigClone = micropolar.util.cloneJson(configClone);\n  };\n\n  exports.undo = function () {\n    undoManager.undo();\n  };\n\n  exports.redo = function () {\n    undoManager.redo();\n  };\n\n  return exports;\n};\n\nmanager.fillLayout = function (_gd) {\n  var container = d3.select(_gd).selectAll('.plot-container');\n  var paperDiv = container.selectAll('.svg-container');\n\n  var paper = _gd.framework && _gd.framework.svg && _gd.framework.svg();\n\n  var dflts = {\n    width: 800,\n    height: 600,\n    paper_bgcolor: Color.background,\n    _container: container,\n    _paperdiv: paperDiv,\n    _paper: paper\n  };\n  _gd._fullLayout = extendDeepAll(dflts, _gd.layout);\n};","map":null,"metadata":{},"sourceType":"script"}