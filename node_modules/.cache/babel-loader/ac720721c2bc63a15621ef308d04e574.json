{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isPlainObject = require('./is_plain_object.js');\n\nvar isArray = Array.isArray;\n\nfunction primitivesLoopSplice(source, target) {\n  var i, value;\n\n  for (i = 0; i < source.length; i++) {\n    value = source[i];\n\n    if (value !== null && typeof value === 'object') {\n      return false;\n    }\n\n    if (value !== void 0) {\n      target[i] = value;\n    }\n  }\n\n  return true;\n}\n\nexports.extendFlat = function () {\n  return _extend(arguments, false, false, false);\n};\n\nexports.extendDeep = function () {\n  return _extend(arguments, true, false, false);\n};\n\nexports.extendDeepAll = function () {\n  return _extend(arguments, true, true, false);\n};\n\nexports.extendDeepNoArrays = function () {\n  return _extend(arguments, true, false, true);\n};\n/*\n * Inspired by https://github.com/justmoon/node-extend/blob/master/index.js\n * All credit to the jQuery authors for perfecting this amazing utility.\n *\n * API difference with jQuery version:\n * - No optional boolean (true -> deep extend) first argument,\n *   use `extendFlat` for first-level only extend and\n *   use `extendDeep` for a deep extend.\n *\n * Other differences with jQuery version:\n * - Uses a modern (and faster) isPlainObject routine.\n * - Expected to work with object {} and array [] arguments only.\n * - Does not check for circular structure.\n *   FYI: jQuery only does a check across one level.\n *   Warning: this might result in infinite loops.\n *\n */\n\n\nfunction _extend(inputs, isDeep, keepAllKeys, noArrayCopies) {\n  var target = inputs[0];\n  var length = inputs.length;\n  var input, key, src, copy, copyIsArray, clone, allPrimitives; // TODO does this do the right thing for typed arrays?\n\n  if (length === 2 && isArray(target) && isArray(inputs[1]) && target.length === 0) {\n    allPrimitives = primitivesLoopSplice(inputs[1], target);\n\n    if (allPrimitives) {\n      return target;\n    } else {\n      target.splice(0, target.length); // reset target and continue to next block\n    }\n  }\n\n  for (var i = 1; i < length; i++) {\n    input = inputs[i];\n\n    for (key in input) {\n      src = target[key];\n      copy = input[key];\n\n      if (noArrayCopies && isArray(copy)) {\n        // Stop early and just transfer the array if array copies are disallowed:\n        target[key] = copy;\n      } else if (isDeep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n        // recurse if we're merging plain objects or arrays\n        if (copyIsArray) {\n          copyIsArray = false;\n          clone = src && isArray(src) ? src : [];\n        } else {\n          clone = src && isPlainObject(src) ? src : {};\n        } // never move original objects, clone them\n\n\n        target[key] = _extend([clone, copy], isDeep, keepAllKeys, noArrayCopies);\n      } else if (typeof copy !== 'undefined' || keepAllKeys) {\n        // don't bring in undefined values, except for extendDeepAll\n        target[key] = copy;\n      }\n    }\n  }\n\n  return target;\n}","map":null,"metadata":{},"sourceType":"script"}