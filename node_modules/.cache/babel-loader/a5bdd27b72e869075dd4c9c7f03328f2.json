{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _styles = require('@material-ui/core/styles');\n\nvar _util = require('./util');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar clipPath = function clipPath(value) {\n  return {\n    WebkitClipPath: value,\n    clipPath: value\n  };\n};\n\nvar styles = {\n  root: {\n    width: 24,\n    height: 24,\n    position: 'relative',\n    display: 'inline-block'\n  },\n  offIcon: {\n    transition: 'clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1), -webkit-clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    left: 0,\n    top: 0\n  },\n  onIcon: {\n    transition: 'clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1), -webkit-clip-path 550ms cubic-bezier(0.4, 0.0, 0.2, 1)',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    left: 0,\n    top: 0\n    /**\n     * An animated toggle icon.\n     */\n\n  }\n};\n\nfunction ToggleIcon(props) {\n  var classes = props.classes,\n      className = props.className,\n      offIcon = props.offIcon,\n      onIcon = props.onIcon,\n      on = props.on,\n      other = _objectWithoutProperties(props, ['classes', 'className', 'offIcon', 'onIcon', 'on']);\n\n  return _react2.default.createElement('div', _extends({\n    className: classes.root + ' ' + (className || '')\n  }, other), _react2.default.cloneElement(offIcon, {\n    className: classes.offIcon,\n    style: _extends({}, clipPath(on ? 'polygon(0% 0%, 0% 0%, 0% 0%)' : 'polygon(0% 200%, 0% 0%, 200% 0%)'), {\n      visibility: !on || (0, _util.clipPathSupported)() ? 'visible' : 'hidden'\n    })\n  }), _react2.default.cloneElement(onIcon, {\n    className: classes.onIcon,\n    style: _extends({}, clipPath(on ? 'polygon(100% -100%, 100% 100%, -100% 100%)' : 'polygon(100% 100%, 100% 100%, 100% 100%)'), {\n      visibility: on || (0, _util.clipPathSupported)() ? 'visible' : 'hidden'\n    })\n  }));\n}\n\nToggleIcon.propTypes = {\n  /**\n   * The icon to be displayed if the `on` prop is set to `false`.\n   */\n  offIcon: _propTypes2.default.element.isRequired,\n\n  /**\n   * The icon to be displayed if the `on` prop is set to `true`.\n   */\n  onIcon: _propTypes2.default.element.isRequired,\n\n  /**\n   * Controls whether the `onIcon` or the `offIcon` is displayed.\n   */\n  on: _propTypes2.default.bool.isRequired\n};\nexports.default = (0, _styles.withStyles)(styles)(ToggleIcon);","map":null,"metadata":{},"sourceType":"script"}