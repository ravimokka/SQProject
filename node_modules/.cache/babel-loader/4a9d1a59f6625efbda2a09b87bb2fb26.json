{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar mod = require('./mod').mod;\n/*\n * look for intersection of two line segments\n *   (1->2 and 3->4) - returns array [x,y] if they do, null if not\n */\n\n\nexports.segmentsIntersect = segmentsIntersect;\n\nfunction segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n  var a = x2 - x1;\n  var b = x3 - x1;\n  var c = x4 - x3;\n  var d = y2 - y1;\n  var e = y3 - y1;\n  var f = y4 - y3;\n  var det = a * f - c * d; // parallel lines? intersection is undefined\n  // ignore the case where they are colinear\n\n  if (det === 0) return null;\n  var t = (b * f - c * e) / det;\n  var u = (b * d - a * e) / det; // segments do not intersect?\n\n  if (u < 0 || u > 1 || t < 0 || t > 1) return null;\n  return {\n    x: x1 + a * t,\n    y: y1 + d * t\n  };\n}\n/*\n * find the minimum distance between two line segments (1->2 and 3->4)\n */\n\n\nexports.segmentDistance = function segmentDistance(x1, y1, x2, y2, x3, y3, x4, y4) {\n  if (segmentsIntersect(x1, y1, x2, y2, x3, y3, x4, y4)) return 0; // the two segments and their lengths squared\n\n  var x12 = x2 - x1;\n  var y12 = y2 - y1;\n  var x34 = x4 - x3;\n  var y34 = y4 - y3;\n  var ll12 = x12 * x12 + y12 * y12;\n  var ll34 = x34 * x34 + y34 * y34; // calculate distance squared, then take the sqrt at the very end\n\n  var dist2 = Math.min(perpDistance2(x12, y12, ll12, x3 - x1, y3 - y1), perpDistance2(x12, y12, ll12, x4 - x1, y4 - y1), perpDistance2(x34, y34, ll34, x1 - x3, y1 - y3), perpDistance2(x34, y34, ll34, x2 - x3, y2 - y3));\n  return Math.sqrt(dist2);\n};\n/*\n * distance squared from segment ab to point c\n * [xab, yab] is the vector b-a\n * [xac, yac] is the vector c-a\n * llab is the length squared of (b-a), just to simplify calculation\n */\n\n\nfunction perpDistance2(xab, yab, llab, xac, yac) {\n  var fcAB = xac * xab + yac * yab;\n\n  if (fcAB < 0) {\n    // point c is closer to point a\n    return xac * xac + yac * yac;\n  } else if (fcAB > llab) {\n    // point c is closer to point b\n    var xbc = xac - xab;\n    var ybc = yac - yab;\n    return xbc * xbc + ybc * ybc;\n  } else {\n    // perpendicular distance is the shortest\n    var crossProduct = xac * yab - yac * xab;\n    return crossProduct * crossProduct / llab;\n  }\n} // a very short-term cache for getTextLocation, just because\n// we're often looping over the same locations multiple times\n// invalidated as soon as we look at a different path\n\n\nvar locationCache, workingPath, workingTextWidth; // turn a path and position along it into x, y, and angle for the given text\n\nexports.getTextLocation = function getTextLocation(path, totalPathLen, positionOnPath, textWidth) {\n  if (path !== workingPath || textWidth !== workingTextWidth) {\n    locationCache = {};\n    workingPath = path;\n    workingTextWidth = textWidth;\n  }\n\n  if (locationCache[positionOnPath]) {\n    return locationCache[positionOnPath];\n  } // for the angle, use points on the path separated by the text width\n  // even though due to curvature, the text will cover a bit more than that\n\n\n  var p0 = path.getPointAtLength(mod(positionOnPath - textWidth / 2, totalPathLen));\n  var p1 = path.getPointAtLength(mod(positionOnPath + textWidth / 2, totalPathLen)); // note: atan handles 1/0 nicely\n\n  var theta = Math.atan((p1.y - p0.y) / (p1.x - p0.x)); // center the text at 2/3 of the center position plus 1/3 the p0/p1 midpoint\n  // that's the average position of this segment, assuming it's roughly quadratic\n\n  var pCenter = path.getPointAtLength(mod(positionOnPath, totalPathLen));\n  var x = (pCenter.x * 4 + p0.x + p1.x) / 6;\n  var y = (pCenter.y * 4 + p0.y + p1.y) / 6;\n  var out = {\n    x: x,\n    y: y,\n    theta: theta\n  };\n  locationCache[positionOnPath] = out;\n  return out;\n};\n\nexports.clearLocationCache = function () {\n  workingPath = null;\n};\n/*\n * Find the segment of `path` that's within the visible area\n * given by `bounds` {left, right, top, bottom}, to within a\n * precision of `buffer` px\n *\n * returns: undefined if nothing is visible, else object:\n * {\n *   min: position where the path first enters bounds, or 0 if it\n *        starts within bounds\n *   max: position where the path last exits bounds, or the path length\n *        if it finishes within bounds\n *   len: max - min, ie the length of visible path\n *   total: the total path length - just included so the caller doesn't\n *        need to call path.getTotalLength() again\n *   isClosed: true iff the start and end points of the path are both visible\n *        and are at the same point\n * }\n *\n * Works by starting from either end and repeatedly finding the distance from\n * that point to the plot area, and if it's outside the plot, moving along the\n * path by that distance (because the plot must be at least that far away on\n * the path). Note that if a path enters, exits, and re-enters the plot, we\n * will not capture this behavior.\n */\n\n\nexports.getVisibleSegment = function getVisibleSegment(path, bounds, buffer) {\n  var left = bounds.left;\n  var right = bounds.right;\n  var top = bounds.top;\n  var bottom = bounds.bottom;\n  var pMin = 0;\n  var pTotal = path.getTotalLength();\n  var pMax = pTotal;\n  var pt0, ptTotal;\n\n  function getDistToPlot(len) {\n    var pt = path.getPointAtLength(len); // hold on to the start and end points for `closed`\n\n    if (len === 0) pt0 = pt;else if (len === pTotal) ptTotal = pt;\n    var dx = pt.x < left ? left - pt.x : pt.x > right ? pt.x - right : 0;\n    var dy = pt.y < top ? top - pt.y : pt.y > bottom ? pt.y - bottom : 0;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  var distToPlot = getDistToPlot(pMin);\n\n  while (distToPlot) {\n    pMin += distToPlot + buffer;\n    if (pMin > pMax) return;\n    distToPlot = getDistToPlot(pMin);\n  }\n\n  distToPlot = getDistToPlot(pMax);\n\n  while (distToPlot) {\n    pMax -= distToPlot + buffer;\n    if (pMin > pMax) return;\n    distToPlot = getDistToPlot(pMax);\n  }\n\n  return {\n    min: pMin,\n    max: pMax,\n    len: pMax - pMin,\n    total: pTotal,\n    isClosed: pMin === 0 && pMax === pTotal && Math.abs(pt0.x - ptTotal.x) < 0.1 && Math.abs(pt0.y - ptTotal.y) < 0.1\n  };\n};\n/**\n * Find point on SVG path corresponding to a given constraint coordinate\n *\n * @param {SVGPathElement} path\n * @param {Number} val : constraint coordinate value\n * @param {String} coord : 'x' or 'y' the constraint coordinate\n * @param {Object} opts :\n *  - {Number} pathLength : supply total path length before hand\n *  - {Number} tolerance\n *  - {Number} iterationLimit\n * @return {SVGPoint}\n */\n\n\nexports.findPointOnPath = function findPointOnPath(path, val, coord, opts) {\n  opts = opts || {};\n  var pathLength = opts.pathLength || path.getTotalLength();\n  var tolerance = opts.tolerance || 1e-3;\n  var iterationLimit = opts.iterationLimit || 30; // if path starts at a val greater than the path tail (like on vertical violins),\n  // we must flip the sign of the computed diff.\n\n  var mul = path.getPointAtLength(0)[coord] > path.getPointAtLength(pathLength)[coord] ? -1 : 1;\n  var i = 0;\n  var b0 = 0;\n  var b1 = pathLength;\n  var mid;\n  var pt;\n  var diff;\n\n  while (i < iterationLimit) {\n    mid = (b0 + b1) / 2;\n    pt = path.getPointAtLength(mid);\n    diff = pt[coord] - val;\n\n    if (Math.abs(diff) < tolerance) {\n      return pt;\n    } else {\n      if (mul * diff > 0) {\n        b1 = mid;\n      } else {\n        b0 = mid;\n      }\n\n      i++;\n    }\n  }\n\n  return pt;\n};","map":null,"metadata":{},"sourceType":"script"}