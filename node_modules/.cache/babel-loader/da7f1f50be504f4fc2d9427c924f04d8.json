{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport viser from 'viser';\n\nfunction firstLowerCase(str) {\n  return str.replace(/^\\S/, function (s) {\n    return s.toLowerCase();\n  });\n}\n\nfunction retain(obj, attr) {\n  var newObj = Object.create(null);\n\n  for (var item in obj) {\n    if (obj.hasOwnProperty(item)) {\n      var arrAttr = Array.isArray(attr) ? attr : [attr];\n\n      if (arrAttr.indexOf(item) >= 0) {\n        newObj[item] = obj[item];\n      }\n    }\n  }\n\n  return newObj;\n}\n\nfunction omit(obj, attr) {\n  var newObj = Object.create(null);\n\n  for (var item in obj) {\n    if (obj.hasOwnProperty(item)) {\n      var arrAttr = Array.isArray(attr) ? attr : [attr];\n\n      if (arrAttr.indexOf(item) < 0) {\n        newObj[item] = obj[item];\n      }\n    }\n  }\n\n  return newObj;\n}\n\nfunction isOwnEmpty(obj) {\n  for (var name_1 in obj) {\n    if (obj.hasOwnProperty(name_1)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar Chart = function (_super) {\n  __extends(Chart, _super);\n\n  function Chart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.config = {};\n    _this.views = {};\n    _this.facetviews = {};\n\n    _this.centralizedUpdates = function (unit) {\n      var config = _this.config;\n      var props = unit.props;\n      var displayName = unit.displayName;\n      var hasInViews = unit.context.hasInViews;\n\n      if (displayName === 'Facet') {\n        var options = omit(props, 'children');\n        config.facet = options;\n      } else if (displayName === 'FacetView') {\n        var viewId = unit.state.viewId;\n\n        if (!_this.facetviews[viewId]) {\n          _this.facetviews[viewId] = {\n            viewId: viewId\n          };\n        }\n\n        _this.combineViewConfig(props, _this.facetviews[viewId]);\n      } else if (displayName === 'View') {\n        var viewId = unit.state.viewId;\n\n        if (!_this.views[viewId]) {\n          _this.views[viewId] = {\n            viewId: viewId\n          };\n        }\n\n        _this.combineViewConfig(props, _this.views[viewId]);\n      } else {\n        if (!hasInViews) {\n          _this.combineContentConfig(displayName, props, config);\n        } else {\n          var viewType = unit.context.viewType;\n          var viewId = unit.context.viewId;\n\n          if (viewType === 'view') {\n            if (!_this.views[viewId]) {\n              _this.views[viewId] = {\n                viewId: viewId\n              };\n            }\n\n            _this.combineContentConfig(displayName, props, _this.views[viewId]);\n          } else if (viewType === 'facet') {\n            if (!_this.facetviews[viewId]) {\n              _this.facetviews[viewId] = {\n                viewId: viewId\n              };\n            }\n\n            _this.combineContentConfig(displayName, props, _this.facetviews[viewId]);\n          }\n        }\n      }\n    };\n\n    _this.portalRef = function (container) {\n      if (!_this.container) {\n        _this.container = container;\n      }\n    };\n\n    return _this;\n  }\n\n  Chart.prototype.getChildContext = function () {\n    return {\n      centralizedUpdates: this.centralizedUpdates,\n      hasInViews: false,\n      viewType: 'view'\n    };\n  };\n\n  Chart.prototype.combineChartConfig = function (props, config) {\n    var chartRetain = ['height', 'width', 'animate', 'forceFit', 'background', 'plotBackground', 'padding', 'theme', 'renderer', 'onMouseDown', 'onMouseMove', 'onMouseUp', 'onClick', 'onDbClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onPlotEnter', 'onPlotMove', 'onPlotLeave', 'onPlotClick', 'onPlotDbClick'];\n    config.chart = retain(props, chartRetain);\n  };\n\n  Chart.prototype.combineViewConfig = function (props, config) {\n    if (props.data) {\n      config.data = props.data;\n    }\n\n    if (props.scale) {\n      config.scale = props.scale;\n    }\n\n    if (props.filter) {\n      config.filter = props.filter;\n    }\n\n    if (props.start) {\n      config.start = props.start;\n    }\n\n    if (props.end) {\n      config.end = props.end;\n    }\n  };\n\n  Chart.prototype.combineContentConfig = function (displayName, props, config) {\n    var realName = firstLowerCase(displayName);\n    var nameLowerCase = displayName.toLowerCase();\n    var regSeries = ['pie', 'sector', 'line', 'smoothLine', 'dashLine', 'stackLine', 'area', 'stackArea', 'smoothArea', 'bar', 'stackBar', 'dodgeBar', 'interval', 'stackInterval', 'dodgeInterval', 'point', 'waterfall', 'funnel', 'pyramid', 'radialBar', 'schema', 'box', 'candle', 'polygon', 'contour', 'heatmap', 'edge', 'sankey', 'jitterPoint', 'path', 'venn'];\n\n    if (regSeries.indexOf(realName) < 0 && isOwnEmpty(props)) {\n      config[nameLowerCase] = true;\n    } else if (regSeries.indexOf(realName) >= 0) {\n      if (!config.series) {\n        config.series = [];\n      }\n\n      config.series.push(__assign({\n        quickType: realName\n      }, props));\n    } else if (nameLowerCase === 'axis') {\n      if (!config.axis) {\n        config.axis = [];\n      }\n\n      config.axis.push(props);\n    } else if (nameLowerCase === 'series') {\n      if (!config.series) {\n        config.series = [];\n      }\n\n      config.series.push(props);\n    } else if (nameLowerCase === 'guide') {\n      if (!config.guide) {\n        config.guide = [];\n      }\n\n      config.guide.push(props);\n    } else if (nameLowerCase === 'legend') {\n      if (!config.legend) {\n        config.legend = [];\n      }\n\n      config.legend.push(props);\n    } else {\n      config[nameLowerCase] = props;\n    }\n\n    return config;\n  };\n\n  Chart.prototype.changeViewConfig = function () {\n    var views = this.views;\n    var facetviews = this.facetviews;\n    var config = this.config;\n\n    if (!isOwnEmpty(views)) {\n      config.views = [];\n\n      for (var item in views) {\n        if (views.hasOwnProperty(item)) {\n          config.views.push(views[item]);\n        }\n      }\n    }\n\n    if (!isOwnEmpty(facetviews)) {\n      config.facet.views = [];\n\n      for (var item in facetviews) {\n        if (facetviews.hasOwnProperty(item)) {\n          config.facet.views.push(facetviews[item]);\n        }\n      }\n    }\n  };\n\n  Chart.prototype.createChartInstance = function (config) {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    this.combineChartConfig(this.props, this.config);\n    this.combineViewConfig(this.props, this.config);\n    config.chart.container = this.container;\n    this.changeViewConfig();\n    this.chart = viser(config);\n  };\n\n  Chart.prototype.repaintChartInstance = function (config) {\n    this.combineChartConfig(this.props, this.config);\n    this.combineViewConfig(this.props, this.config);\n    this.changeViewConfig();\n\n    if (this.chart) {\n      this.chart.repaint(config);\n    } else {\n      config.chart.container = this.container;\n      this.chart = viser(config);\n    }\n  };\n\n  Chart.prototype.clearConfigData = function () {\n    this.config = {};\n    this.views = {};\n  };\n\n  Chart.prototype.componentDidMount = function () {\n    this.createChartInstance(this.config);\n    this.clearConfigData();\n  };\n\n  Chart.prototype.componentDidUpdate = function (props) {\n    this.repaintChartInstance(this.config);\n    this.clearConfigData();\n  };\n\n  Chart.prototype.componentWillUnmount = function () {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = null;\n    }\n\n    this.container = null;\n  };\n\n  Chart.prototype.render = function () {\n    return React.createElement(\"div\", {\n      ref: this.portalRef\n    }, this.props.children);\n  };\n\n  Chart.childContextTypes = {\n    centralizedUpdates: PropTypes.func,\n    hasInViews: PropTypes.bool,\n    viewType: PropTypes.string\n  };\n  return Chart;\n}(React.Component);\n\nexport default Chart;","map":null,"metadata":{},"sourceType":"module"}