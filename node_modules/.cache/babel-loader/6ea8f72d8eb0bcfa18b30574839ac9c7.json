{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Registry = require('../registry');\n\nvar Lib = require('../lib');\n\nvar baseAttributes = require('../plots/attributes');\n\nvar baseLayoutAttributes = require('../plots/layout_attributes');\n\nvar frameAttributes = require('../plots/frame_attributes');\n\nvar animationAttributes = require('../plots/animation_attributes');\n\nvar configAttributes = require('./plot_config').configAttributes; // polar attributes are not part of the Registry yet\n\n\nvar polarAreaAttrs = require('../plots/polar/legacy/area_attributes');\n\nvar polarAxisAttrs = require('../plots/polar/legacy/axis_attributes');\n\nvar editTypes = require('./edit_types');\n\nvar extendFlat = Lib.extendFlat;\nvar extendDeepAll = Lib.extendDeepAll;\nvar isPlainObject = Lib.isPlainObject;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar nestedProperty = Lib.nestedProperty;\nvar valObjectMeta = Lib.valObjectMeta;\nvar IS_SUBPLOT_OBJ = '_isSubplotObj';\nvar IS_LINKED_TO_ARRAY = '_isLinkedToArray';\nvar ARRAY_ATTR_REGEXPS = '_arrayAttrRegexps';\nvar DEPRECATED = '_deprecated';\nvar UNDERSCORE_ATTRS = [IS_SUBPLOT_OBJ, IS_LINKED_TO_ARRAY, ARRAY_ATTR_REGEXPS, DEPRECATED];\nexports.IS_SUBPLOT_OBJ = IS_SUBPLOT_OBJ;\nexports.IS_LINKED_TO_ARRAY = IS_LINKED_TO_ARRAY;\nexports.DEPRECATED = DEPRECATED;\nexports.UNDERSCORE_ATTRS = UNDERSCORE_ATTRS;\n/** Outputs the full plotly.js plot schema\n *\n * @return {object}\n *  - defs\n *  - traces\n *  - layout\n *  - transforms\n *  - frames\n *  - animations\n *  - config\n */\n\nexports.get = function () {\n  var traces = {};\n  Registry.allTypes.concat('area').forEach(function (type) {\n    traces[type] = getTraceAttributes(type);\n  });\n  var transforms = {};\n  Object.keys(Registry.transformsRegistry).forEach(function (type) {\n    transforms[type] = getTransformAttributes(type);\n  });\n  return {\n    defs: {\n      valObjects: valObjectMeta,\n      metaKeys: UNDERSCORE_ATTRS.concat(['description', 'role', 'editType', 'impliedEdits']),\n      editType: {\n        traces: editTypes.traces,\n        layout: editTypes.layout\n      },\n      impliedEdits: {\n        description: ['Sometimes when an attribute is changed, other attributes', 'must be altered as well in order to achieve the intended', 'result. For example, when `range` is specified, it is', 'important to set `autorange` to `false` or the new `range`', 'value would be lost in the redraw. `impliedEdits` is the', 'mechanism to do this: `impliedEdits: {autorange: false}`.', 'Each key is a relative paths to the attribute string to', 'change, using *^* to ascend into the parent container,', 'for example `range[0]` has `impliedEdits: {*^autorange*: false}`.', 'A value of `undefined` means that the attribute will not be', 'changed, but its previous value should be recorded in case', 'we want to reverse this change later. For example, `autorange`', 'has `impliedEdits: {*range[0]*: undefined, *range[1]*:undefined}', 'because the range will likely be changed by redraw.'].join(' ')\n      }\n    },\n    traces: traces,\n    layout: getLayoutAttributes(),\n    transforms: transforms,\n    frames: getFramesAttributes(),\n    animation: formatAttributes(animationAttributes),\n    config: formatAttributes(configAttributes)\n  };\n};\n/**\n * Crawl the attribute tree, recursively calling a callback function\n *\n * @param {object} attrs\n *  The node of the attribute tree (e.g. the root) from which recursion originates\n * @param {Function} callback\n *  A callback function with the signature:\n *          @callback callback\n *          @param {object} attr an attribute\n *          @param {String} attrName name string\n *          @param {object[]} attrs all the attributes\n *          @param {Number} level the recursion level, 0 at the root\n *          @param {String} fullAttrString full attribute name (ie 'marker.line')\n * @param {Number} [specifiedLevel]\n *  The level in the tree, in order to let the callback function detect descend or backtrack,\n *  typically unsupplied (implied 0), just used by the self-recursive call.\n *  The necessity arises because the tree traversal is not controlled by callback return values.\n *  The decision to not use callback return values for controlling tree pruning arose from\n *  the goal of keeping the crawler backwards compatible. Observe that one of the pruning conditions\n *  precedes the callback call.\n * @param {string} [attrString]\n *  the path to the current attribute, as an attribute string (ie 'marker.line')\n *  typically unsupplied, but you may supply it if you want to disambiguate which attrs tree you\n *  are starting from\n *\n * @return {object} transformOut\n *  copy of transformIn that contains attribute defaults\n */\n\n\nexports.crawl = function (attrs, callback, specifiedLevel, attrString) {\n  var level = specifiedLevel || 0;\n  attrString = attrString || '';\n  Object.keys(attrs).forEach(function (attrName) {\n    var attr = attrs[attrName];\n    if (UNDERSCORE_ATTRS.indexOf(attrName) !== -1) return;\n    var fullAttrString = (attrString ? attrString + '.' : '') + attrName;\n    callback(attr, attrName, attrs, level, fullAttrString);\n    if (exports.isValObject(attr)) return;\n\n    if (isPlainObject(attr) && attrName !== 'impliedEdits') {\n      exports.crawl(attr, callback, level + 1, fullAttrString);\n    }\n  });\n};\n/** Is object a value object (or a container object)?\n *\n * @param {object} obj\n * @return {boolean}\n *  returns true for a valid value object and\n *  false for tree nodes in the attribute hierarchy\n */\n\n\nexports.isValObject = function (obj) {\n  return obj && obj.valType !== undefined;\n};\n/**\n * Find all data array attributes in a given trace object - including\n * `arrayOk` attributes.\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n *\n * @return {array} arrayAttributes\n *  list of array attributes for the given trace\n */\n\n\nexports.findArrayAttributes = function (trace) {\n  var arrayAttributes = [];\n  var stack = [];\n  var isArrayStack = [];\n  var baseContainer, baseAttrName;\n\n  function callback(attr, attrName, attrs, level) {\n    stack = stack.slice(0, level).concat([attrName]);\n    isArrayStack = isArrayStack.slice(0, level).concat([attr && attr._isLinkedToArray]);\n    var splittableAttr = attr && (attr.valType === 'data_array' || attr.arrayOk === true) && !(stack[level - 1] === 'colorbar' && (attrName === 'ticktext' || attrName === 'tickvals')); // Manually exclude 'colorbar.tickvals' and 'colorbar.ticktext' for now\n    // which are declared as `valType: 'data_array'` but scale independently of\n    // the coordinate arrays.\n    //\n    // Down the road, we might want to add a schema field (e.g `uncorrelatedArray: true`)\n    // to distinguish attributes of the likes.\n\n    if (!splittableAttr) return;\n    crawlIntoTrace(baseContainer, 0, '');\n  }\n\n  function crawlIntoTrace(container, i, astrPartial) {\n    var item = container[stack[i]];\n    var newAstrPartial = astrPartial + stack[i];\n\n    if (i === stack.length - 1) {\n      if (isArrayOrTypedArray(item)) {\n        arrayAttributes.push(baseAttrName + newAstrPartial);\n      }\n    } else {\n      if (isArrayStack[i]) {\n        if (Array.isArray(item)) {\n          for (var j = 0; j < item.length; j++) {\n            if (isPlainObject(item[j])) {\n              crawlIntoTrace(item[j], i + 1, newAstrPartial + '[' + j + '].');\n            }\n          }\n        }\n      } else if (isPlainObject(item)) {\n        crawlIntoTrace(item, i + 1, newAstrPartial + '.');\n      }\n    }\n  }\n\n  baseContainer = trace;\n  baseAttrName = '';\n  exports.crawl(baseAttributes, callback);\n\n  if (trace._module && trace._module.attributes) {\n    exports.crawl(trace._module.attributes, callback);\n  }\n\n  var transforms = trace.transforms;\n\n  if (transforms) {\n    for (var i = 0; i < transforms.length; i++) {\n      var transform = transforms[i];\n      var module = transform._module;\n\n      if (module) {\n        baseAttrName = 'transforms[' + i + '].';\n        baseContainer = transform;\n        exports.crawl(module.attributes, callback);\n      }\n    }\n  }\n\n  return arrayAttributes;\n};\n/*\n * Find the valObject for one attribute in an existing trace\n *\n * @param {object} trace\n *  full trace object that contains a reference to `_module.attributes`\n * @param {object} parts\n *  an array of parts, like ['transforms', 1, 'value']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\n\n\nexports.getTraceValObject = function (trace, parts) {\n  var head = parts[0];\n  var i = 1; // index to start recursing from\n\n  var moduleAttrs, valObject;\n\n  if (head === 'transforms') {\n    if (parts.length === 1) {\n      return baseAttributes.transforms;\n    }\n\n    var transforms = trace.transforms;\n    if (!Array.isArray(transforms) || !transforms.length) return false;\n    var tNum = parts[1];\n\n    if (!isIndex(tNum) || tNum >= transforms.length) {\n      return false;\n    }\n\n    moduleAttrs = (Registry.transformsRegistry[transforms[tNum].type] || {}).attributes;\n    valObject = moduleAttrs && moduleAttrs[parts[2]];\n    i = 3; // start recursing only inside the transform\n  } else if (trace.type === 'area') {\n    valObject = polarAreaAttrs[head];\n  } else {\n    // first look in the module for this trace\n    // components have already merged their trace attributes in here\n    var _module = trace._module;\n    if (!_module) _module = (Registry.modules[trace.type || baseAttributes.type.dflt] || {})._module;\n    if (!_module) return false;\n    moduleAttrs = _module.attributes;\n    valObject = moduleAttrs && moduleAttrs[head]; // then look in the subplot attributes\n\n    if (!valObject) {\n      var subplotModule = _module.basePlotModule;\n\n      if (subplotModule && subplotModule.attributes) {\n        valObject = subplotModule.attributes[head];\n      }\n    } // finally look in the global attributes\n\n\n    if (!valObject) valObject = baseAttributes[head];\n  }\n\n  return recurseIntoValObject(valObject, parts, i);\n};\n/*\n * Find the valObject for one layout attribute\n *\n * @param {array} parts\n *  an array of parts, like ['annotations', 1, 'x']\n *  typically from nestedProperty(...).parts\n *\n * @return {object|false}\n *  the valObject for this attribute, or the last found parent\n *  in some cases the innermost valObject will not exist, for example\n *  `valType: 'any'` attributes where we might set a part of the attribute.\n *  In that case, stop at the deepest valObject we *do* find.\n */\n\n\nexports.getLayoutValObject = function (fullLayout, parts) {\n  var valObject = layoutHeadAttr(fullLayout, parts[0]);\n  return recurseIntoValObject(valObject, parts, 1);\n};\n\nfunction layoutHeadAttr(fullLayout, head) {\n  var i, key, _module, attributes; // look for attributes of the subplot types used on the plot\n\n\n  var basePlotModules = fullLayout._basePlotModules;\n\n  if (basePlotModules) {\n    var out;\n\n    for (i = 0; i < basePlotModules.length; i++) {\n      _module = basePlotModules[i];\n\n      if (_module.attrRegex && _module.attrRegex.test(head)) {\n        // if a module defines overrides, these take precedence\n        // initially this is to allow gl2d different editTypes from svg cartesian\n        if (_module.layoutAttrOverrides) return _module.layoutAttrOverrides; // otherwise take the first attributes we find\n\n        if (!out && _module.layoutAttributes) out = _module.layoutAttributes;\n      } // a module can also override the behavior of base (and component) module layout attrs\n      // again see gl2d for initial use case\n\n\n      var baseOverrides = _module.baseLayoutAttrOverrides;\n      if (baseOverrides && head in baseOverrides) return baseOverrides[head];\n    }\n\n    if (out) return out;\n  } // look for layout attributes contributed by traces on the plot\n\n\n  var modules = fullLayout._modules;\n\n  if (modules) {\n    for (i = 0; i < modules.length; i++) {\n      attributes = modules[i].layoutAttributes;\n\n      if (attributes && head in attributes) {\n        return attributes[head];\n      }\n    }\n  }\n  /*\n   * Next look in components.\n   * Components that define a schema have already merged this into\n   * base and subplot attribute defs, so ignore these.\n   * Others (older style) all put all their attributes\n   * inside a container matching the module `name`\n   * eg `attributes` (array) or `legend` (object)\n   */\n\n\n  for (key in Registry.componentsRegistry) {\n    _module = Registry.componentsRegistry[key];\n\n    if (_module.name === 'colorscale' && head.indexOf('coloraxis') === 0) {\n      return _module.layoutAttributes[head];\n    } else if (!_module.schema && head === _module.name) {\n      return _module.layoutAttributes;\n    }\n  }\n\n  if (head in baseLayoutAttributes) return baseLayoutAttributes[head]; // Polar doesn't populate _modules or _basePlotModules\n  // just fall back on these when the others fail\n\n  if (head === 'radialaxis' || head === 'angularaxis') {\n    return polarAxisAttrs[head];\n  }\n\n  return polarAxisAttrs.layout[head] || false;\n}\n\nfunction recurseIntoValObject(valObject, parts, i) {\n  if (!valObject) return false;\n\n  if (valObject._isLinkedToArray) {\n    // skip array index, abort if we try to dive into an array without an index\n    if (isIndex(parts[i])) i++;else if (i < parts.length) return false;\n  } // now recurse as far as we can. Occasionally we have an attribute\n  // setting an internal part below what's in the schema; just return\n  // the innermost schema item we find.\n\n\n  for (; i < parts.length; i++) {\n    var newValObject = valObject[parts[i]];\n    if (isPlainObject(newValObject)) valObject = newValObject;else break;\n    if (i === parts.length - 1) break;\n\n    if (valObject._isLinkedToArray) {\n      i++;\n      if (!isIndex(parts[i])) return false;\n    } else if (valObject.valType === 'info_array') {\n      i++;\n      var index = parts[i];\n      if (!isIndex(index)) return false;\n      var items = valObject.items;\n\n      if (Array.isArray(items)) {\n        if (index >= items.length) return false;\n\n        if (valObject.dimensions === 2) {\n          i++;\n          if (parts.length === i) return valObject;\n          var index2 = parts[i];\n          if (!isIndex(index2)) return false;\n          valObject = items[index][index2];\n        } else valObject = items[index];\n      } else {\n        valObject = items;\n      }\n    }\n  }\n\n  return valObject;\n} // note: this is different from Lib.isIndex, this one doesn't accept numeric\n// strings, only actual numbers.\n\n\nfunction isIndex(val) {\n  return val === Math.round(val) && val >= 0;\n}\n\nfunction getTraceAttributes(type) {\n  var _module, basePlotModule;\n\n  if (type === 'area') {\n    _module = {\n      attributes: polarAreaAttrs\n    };\n    basePlotModule = {};\n  } else {\n    _module = Registry.modules[type]._module, basePlotModule = _module.basePlotModule;\n  }\n\n  var attributes = {}; // make 'type' the first attribute in the object\n\n  attributes.type = null;\n  var copyBaseAttributes = extendDeepAll({}, baseAttributes);\n  var copyModuleAttributes = extendDeepAll({}, _module.attributes); // prune global-level trace attributes that are already defined in a trace\n\n  exports.crawl(copyModuleAttributes, function (attr, attrName, attrs, level, fullAttrString) {\n    nestedProperty(copyBaseAttributes, fullAttrString).set(undefined); // Prune undefined attributes\n\n    if (attr === undefined) nestedProperty(copyModuleAttributes, fullAttrString).set(undefined);\n  }); // base attributes (same for all trace types)\n\n  extendDeepAll(attributes, copyBaseAttributes); // prune-out base attributes based on trace module categories\n\n  if (Registry.traceIs(type, 'noOpacity')) {\n    delete attributes.opacity;\n  }\n\n  if (!Registry.traceIs(type, 'showLegend')) {\n    delete attributes.showlegend;\n    delete attributes.legendgroup;\n  }\n\n  if (Registry.traceIs(type, 'noHover')) {\n    delete attributes.hoverinfo;\n    delete attributes.hoverlabel;\n  }\n\n  if (!_module.selectPoints) {\n    delete attributes.selectedpoints;\n  } // module attributes\n\n\n  extendDeepAll(attributes, copyModuleAttributes); // subplot attributes\n\n  if (basePlotModule.attributes) {\n    extendDeepAll(attributes, basePlotModule.attributes);\n  } // 'type' gets overwritten by baseAttributes; reset it here\n\n\n  attributes.type = type;\n  var out = {\n    meta: _module.meta || {},\n    categories: _module.categories || {},\n    animatable: Boolean(_module.animatable),\n    type: type,\n    attributes: formatAttributes(attributes)\n  }; // trace-specific layout attributes\n\n  if (_module.layoutAttributes) {\n    var layoutAttributes = {};\n    extendDeepAll(layoutAttributes, _module.layoutAttributes);\n    out.layoutAttributes = formatAttributes(layoutAttributes);\n  } // drop anim:true in non-animatable modules\n\n\n  if (!_module.animatable) {\n    exports.crawl(out, function (attr) {\n      if (exports.isValObject(attr) && 'anim' in attr) {\n        delete attr.anim;\n      }\n    });\n  }\n\n  return out;\n}\n\nfunction getLayoutAttributes() {\n  var layoutAttributes = {};\n\n  var key, _module; // global layout attributes\n\n\n  extendDeepAll(layoutAttributes, baseLayoutAttributes); // add base plot module layout attributes\n\n  for (key in Registry.subplotsRegistry) {\n    _module = Registry.subplotsRegistry[key];\n    if (!_module.layoutAttributes) continue;\n\n    if (Array.isArray(_module.attr)) {\n      for (var i = 0; i < _module.attr.length; i++) {\n        handleBasePlotModule(layoutAttributes, _module, _module.attr[i]);\n      }\n    } else {\n      var astr = _module.attr === 'subplot' ? _module.name : _module.attr;\n      handleBasePlotModule(layoutAttributes, _module, astr);\n    }\n  } // polar layout attributes\n\n\n  layoutAttributes = assignPolarLayoutAttrs(layoutAttributes); // add registered components layout attributes\n\n  for (key in Registry.componentsRegistry) {\n    _module = Registry.componentsRegistry[key];\n    var schema = _module.schema;\n\n    if (schema && (schema.subplots || schema.layout)) {\n      /*\n       * Components with defined schema have already been merged in at register time\n       * but a few components define attributes that apply only to xaxis\n       * not yaxis (rangeselector, rangeslider) - delete from y schema.\n       * Note that the input attributes for xaxis/yaxis are the same object\n       * so it's not possible to only add them to xaxis from the start.\n       * If we ever have such asymmetry the other way, or anywhere else,\n       * we will need to extend both this code and mergeComponentAttrsToSubplot\n       * (which will not find yaxis only for example)\n       */\n      var subplots = schema.subplots;\n\n      if (subplots && subplots.xaxis && !subplots.yaxis) {\n        for (var xkey in subplots.xaxis) {\n          delete layoutAttributes.yaxis[xkey];\n        }\n      }\n    } else if (_module.name === 'colorscale') {\n      extendDeepAll(layoutAttributes, _module.layoutAttributes);\n    } else if (_module.layoutAttributes) {\n      // older style without schema need to be explicitly merged in now\n      insertAttrs(layoutAttributes, _module.layoutAttributes, _module.name);\n    }\n  }\n\n  return {\n    layoutAttributes: formatAttributes(layoutAttributes)\n  };\n}\n\nfunction getTransformAttributes(type) {\n  var _module = Registry.transformsRegistry[type];\n  var attributes = extendDeepAll({}, _module.attributes); // add registered components transform attributes\n\n  Object.keys(Registry.componentsRegistry).forEach(function (k) {\n    var _module = Registry.componentsRegistry[k];\n\n    if (_module.schema && _module.schema.transforms && _module.schema.transforms[type]) {\n      Object.keys(_module.schema.transforms[type]).forEach(function (v) {\n        insertAttrs(attributes, _module.schema.transforms[type][v], v);\n      });\n    }\n  });\n  return {\n    attributes: formatAttributes(attributes)\n  };\n}\n\nfunction getFramesAttributes() {\n  var attrs = {\n    frames: extendDeepAll({}, frameAttributes)\n  };\n  formatAttributes(attrs);\n  return attrs.frames;\n}\n\nfunction formatAttributes(attrs) {\n  mergeValTypeAndRole(attrs);\n  formatArrayContainers(attrs);\n  stringify(attrs);\n  return attrs;\n}\n\nfunction mergeValTypeAndRole(attrs) {\n  function makeSrcAttr(attrName) {\n    return {\n      valType: 'string',\n      role: 'info',\n      description: ['Sets the source reference on plot.ly for ', attrName, '.'].join(' '),\n      editType: 'none'\n    };\n  }\n\n  function callback(attr, attrName, attrs) {\n    if (exports.isValObject(attr)) {\n      if (attr.valType === 'data_array') {\n        // all 'data_array' attrs have role 'data'\n        attr.role = 'data'; // all 'data_array' attrs have a corresponding 'src' attr\n\n        attrs[attrName + 'src'] = makeSrcAttr(attrName);\n      } else if (attr.arrayOk === true) {\n        // all 'arrayOk' attrs have a corresponding 'src' attr\n        attrs[attrName + 'src'] = makeSrcAttr(attrName);\n      }\n    } else if (isPlainObject(attr)) {\n      // all attrs container objects get role 'object'\n      attr.role = 'object';\n    }\n  }\n\n  exports.crawl(attrs, callback);\n}\n\nfunction formatArrayContainers(attrs) {\n  function callback(attr, attrName, attrs) {\n    if (!attr) return;\n    var itemName = attr[IS_LINKED_TO_ARRAY];\n    if (!itemName) return;\n    delete attr[IS_LINKED_TO_ARRAY];\n    attrs[attrName] = {\n      items: {}\n    };\n    attrs[attrName].items[itemName] = attr;\n    attrs[attrName].role = 'object';\n  }\n\n  exports.crawl(attrs, callback);\n} // this can take around 10ms and should only be run from PlotSchema.get(),\n// to ensure JSON.stringify(PlotSchema.get()) gives the intended result.\n\n\nfunction stringify(attrs) {\n  function walk(attr) {\n    for (var k in attr) {\n      if (isPlainObject(attr[k])) {\n        walk(attr[k]);\n      } else if (Array.isArray(attr[k])) {\n        for (var i = 0; i < attr[k].length; i++) {\n          walk(attr[k][i]);\n        }\n      } else {\n        // as JSON.stringify(/test/) // => {}\n        if (attr[k] instanceof RegExp) {\n          attr[k] = attr[k].toString();\n        }\n      }\n    }\n  }\n\n  walk(attrs);\n}\n\nfunction assignPolarLayoutAttrs(layoutAttributes) {\n  extendFlat(layoutAttributes, {\n    radialaxis: polarAxisAttrs.radialaxis,\n    angularaxis: polarAxisAttrs.angularaxis\n  });\n  extendFlat(layoutAttributes, polarAxisAttrs.layout);\n  return layoutAttributes;\n}\n\nfunction handleBasePlotModule(layoutAttributes, _module, astr) {\n  var np = nestedProperty(layoutAttributes, astr);\n  var attrs = extendDeepAll({}, _module.layoutAttributes);\n  attrs[IS_SUBPLOT_OBJ] = true;\n  np.set(attrs);\n}\n\nfunction insertAttrs(baseAttrs, newAttrs, astr) {\n  var np = nestedProperty(baseAttrs, astr);\n  np.set(extendDeepAll(np.get() || {}, newAttrs));\n}","map":null,"metadata":{},"sourceType":"script"}