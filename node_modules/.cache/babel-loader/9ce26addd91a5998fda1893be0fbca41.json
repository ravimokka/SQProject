{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as _ from 'lodash';\nimport * as setAxisConfig from '../components/setAxisConfig';\nimport * as setCoordConfig from '../components/setCoordConfig';\nimport * as setFilterConfig from '../components/setFilterConfig';\nimport * as setGuideConfig from '../components/setGuideConfig';\nimport * as setLegendConfig from '../components/setLegendConfig';\nimport * as setScaleConfig from '../components/setScaleConfig';\nimport * as setSeriesConfig from '../components/setSeriesConfig';\nimport * as setTooltipConfig from '../components/setTooltipConfig';\nimport loadShapes from '../shapes/loadShapes';\nimport * as EventUtils from '../utils/EventUtils';\n\nvar G2 = require('@antv/g2');\n\nvar Brush = require('@antv/g2-brush');\n\nfunction firstUpperCase(str) {\n  return str.toLowerCase().replace(/( |^)[a-z]/g, function (L) {\n    return L.toUpperCase();\n  });\n}\n\nvar CommonChart = function () {\n  function CommonChart(config) {\n    this.viewInstance = {};\n    this.config = _.cloneDeep(config);\n    this.checkChartConfig(this.config);\n    this.chartInstance = new G2.Chart(this.config.chart);\n  }\n\n  CommonChart.prototype.getWidth = function () {\n    return this.chartInstance.get('width');\n  };\n\n  CommonChart.prototype.getHeight = function () {\n    return this.chartInstance.get('height');\n  };\n\n  CommonChart.prototype.render = function () {\n    var config = this.config;\n    var chart = this.chartInstance;\n    loadShapes();\n    this.setEvents(chart, config);\n    this.setDataSource(chart, config.data);\n    this.setCoord(chart, config);\n    this.setTooltip(chart, config);\n    this.setAxis(chart, config);\n    this.setContent(chart, config);\n    this.setLegend(chart, config);\n    this.setViews(chart, config);\n    this.setFacet(chart, config);\n    chart.render();\n    this.setDefaultTooltip(chart, config);\n    this.setBrush(chart, config);\n  };\n\n  CommonChart.prototype.repaint = function (config) {\n    var newConfig = _.cloneDeep(config);\n\n    this.checkChartConfig(newConfig);\n    this.renderDiffConfig(newConfig);\n  };\n\n  CommonChart.prototype.destroy = function (chart) {\n    if (chart) {\n      chart.destroy();\n    }\n  };\n\n  CommonChart.prototype.clear = function (chart) {\n    if (chart) {\n      chart.clear();\n    }\n  };\n\n  CommonChart.prototype.checkChartConfig = function (config) {\n    var chart = config.chart;\n\n    if (!chart || !chart.height) {\n      throw new Error('please set correct chart option');\n    }\n  };\n\n  CommonChart.prototype.createView = function (chart, config) {\n    var opts = {};\n\n    if (config.start) {\n      opts.start = config.start;\n    }\n\n    if (config.end) {\n      opts.end = config.end;\n    }\n\n    var view = chart.view(opts);\n\n    if (!config.viewId) {\n      throw new Error('you must set viewId');\n    }\n\n    this.viewInstance[config.viewId] = view;\n    return view;\n  };\n\n  CommonChart.prototype.setEvents = function (chart, config) {\n    EventUtils.setEvent(chart, '', config.chart);\n  };\n\n  CommonChart.prototype.setDataSource = function (chart, data) {\n    if (!_.isNil(data) && !_.isEmpty(data)) {\n      chart.source(data);\n    }\n  };\n\n  CommonChart.prototype.setFilter = function (chart, config) {\n    return setFilterConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setScale = function (chart, config) {\n    return setScaleConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setCoord = function (chart, config) {\n    return setCoordConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setSeries = function (chart, config) {\n    return setSeriesConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setAxis = function (chart, config) {\n    return setAxisConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setTooltip = function (chart, config) {\n    return setTooltipConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setDefaultTooltip = function (chart, config) {\n    return setTooltipConfig.setDefaultPoint(chart, config);\n  };\n\n  CommonChart.prototype.setGuide = function (chart, config) {\n    return setGuideConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setLegend = function (chart, config) {\n    return setLegendConfig.process(chart, config);\n  };\n\n  CommonChart.prototype.setContent = function (chart, config) {\n    this.setScale(chart, config);\n    this.setFilter(chart, config);\n    this.setSeries(chart, config);\n    this.setGuide(chart, config);\n  };\n\n  CommonChart.prototype.setView = function (item, chart, config) {\n    var view = this.createView(chart, item);\n    var viewData = item.data ? item.data : config.data;\n    this.setDataSource(view, viewData);\n\n    if (!_.isNil(item.coord)) {\n      this.setCoord(view, item);\n    }\n\n    if (!_.isNil(item.tooltip)) {\n      this.setTooltip(view, item);\n    }\n\n    if (!_.isNil(item.axis)) {\n      this.setAxis(view, item);\n    }\n\n    if (!_.isNil(item.guide)) {\n      this.setGuide(view, item);\n    }\n\n    this.setContent(view, item);\n    return view;\n  };\n\n  CommonChart.prototype.setViews = function (chart, config) {\n    var cViews = _.cloneDeep(config.views);\n\n    var isArr = Array.isArray(cViews);\n\n    if (_.isNil(cViews) || _.isEmpty(cViews)) {\n      return;\n    }\n\n    var arrViews = isArr ? cViews : [cViews];\n\n    for (var _i = 0, arrViews_1 = arrViews; _i < arrViews_1.length; _i++) {\n      var item = arrViews_1[_i];\n      this.setView(item, chart, config);\n    }\n  };\n\n  CommonChart.prototype.setFacetViews = function (chart, facet, views) {\n    this.setDataSource(chart, views.data);\n\n    if (!_.isNil(views.coord)) {\n      this.setCoord(chart, views);\n    }\n\n    if (!_.isNil(views.tooltip)) {\n      this.setTooltip(chart, views);\n    }\n\n    if (!_.isNil(views.axis)) {\n      this.setAxis(chart, views);\n    }\n\n    if (!_.isNil(views.guide)) {\n      this.setGuide(chart, views);\n    }\n\n    this.setContent(chart, views);\n  };\n\n  CommonChart.prototype.setFacet = function (chart, config) {\n    var _this = this;\n\n    var cFacet = _.cloneDeep(config.facet);\n\n    if (_.isNil(cFacet) || _.isEmpty(cFacet)) {\n      return;\n    }\n\n    var options = _.omit(cFacet, ['type', 'views']);\n\n    if (_.isEmpty(cFacet.views) && !_.isFunction(cFacet.views)) {\n      return chart.facet(cFacet.type, options);\n    }\n\n    if (_.isFunction(cFacet.views)) {\n      options.eachView = function (v, f) {\n        _this.setFacetViews(v, f, cFacet.views(v, f));\n      };\n    } else {\n      cFacet.views = Array.isArray(cFacet.views) ? cFacet.views : [cFacet.views];\n\n      options.eachView = function (v, f) {\n        _this.setFacetViews(v, f, cFacet.views[0]);\n      };\n    }\n\n    return chart.facet(cFacet.type, options);\n  };\n\n  CommonChart.prototype.setBrush = function (chart, config) {\n    if (_.isNil(config.brush) || _.isEmpty(config.brush)) {\n      return;\n    }\n\n    var brush = config.brush;\n\n    var brushConfig = __assign({}, config.brush, {\n      canvas: chart.get('canvas'),\n      chart: chart\n    });\n\n    var regEvents = /on(BrushStart|BrushMove|BrushEnd|DragStart|DragMove|DragEnd)/;\n    var events = Object.keys(brush).filter(function (entry) {\n      return regEvents.test(entry);\n    });\n    events.forEach(function (entry) {\n      var item = regEvents.exec(entry);\n\n      if (item && item.length) {\n        var oriEventName = 'on' + firstUpperCase(item[0]);\n\n        brushConfig[oriEventName] = function (ev) {\n          brush[entry](ev, chart);\n        };\n      }\n    });\n    new Brush(brushConfig);\n  };\n\n  CommonChart.prototype.repaintWidthHeight = function (chart, config) {\n    var width = _.get(config, 'chart.width');\n\n    if (width) {\n      chart.changeWidth(width);\n    }\n\n    var height = _.get(config, 'chart.height');\n\n    if (height) {\n      chart.changeHeight(height);\n    }\n  };\n\n  CommonChart.prototype.renderDiffConfig = function (config) {\n    var chart = this.chartInstance;\n    this.clear(chart);\n    this.setScale(chart, config);\n    this.setCoord(chart, config);\n    this.setAxis(chart, config);\n    this.setSeries(chart, config);\n    this.setTooltip(chart, config);\n    this.setGuide(chart, config);\n    this.setViews(chart, config);\n    this.setLegend(chart, config);\n    this.setFacet(chart, config);\n    this.repaintWidthHeight(chart, config);\n\n    if (config.data) {\n      chart.changeData(config.data);\n    }\n\n    chart.repaint();\n    this.setBrush(chart, config);\n  };\n\n  return CommonChart;\n}();\n\nexport default CommonChart;","map":null,"metadata":{},"sourceType":"module"}