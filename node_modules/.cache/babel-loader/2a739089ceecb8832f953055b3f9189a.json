{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function autoType(array, calendar, opts) {\n  opts = opts || {};\n  if (!opts.noMultiCategory && multiCategory(array)) return 'multicategory';\n  if (moreDates(array, calendar)) return 'date';\n  if (category(array)) return 'category';\n  if (linearOK(array)) return 'linear';else return '-';\n}; // is there at least one number in array? If not, we should leave\n// ax.type empty so it can be autoset later\n\n\nfunction linearOK(array) {\n  if (!array) return false;\n\n  for (var i = 0; i < array.length; i++) {\n    if (isNumeric(array[i])) return true;\n  }\n\n  return false;\n} // does the array a have mostly dates rather than numbers?\n// note: some values can be neither (such as blanks, text)\n// 2- or 4-digit integers can be both, so require twice as many\n// dates as non-dates, to exclude cases with mostly 2 & 4 digit\n// numbers and a few dates\n// as with categories, consider DISTINCT values only.\n\n\nfunction moreDates(a, calendar) {\n  // test at most 1000 points, evenly spaced\n  var inc = Math.max(1, (a.length - 1) / 1000);\n  var dcnt = 0;\n  var ncnt = 0;\n  var seen = {};\n\n  for (var i = 0; i < a.length; i += inc) {\n    var ai = a[Math.round(i)];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    if (Lib.isDateTime(ai, calendar)) dcnt += 1;\n    if (isNumeric(ai)) ncnt += 1;\n  }\n\n  return dcnt > ncnt * 2;\n} // are the (x,y)-values in gd.data mostly text?\n// require twice as many DISTINCT categories as distinct numbers\n\n\nfunction category(a) {\n  // test at most 1000 points\n  var inc = Math.max(1, (a.length - 1) / 1000);\n  var curvenums = 0;\n  var curvecats = 0;\n  var seen = {};\n\n  for (var i = 0; i < a.length; i += inc) {\n    var ai = a[Math.round(i)];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    if (typeof ai === 'boolean') curvecats++;else if (Lib.cleanNumber(ai) !== BADNUM) curvenums++;else if (typeof ai === 'string') curvecats++;\n  }\n\n  return curvecats > curvenums * 2;\n} // very-loose requirements for multicategory,\n// trace modules that should never auto-type to multicategory\n// should be declared with 'noMultiCategory'\n\n\nfunction multiCategory(a) {\n  return Lib.isArrayOrTypedArray(a[0]) && Lib.isArrayOrTypedArray(a[1]);\n}","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/cartesian/axis_autotype.js"],"names":["isNumeric","require","Lib","BADNUM","module","exports","autoType","array","calendar","opts","noMultiCategory","multiCategory","moreDates","category","linearOK","i","length","a","inc","Math","max","dcnt","ncnt","seen","ai","round","stri","String","isDateTime","curvenums","curvecats","cleanNumber","isArrayOrTypedArray"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function autoType(array, calendar, opts) {\n    opts = opts || {};\n\n    if(!opts.noMultiCategory && multiCategory(array)) return 'multicategory';\n    if(moreDates(array, calendar)) return 'date';\n    if(category(array)) return 'category';\n    if(linearOK(array)) return 'linear';\n    else return '-';\n};\n\n// is there at least one number in array? If not, we should leave\n// ax.type empty so it can be autoset later\nfunction linearOK(array) {\n    if(!array) return false;\n\n    for(var i = 0; i < array.length; i++) {\n        if(isNumeric(array[i])) return true;\n    }\n\n    return false;\n}\n\n// does the array a have mostly dates rather than numbers?\n// note: some values can be neither (such as blanks, text)\n// 2- or 4-digit integers can be both, so require twice as many\n// dates as non-dates, to exclude cases with mostly 2 & 4 digit\n// numbers and a few dates\n// as with categories, consider DISTINCT values only.\nfunction moreDates(a, calendar) {\n    // test at most 1000 points, evenly spaced\n    var inc = Math.max(1, (a.length - 1) / 1000);\n    var dcnt = 0;\n    var ncnt = 0;\n    var seen = {};\n\n    for(var i = 0; i < a.length; i += inc) {\n        var ai = a[Math.round(i)];\n        var stri = String(ai);\n        if(seen[stri]) continue;\n        seen[stri] = 1;\n\n        if(Lib.isDateTime(ai, calendar)) dcnt += 1;\n        if(isNumeric(ai)) ncnt += 1;\n    }\n\n    return (dcnt > ncnt * 2);\n}\n\n// are the (x,y)-values in gd.data mostly text?\n// require twice as many DISTINCT categories as distinct numbers\nfunction category(a) {\n    // test at most 1000 points\n    var inc = Math.max(1, (a.length - 1) / 1000);\n    var curvenums = 0;\n    var curvecats = 0;\n    var seen = {};\n\n    for(var i = 0; i < a.length; i += inc) {\n        var ai = a[Math.round(i)];\n        var stri = String(ai);\n        if(seen[stri]) continue;\n        seen[stri] = 1;\n\n        if(typeof ai === 'boolean') curvecats++;\n        else if(Lib.cleanNumber(ai) !== BADNUM) curvenums++;\n        else if(typeof ai === 'string') curvecats++;\n    }\n\n    return curvecats > curvenums * 2;\n}\n\n// very-loose requirements for multicategory,\n// trace modules that should never auto-type to multicategory\n// should be declared with 'noMultiCategory'\nfunction multiCategory(a) {\n    return Lib.isArrayOrTypedArray(a[0]) && Lib.isArrayOrTypedArray(a[1]);\n}\n"]},"metadata":{},"sourceType":"script"}