{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\n\nvar domainAttrs = require('../domain').attributes;\n\nvar constants = require('./constants');\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar geoAxesAttrs = {\n  range: {\n    valType: 'info_array',\n    role: 'info',\n    items: [{\n      valType: 'number'\n    }, {\n      valType: 'number'\n    }],\n    description: ['Sets the range of this axis (in degrees),', 'sets the map\\'s clipped coordinates.'].join(' ')\n  },\n  showgrid: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not graticule are shown on the map.'\n  },\n  tick0: {\n    valType: 'number',\n    role: 'info',\n    dflt: 0,\n    description: ['Sets the graticule\\'s starting tick longitude/latitude.'].join(' ')\n  },\n  dtick: {\n    valType: 'number',\n    role: 'info',\n    description: ['Sets the graticule\\'s longitude/latitude tick step.'].join(' ')\n  },\n  gridcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.lightLine,\n    description: ['Sets the graticule\\'s stroke color.'].join(' ')\n  },\n  gridwidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: ['Sets the graticule\\'s stroke width (in px).'].join(' ')\n  }\n};\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'geo'\n  }, {\n    description: ['Note that geo subplots are constrained by domain.', 'In general, when `projection.scale` is set to 1.', 'a map will fit either its x or y domain, but not both.'].join(' ')\n  }),\n  resolution: {\n    valType: 'enumerated',\n    values: [110, 50],\n    role: 'info',\n    dflt: 110,\n    coerceNumber: true,\n    description: ['Sets the resolution of the base layers.', 'The values have units of km/mm', 'e.g. 110 corresponds to a scale ratio of 1:110,000,000.'].join(' ')\n  },\n  scope: {\n    valType: 'enumerated',\n    role: 'info',\n    values: Object.keys(constants.scopeDefaults),\n    dflt: 'world',\n    description: 'Set the scope of the map.'\n  },\n  projection: {\n    type: {\n      valType: 'enumerated',\n      role: 'info',\n      values: Object.keys(constants.projNames),\n      description: 'Sets the projection type.'\n    },\n    rotation: {\n      lon: {\n        valType: 'number',\n        role: 'info',\n        description: ['Rotates the map along parallels', '(in degrees East).', 'Defaults to the center of the `lonaxis.range` values.'].join(' ')\n      },\n      lat: {\n        valType: 'number',\n        role: 'info',\n        description: ['Rotates the map along meridians', '(in degrees North).'].join(' ')\n      },\n      roll: {\n        valType: 'number',\n        role: 'info',\n        description: ['Roll the map (in degrees)', 'For example, a roll of *180* makes the map appear upside down.'].join(' ')\n      }\n    },\n    parallels: {\n      valType: 'info_array',\n      role: 'info',\n      items: [{\n        valType: 'number'\n      }, {\n        valType: 'number'\n      }],\n      description: ['For conic projection types only.', 'Sets the parallels (tangent, secant)', 'where the cone intersects the sphere.'].join(' ')\n    },\n    scale: {\n      valType: 'number',\n      role: 'info',\n      min: 0,\n      dflt: 1,\n      description: ['Zooms in or out on the map view.', 'A scale of *1* corresponds to the largest zoom level', 'that fits the map\\'s lon and lat ranges. '].join(' ')\n    }\n  },\n  center: {\n    lon: {\n      valType: 'number',\n      role: 'info',\n      description: ['Sets the longitude of the map\\'s center.', 'By default, the map\\'s longitude center lies at the middle of the longitude range', 'for scoped projection and above `projection.rotation.lon` otherwise.'].join(' ')\n    },\n    lat: {\n      valType: 'number',\n      role: 'info',\n      description: ['Sets the latitude of the map\\'s center.', 'For all projection types, the map\\'s latitude center lies', 'at the middle of the latitude range by default.'].join(' ')\n    }\n  },\n  showcoastlines: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Sets whether or not the coastlines are drawn.'\n  },\n  coastlinecolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the coastline color.'\n  },\n  coastlinewidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the coastline stroke width (in px).'\n  },\n  showland: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not land masses are filled in color.'\n  },\n  landcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.landColor,\n    description: 'Sets the land mass color.'\n  },\n  showocean: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not oceans are filled in color.'\n  },\n  oceancolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.waterColor,\n    description: 'Sets the ocean color'\n  },\n  showlakes: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not lakes are drawn.'\n  },\n  lakecolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.waterColor,\n    description: 'Sets the color of the lakes.'\n  },\n  showrivers: {\n    valType: 'boolean',\n    role: 'info',\n    dflt: false,\n    description: 'Sets whether or not rivers are drawn.'\n  },\n  rivercolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: constants.waterColor,\n    description: 'Sets color of the rivers.'\n  },\n  riverwidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the rivers.'\n  },\n  showcountries: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Sets whether or not country boundaries are drawn.'\n  },\n  countrycolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets line color of the country boundaries.'\n  },\n  countrywidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets line width (in px) of the country boundaries.'\n  },\n  showsubunits: {\n    valType: 'boolean',\n    role: 'info',\n    description: ['Sets whether or not boundaries of subunits within countries', '(e.g. states, provinces) are drawn.'].join(' ')\n  },\n  subunitcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color of the subunits boundaries.'\n  },\n  subunitwidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the subunits boundaries.'\n  },\n  showframe: {\n    valType: 'boolean',\n    role: 'info',\n    description: 'Sets whether or not a frame is drawn around the map.'\n  },\n  framecolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color the frame.'\n  },\n  framewidth: {\n    valType: 'number',\n    role: 'style',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the frame.'\n  },\n  bgcolor: {\n    valType: 'color',\n    role: 'style',\n    dflt: colorAttrs.background,\n    description: 'Set the background color of the map'\n  },\n  lonaxis: geoAxesAttrs,\n  lataxis: geoAxesAttrs\n}, 'plot', 'from-root'); // set uirevision outside of overrideAll so it can be `editType: 'none'`\n\nattrs.uirevision = {\n  valType: 'any',\n  role: 'info',\n  editType: 'none',\n  description: ['Controls persistence of user-driven changes in the view', '(projection and center). Defaults to `layout.uirevision`.'].join(' ')\n};","map":null,"metadata":{},"sourceType":"script"}