{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar countryRegex = require('country-regex');\n\nvar Lib = require('../lib'); // make list of all country iso3 ids from at runtime\n\n\nvar countryIds = Object.keys(countryRegex);\nvar locationmodeToIdFinder = {\n  'ISO-3': Lib.identity,\n  'USA-states': Lib.identity,\n  'country names': countryNameToISO3\n};\n\nfunction countryNameToISO3(countryName) {\n  for (var i = 0; i < countryIds.length; i++) {\n    var iso3 = countryIds[i];\n    var regex = new RegExp(countryRegex[iso3]);\n    if (regex.test(countryName.trim().toLowerCase())) return iso3;\n  }\n\n  Lib.log('Unrecognized country name: ' + countryName + '.');\n  return false;\n}\n\nfunction locationToFeature(locationmode, location, features) {\n  if (!location || typeof location !== 'string') return false;\n  var locationId = locationmodeToIdFinder[locationmode](location);\n  var filteredFeatures;\n  var f, i;\n\n  if (locationId) {\n    if (locationmode === 'USA-states') {\n      // Filter out features out in USA\n      //\n      // This is important as the Natural Earth files\n      // include state/provinces from USA, Canada, Australia and Brazil\n      // which have some overlay in their two-letter ids. For example,\n      // 'WA' is used for both Washington state and Western Australia.\n      filteredFeatures = [];\n\n      for (i = 0; i < features.length; i++) {\n        f = features[i];\n\n        if (f.properties && f.properties.gu && f.properties.gu === 'USA') {\n          filteredFeatures.push(f);\n        }\n      }\n    } else {\n      filteredFeatures = features;\n    }\n\n    for (i = 0; i < filteredFeatures.length; i++) {\n      f = filteredFeatures[i];\n      if (f.id === locationId) return f;\n    }\n\n    Lib.log(['Location with id', locationId, 'does not have a matching topojson feature at this resolution.'].join(' '));\n  }\n\n  return false;\n}\n\nmodule.exports = {\n  locationToFeature: locationToFeature\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/lib/geo_location_utils.js"],"names":["countryRegex","require","Lib","countryIds","Object","keys","locationmodeToIdFinder","identity","countryNameToISO3","countryName","i","length","iso3","regex","RegExp","test","trim","toLowerCase","log","locationToFeature","locationmode","location","features","locationId","filteredFeatures","f","properties","gu","push","id","join","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB,C,CAEA;;;AACA,IAAIE,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYL,YAAZ,CAAjB;AAEA,IAAIM,sBAAsB,GAAG;AACzB,WAASJ,GAAG,CAACK,QADY;AAEzB,gBAAcL,GAAG,CAACK,QAFO;AAGzB,mBAAiBC;AAHQ,CAA7B;;AAMA,SAASA,iBAAT,CAA2BC,WAA3B,EAAwC;AACpC,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,UAAU,CAACQ,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIE,IAAI,GAAGT,UAAU,CAACO,CAAD,CAArB;AACA,QAAIG,KAAK,GAAG,IAAIC,MAAJ,CAAWd,YAAY,CAACY,IAAD,CAAvB,CAAZ;AAEA,QAAGC,KAAK,CAACE,IAAN,CAAWN,WAAW,CAACO,IAAZ,GAAmBC,WAAnB,EAAX,CAAH,EAAiD,OAAOL,IAAP;AACpD;;AAEDV,EAAAA,GAAG,CAACgB,GAAJ,CAAQ,gCAAgCT,WAAhC,GAA8C,GAAtD;AAEA,SAAO,KAAP;AACH;;AAED,SAASU,iBAAT,CAA2BC,YAA3B,EAAyCC,QAAzC,EAAmDC,QAAnD,EAA6D;AACzD,MAAG,CAACD,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAApC,EAA8C,OAAO,KAAP;AAE9C,MAAIE,UAAU,GAAGjB,sBAAsB,CAACc,YAAD,CAAtB,CAAqCC,QAArC,CAAjB;AACA,MAAIG,gBAAJ;AACA,MAAIC,CAAJ,EAAOf,CAAP;;AAEA,MAAGa,UAAH,EAAe;AACX,QAAGH,YAAY,KAAK,YAApB,EAAkC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACAI,MAAAA,gBAAgB,GAAG,EAAnB;;AACA,WAAId,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGY,QAAQ,CAACX,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCe,QAAAA,CAAC,GAAGH,QAAQ,CAACZ,CAAD,CAAZ;;AACA,YAAGe,CAAC,CAACC,UAAF,IAAgBD,CAAC,CAACC,UAAF,CAAaC,EAA7B,IAAmCF,CAAC,CAACC,UAAF,CAAaC,EAAb,KAAoB,KAA1D,EAAiE;AAC7DH,UAAAA,gBAAgB,CAACI,IAAjB,CAAsBH,CAAtB;AACH;AACJ;AACJ,KAdD,MAcO;AACHD,MAAAA,gBAAgB,GAAGF,QAAnB;AACH;;AAED,SAAIZ,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGc,gBAAgB,CAACb,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCe,MAAAA,CAAC,GAAGD,gBAAgB,CAACd,CAAD,CAApB;AACA,UAAGe,CAAC,CAACI,EAAF,KAASN,UAAZ,EAAwB,OAAOE,CAAP;AAC3B;;AAEDvB,IAAAA,GAAG,CAACgB,GAAJ,CAAQ,CACJ,kBADI,EACgBK,UADhB,EAEJ,+DAFI,EAGNO,IAHM,CAGD,GAHC,CAAR;AAIH;;AAED,SAAO,KAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACbb,EAAAA,iBAAiB,EAAEA;AADN,CAAjB","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar countryRegex = require('country-regex');\nvar Lib = require('../lib');\n\n// make list of all country iso3 ids from at runtime\nvar countryIds = Object.keys(countryRegex);\n\nvar locationmodeToIdFinder = {\n    'ISO-3': Lib.identity,\n    'USA-states': Lib.identity,\n    'country names': countryNameToISO3\n};\n\nfunction countryNameToISO3(countryName) {\n    for(var i = 0; i < countryIds.length; i++) {\n        var iso3 = countryIds[i];\n        var regex = new RegExp(countryRegex[iso3]);\n\n        if(regex.test(countryName.trim().toLowerCase())) return iso3;\n    }\n\n    Lib.log('Unrecognized country name: ' + countryName + '.');\n\n    return false;\n}\n\nfunction locationToFeature(locationmode, location, features) {\n    if(!location || typeof location !== 'string') return false;\n\n    var locationId = locationmodeToIdFinder[locationmode](location);\n    var filteredFeatures;\n    var f, i;\n\n    if(locationId) {\n        if(locationmode === 'USA-states') {\n            // Filter out features out in USA\n            //\n            // This is important as the Natural Earth files\n            // include state/provinces from USA, Canada, Australia and Brazil\n            // which have some overlay in their two-letter ids. For example,\n            // 'WA' is used for both Washington state and Western Australia.\n            filteredFeatures = [];\n            for(i = 0; i < features.length; i++) {\n                f = features[i];\n                if(f.properties && f.properties.gu && f.properties.gu === 'USA') {\n                    filteredFeatures.push(f);\n                }\n            }\n        } else {\n            filteredFeatures = features;\n        }\n\n        for(i = 0; i < filteredFeatures.length; i++) {\n            f = filteredFeatures[i];\n            if(f.id === locationId) return f;\n        }\n\n        Lib.log([\n            'Location with id', locationId,\n            'does not have a matching topojson feature at this resolution.'\n        ].join(' '));\n    }\n\n    return false;\n}\n\nmodule.exports = {\n    locationToFeature: locationToFeature\n};\n"]},"metadata":{},"sourceType":"script"}