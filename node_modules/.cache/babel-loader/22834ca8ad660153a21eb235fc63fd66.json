{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\n\nvar handleAnnotationCommonDefaults = require('./common_defaults');\n\nvar attributes = require('./attributes');\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut) {\n  handleArrayContainerDefaults(layoutIn, layoutOut, {\n    name: 'annotations',\n    handleItemDefaults: handleAnnotationDefaults\n  });\n};\n\nfunction handleAnnotationDefaults(annIn, annOut, fullLayout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(annIn, annOut, attributes, attr, dflt);\n  }\n\n  var visible = coerce('visible');\n  var clickToShow = coerce('clicktoshow');\n  if (!(visible || clickToShow)) return;\n  handleAnnotationCommonDefaults(annIn, annOut, fullLayout, coerce);\n  var showArrow = annOut.showarrow; // positioning\n\n  var axLetters = ['x', 'y'];\n  var arrowPosDflt = [-10, -30];\n  var gdMock = {\n    _fullLayout: fullLayout\n  };\n\n  for (var i = 0; i < 2; i++) {\n    var axLetter = axLetters[i]; // xref, yref\n\n    var axRef = Axes.coerceRef(annIn, annOut, gdMock, axLetter, '', 'paper');\n\n    if (axRef !== 'paper') {\n      var ax = Axes.getFromId(gdMock, axRef);\n\n      ax._annIndices.push(annOut._index);\n    } // x, y\n\n\n    Axes.coercePosition(annOut, gdMock, coerce, axRef, axLetter, 0.5);\n\n    if (showArrow) {\n      var arrowPosAttr = 'a' + axLetter; // axref, ayref\n\n      var aaxRef = Axes.coerceRef(annIn, annOut, gdMock, arrowPosAttr, 'pixel'); // for now the arrow can only be on the same axis or specified as pixels\n      // TODO: sometime it might be interesting to allow it to be on *any* axis\n      // but that would require updates to drawing & autorange code and maybe more\n\n      if (aaxRef !== 'pixel' && aaxRef !== axRef) {\n        aaxRef = annOut[arrowPosAttr] = 'pixel';\n      } // ax, ay\n\n\n      var aDflt = aaxRef === 'pixel' ? arrowPosDflt[i] : 0.4;\n      Axes.coercePosition(annOut, gdMock, coerce, aaxRef, arrowPosAttr, aDflt);\n    } // xanchor, yanchor\n\n\n    coerce(axLetter + 'anchor'); // xshift, yshift\n\n    coerce(axLetter + 'shift');\n  } // if you have one coordinate you should have both\n\n\n  Lib.noneOrAll(annIn, annOut, ['x', 'y']); // if you have one part of arrow length you should have both\n\n  if (showArrow) {\n    Lib.noneOrAll(annIn, annOut, ['ax', 'ay']);\n  }\n\n  if (clickToShow) {\n    var xClick = coerce('xclick');\n    var yClick = coerce('yclick'); // put the actual click data to bind to into private attributes\n    // so we don't have to do this little bit of logic on every hover event\n\n    annOut._xclick = xClick === undefined ? annOut.x : Axes.cleanPosition(xClick, gdMock, annOut.xref);\n    annOut._yclick = yClick === undefined ? annOut.y : Axes.cleanPosition(yClick, gdMock, annOut.yref);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}