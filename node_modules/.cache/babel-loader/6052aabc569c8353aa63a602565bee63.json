{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar Lib = require('../../lib');\n\nvar Plots = require('../../plots/plots');\n\nvar Registry = require('../../registry');\n\nvar Events = require('../../lib/events');\n\nvar dragElement = require('../dragelement');\n\nvar Drawing = require('../drawing');\n\nvar Color = require('../color');\n\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar handleClick = require('./handle_click');\n\nvar constants = require('./constants');\n\nvar alignmentConstants = require('../../constants/alignment');\n\nvar LINE_SPACING = alignmentConstants.LINE_SPACING;\nvar FROM_TL = alignmentConstants.FROM_TL;\nvar FROM_BR = alignmentConstants.FROM_BR;\n\nvar getLegendData = require('./get_legend_data');\n\nvar style = require('./style');\n\nvar helpers = require('./helpers');\n\nmodule.exports = function draw(gd) {\n  var fullLayout = gd._fullLayout;\n  var clipId = 'legend' + fullLayout._uid;\n  if (!fullLayout._infolayer || !gd.calcdata) return;\n  if (!gd._legendMouseDownTime) gd._legendMouseDownTime = 0;\n  var opts = fullLayout.legend;\n  var legendData = fullLayout.showlegend && getLegendData(gd.calcdata, opts);\n  var hiddenSlices = fullLayout.hiddenlabels || [];\n\n  if (!fullLayout.showlegend || !legendData.length) {\n    fullLayout._infolayer.selectAll('.legend').remove();\n\n    fullLayout._topdefs.select('#' + clipId).remove();\n\n    Plots.autoMargin(gd, 'legend');\n    return;\n  }\n\n  var maxLength = 0;\n\n  for (var i = 0; i < legendData.length; i++) {\n    for (var j = 0; j < legendData[i].length; j++) {\n      var item = legendData[i][j][0];\n      var trace = item.trace;\n      var isPieLike = Registry.traceIs(trace, 'pie-like');\n      var name = isPieLike ? item.label : trace.name;\n      maxLength = Math.max(maxLength, name && name.length || 0);\n    }\n  }\n\n  var firstRender = false;\n  var legend = Lib.ensureSingle(fullLayout._infolayer, 'g', 'legend', function (s) {\n    s.attr('pointer-events', 'all');\n    firstRender = true;\n  });\n  var clipPath = Lib.ensureSingleById(fullLayout._topdefs, 'clipPath', clipId, function (s) {\n    s.append('rect');\n  });\n  var bg = Lib.ensureSingle(legend, 'rect', 'bg', function (s) {\n    s.attr('shape-rendering', 'crispEdges');\n  });\n  bg.call(Color.stroke, opts.bordercolor).call(Color.fill, opts.bgcolor).style('stroke-width', opts.borderwidth + 'px');\n  var scrollBox = Lib.ensureSingle(legend, 'g', 'scrollbox');\n  var scrollBar = Lib.ensureSingle(legend, 'rect', 'scrollbar', function (s) {\n    s.attr({\n      rx: 20,\n      ry: 3,\n      width: 0,\n      height: 0\n    }).call(Color.fill, '#808BA4');\n  });\n  var groups = scrollBox.selectAll('g.groups').data(legendData);\n  groups.enter().append('g').attr('class', 'groups');\n  groups.exit().remove();\n  var traces = groups.selectAll('g.traces').data(Lib.identity);\n  traces.enter().append('g').attr('class', 'traces');\n  traces.exit().remove();\n  traces.style('opacity', function (d) {\n    var trace = d[0].trace;\n\n    if (Registry.traceIs(trace, 'pie-like')) {\n      return hiddenSlices.indexOf(d[0].label) !== -1 ? 0.5 : 1;\n    } else {\n      return trace.visible === 'legendonly' ? 0.5 : 1;\n    }\n  }).each(function () {\n    d3.select(this).call(drawTexts, gd, maxLength);\n  }).call(style, gd).each(function () {\n    d3.select(this).call(setupTraceToggle, gd);\n  });\n  Lib.syncOrAsync([Plots.previousPromises, function () {\n    if (firstRender) {\n      computeLegendDimensions(gd, groups, traces);\n      expandMargin(gd);\n    } // Position and size the legend\n\n\n    var lxMin = 0;\n    var lxMax = fullLayout.width;\n    var lyMin = 0;\n    var lyMax = fullLayout.height;\n    computeLegendDimensions(gd, groups, traces);\n\n    if (opts._height > lyMax) {\n      // If the legend doesn't fit in the plot area,\n      // do not expand the vertical margins.\n      expandHorizontalMargin(gd);\n    } else {\n      expandMargin(gd);\n    } // Scroll section must be executed after repositionLegend.\n    // It requires the legend width, height, x and y to position the scrollbox\n    // and these values are mutated in repositionLegend.\n\n\n    var gs = fullLayout._size;\n    var lx = gs.l + gs.w * opts.x;\n    var ly = gs.t + gs.h * (1 - opts.y);\n\n    if (Lib.isRightAnchor(opts)) {\n      lx -= opts._width;\n    } else if (Lib.isCenterAnchor(opts)) {\n      lx -= opts._width / 2;\n    }\n\n    if (Lib.isBottomAnchor(opts)) {\n      ly -= opts._height;\n    } else if (Lib.isMiddleAnchor(opts)) {\n      ly -= opts._height / 2;\n    } // Make sure the legend left and right sides are visible\n\n\n    var legendWidth = opts._width;\n    var legendWidthMax = gs.w;\n\n    if (legendWidth > legendWidthMax) {\n      lx = gs.l;\n      legendWidth = legendWidthMax;\n    } else {\n      if (lx + legendWidth > lxMax) lx = lxMax - legendWidth;\n      if (lx < lxMin) lx = lxMin;\n      legendWidth = Math.min(lxMax - lx, opts._width);\n    } // Make sure the legend top and bottom are visible\n    // (legends with a scroll bar are not allowed to stretch beyond the extended\n    // margins)\n\n\n    var legendHeight = opts._height;\n    var legendHeightMax = gs.h;\n\n    if (legendHeight > legendHeightMax) {\n      ly = gs.t;\n      legendHeight = legendHeightMax;\n    } else {\n      if (ly + legendHeight > lyMax) ly = lyMax - legendHeight;\n      if (ly < lyMin) ly = lyMin;\n      legendHeight = Math.min(lyMax - ly, opts._height);\n    } // Set size and position of all the elements that make up a legend:\n    // legend, background and border, scroll box and scroll bar\n\n\n    Drawing.setTranslate(legend, lx, ly); // to be safe, remove previous listeners\n\n    scrollBar.on('.drag', null);\n    legend.on('wheel', null);\n\n    if (opts._height <= legendHeight || gd._context.staticPlot) {\n      // if scrollbar should not be shown.\n      bg.attr({\n        width: legendWidth - opts.borderwidth,\n        height: legendHeight - opts.borderwidth,\n        x: opts.borderwidth / 2,\n        y: opts.borderwidth / 2\n      });\n      Drawing.setTranslate(scrollBox, 0, 0);\n      clipPath.select('rect').attr({\n        width: legendWidth - 2 * opts.borderwidth,\n        height: legendHeight - 2 * opts.borderwidth,\n        x: opts.borderwidth,\n        y: opts.borderwidth\n      });\n      Drawing.setClipUrl(scrollBox, clipId, gd);\n      Drawing.setRect(scrollBar, 0, 0, 0, 0);\n      delete opts._scrollY;\n    } else {\n      var scrollBarHeight = Math.max(constants.scrollBarMinHeight, legendHeight * legendHeight / opts._height);\n      var scrollBarYMax = legendHeight - scrollBarHeight - 2 * constants.scrollBarMargin;\n      var scrollBoxYMax = opts._height - legendHeight;\n      var scrollRatio = scrollBarYMax / scrollBoxYMax;\n      var scrollBoxY = Math.min(opts._scrollY || 0, scrollBoxYMax); // increase the background and clip-path width\n      // by the scrollbar width and margin\n\n      bg.attr({\n        width: legendWidth - 2 * opts.borderwidth + constants.scrollBarWidth + constants.scrollBarMargin,\n        height: legendHeight - opts.borderwidth,\n        x: opts.borderwidth / 2,\n        y: opts.borderwidth / 2\n      });\n      clipPath.select('rect').attr({\n        width: legendWidth - 2 * opts.borderwidth + constants.scrollBarWidth + constants.scrollBarMargin,\n        height: legendHeight - 2 * opts.borderwidth,\n        x: opts.borderwidth,\n        y: opts.borderwidth + scrollBoxY\n      });\n      Drawing.setClipUrl(scrollBox, clipId, gd);\n      scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio);\n      legend.on('wheel', function () {\n        scrollBoxY = Lib.constrain(opts._scrollY + d3.event.deltaY / scrollBarYMax * scrollBoxYMax, 0, scrollBoxYMax);\n        scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio);\n\n        if (scrollBoxY !== 0 && scrollBoxY !== scrollBoxYMax) {\n          d3.event.preventDefault();\n        }\n      });\n      var eventY0, scrollBoxY0;\n      var drag = d3.behavior.drag().on('dragstart', function () {\n        eventY0 = d3.event.sourceEvent.clientY;\n        scrollBoxY0 = scrollBoxY;\n      }).on('drag', function () {\n        var e = d3.event.sourceEvent;\n        if (e.buttons === 2 || e.ctrlKey) return;\n        scrollBoxY = Lib.constrain((e.clientY - eventY0) / scrollRatio + scrollBoxY0, 0, scrollBoxYMax);\n        scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio);\n      });\n      scrollBar.call(drag);\n    }\n\n    function scrollHandler(scrollBoxY, scrollBarHeight, scrollRatio) {\n      opts._scrollY = gd._fullLayout.legend._scrollY = scrollBoxY;\n      Drawing.setTranslate(scrollBox, 0, -scrollBoxY);\n      Drawing.setRect(scrollBar, legendWidth, constants.scrollBarMargin + scrollBoxY * scrollRatio, constants.scrollBarWidth, scrollBarHeight);\n      clipPath.select('rect').attr({\n        y: opts.borderwidth + scrollBoxY\n      });\n    }\n\n    if (gd._context.edits.legendPosition) {\n      var xf, yf, x0, y0;\n      legend.classed('cursor-move', true);\n      dragElement.init({\n        element: legend.node(),\n        gd: gd,\n        prepFn: function () {\n          var transform = Drawing.getTranslate(legend);\n          x0 = transform.x;\n          y0 = transform.y;\n        },\n        moveFn: function (dx, dy) {\n          var newX = x0 + dx;\n          var newY = y0 + dy;\n          Drawing.setTranslate(legend, newX, newY);\n          xf = dragElement.align(newX, 0, gs.l, gs.l + gs.w, opts.xanchor);\n          yf = dragElement.align(newY, 0, gs.t + gs.h, gs.t, opts.yanchor);\n        },\n        doneFn: function () {\n          if (xf !== undefined && yf !== undefined) {\n            Registry.call('_guiRelayout', gd, {\n              'legend.x': xf,\n              'legend.y': yf\n            });\n          }\n        },\n        clickFn: function (numClicks, e) {\n          var clickedTrace = fullLayout._infolayer.selectAll('g.traces').filter(function () {\n            var bbox = this.getBoundingClientRect();\n            return e.clientX >= bbox.left && e.clientX <= bbox.right && e.clientY >= bbox.top && e.clientY <= bbox.bottom;\n          });\n\n          if (clickedTrace.size() > 0) {\n            clickOrDoubleClick(gd, legend, clickedTrace, numClicks, e);\n          }\n        }\n      });\n    }\n  }], gd);\n};\n\nfunction clickOrDoubleClick(gd, legend, legendItem, numClicks, evt) {\n  var trace = legendItem.data()[0][0].trace;\n  var evtData = {\n    event: evt,\n    node: legendItem.node(),\n    curveNumber: trace.index,\n    expandedIndex: trace._expandedIndex,\n    data: gd.data,\n    layout: gd.layout,\n    frames: gd._transitionData._frames,\n    config: gd._context,\n    fullData: gd._fullData,\n    fullLayout: gd._fullLayout\n  };\n\n  if (trace._group) {\n    evtData.group = trace._group;\n  }\n\n  if (Registry.traceIs(trace, 'pie-like')) {\n    evtData.label = legendItem.datum()[0].label;\n  }\n\n  var clickVal = Events.triggerHandler(gd, 'plotly_legendclick', evtData);\n  if (clickVal === false) return;\n\n  if (numClicks === 1) {\n    legend._clickTimeout = setTimeout(function () {\n      handleClick(legendItem, gd, numClicks);\n    }, gd._context.doubleClickDelay);\n  } else if (numClicks === 2) {\n    if (legend._clickTimeout) clearTimeout(legend._clickTimeout);\n    gd._legendMouseDownTime = 0;\n    var dblClickVal = Events.triggerHandler(gd, 'plotly_legenddoubleclick', evtData);\n    if (dblClickVal !== false) handleClick(legendItem, gd, numClicks);\n  }\n}\n\nfunction drawTexts(g, gd, maxLength) {\n  var legendItem = g.data()[0][0];\n  var fullLayout = gd._fullLayout;\n  var trace = legendItem.trace;\n  var isPieLike = Registry.traceIs(trace, 'pie-like');\n  var traceIndex = trace.index;\n  var isEditable = gd._context.edits.legendText && !isPieLike;\n  var name = isPieLike ? legendItem.label : trace.name;\n\n  if (trace._meta) {\n    name = Lib.templateString(name, trace._meta);\n  }\n\n  var textEl = Lib.ensureSingle(g, 'text', 'legendtext');\n  textEl.attr('text-anchor', 'start').classed('user-select-none', true).call(Drawing.font, fullLayout.legend.font).text(isEditable ? ensureLength(name, maxLength) : name);\n  svgTextUtils.positionText(textEl, constants.textOffsetX, 0);\n\n  function textLayout(s) {\n    svgTextUtils.convertToTspans(s, gd, function () {\n      computeTextDimensions(g, gd);\n    });\n  }\n\n  if (isEditable) {\n    textEl.call(svgTextUtils.makeEditable, {\n      gd: gd,\n      text: name\n    }).call(textLayout).on('edit', function (newName) {\n      this.text(ensureLength(newName, maxLength)).call(textLayout);\n      var fullInput = legendItem.trace._fullInput || {};\n      var update = {};\n\n      if (Registry.hasTransform(fullInput, 'groupby')) {\n        var groupbyIndices = Registry.getTransformIndices(fullInput, 'groupby');\n        var index = groupbyIndices[groupbyIndices.length - 1];\n        var kcont = Lib.keyedContainer(fullInput, 'transforms[' + index + '].styles', 'target', 'value.name');\n        kcont.set(legendItem.trace._group, newName);\n        update = kcont.constructUpdate();\n      } else {\n        update.name = newName;\n      }\n\n      return Registry.call('_guiRestyle', gd, update, traceIndex);\n    });\n  } else {\n    textLayout(textEl);\n  }\n}\n/*\n * Make sure we have a reasonably clickable region.\n * If this string is missing or very short, pad it with spaces out to at least\n * 4 characters, up to the max length of other labels, on the assumption that\n * most characters are wider than spaces so a string of spaces will usually be\n * no wider than the real labels.\n */\n\n\nfunction ensureLength(str, maxLength) {\n  var targetLength = Math.max(4, maxLength);\n  if (str && str.trim().length >= targetLength / 2) return str;\n  str = str || '';\n\n  for (var i = targetLength - str.length; i > 0; i--) str += ' ';\n\n  return str;\n}\n\nfunction setupTraceToggle(g, gd) {\n  var doubleClickDelay = gd._context.doubleClickDelay;\n  var newMouseDownTime;\n  var numClicks = 1;\n  var traceToggle = Lib.ensureSingle(g, 'rect', 'legendtoggle', function (s) {\n    s.style('cursor', 'pointer').attr('pointer-events', 'all').call(Color.fill, 'rgba(0,0,0,0)');\n  });\n  traceToggle.on('mousedown', function () {\n    newMouseDownTime = new Date().getTime();\n\n    if (newMouseDownTime - gd._legendMouseDownTime < doubleClickDelay) {\n      // in a click train\n      numClicks += 1;\n    } else {\n      // new click train\n      numClicks = 1;\n      gd._legendMouseDownTime = newMouseDownTime;\n    }\n  });\n  traceToggle.on('mouseup', function () {\n    if (gd._dragged || gd._editing) return;\n    var legend = gd._fullLayout.legend;\n\n    if (new Date().getTime() - gd._legendMouseDownTime > doubleClickDelay) {\n      numClicks = Math.max(numClicks - 1, 1);\n    }\n\n    clickOrDoubleClick(gd, legend, g, numClicks, d3.event);\n  });\n}\n\nfunction computeTextDimensions(g, gd) {\n  var legendItem = g.data()[0][0];\n\n  if (!legendItem.trace.showlegend) {\n    g.remove();\n    return;\n  }\n\n  var mathjaxGroup = g.select('g[class*=math-group]');\n  var mathjaxNode = mathjaxGroup.node();\n  var opts = gd._fullLayout.legend;\n  var lineHeight = opts.font.size * LINE_SPACING;\n  var height, width;\n\n  if (mathjaxNode) {\n    var mathjaxBB = Drawing.bBox(mathjaxNode);\n    height = mathjaxBB.height;\n    width = mathjaxBB.width;\n    Drawing.setTranslate(mathjaxGroup, 0, height / 4);\n  } else {\n    var text = g.select('.legendtext');\n    var textLines = svgTextUtils.lineCount(text);\n    var textNode = text.node();\n    height = lineHeight * textLines;\n    width = textNode ? Drawing.bBox(textNode).width : 0; // approximation to height offset to center the font\n    // to avoid getBoundingClientRect\n\n    var textY = lineHeight * (0.3 + (1 - textLines) / 2);\n    svgTextUtils.positionText(text, constants.textOffsetX, textY);\n  }\n\n  legendItem.lineHeight = lineHeight;\n  legendItem.height = Math.max(height, 16) + 3;\n  legendItem.width = width;\n}\n\nfunction computeLegendDimensions(gd, groups, traces) {\n  var fullLayout = gd._fullLayout;\n  var opts = fullLayout.legend;\n  var borderwidth = opts.borderwidth;\n  var isGrouped = helpers.isGrouped(opts);\n  var extraWidth = 0;\n  var traceGap = 5;\n  opts._width = 0;\n  opts._height = 0;\n\n  if (helpers.isVertical(opts)) {\n    if (isGrouped) {\n      groups.each(function (d, i) {\n        Drawing.setTranslate(this, 0, i * opts.tracegroupgap);\n      });\n    }\n\n    traces.each(function (d) {\n      var legendItem = d[0];\n      var textHeight = legendItem.height;\n      var textWidth = legendItem.width;\n      Drawing.setTranslate(this, borderwidth, 5 + borderwidth + opts._height + textHeight / 2);\n      opts._height += textHeight;\n      opts._width = Math.max(opts._width, textWidth);\n    });\n    opts._width += 45 + borderwidth * 2;\n    opts._height += 10 + borderwidth * 2;\n\n    if (isGrouped) {\n      opts._height += (opts._lgroupsLength - 1) * opts.tracegroupgap;\n    }\n\n    extraWidth = 40;\n  } else if (isGrouped) {\n    var maxHeight = 0;\n    var maxWidth = 0;\n    var groupData = groups.data();\n    var maxItems = 0;\n    var i;\n\n    for (i = 0; i < groupData.length; i++) {\n      var group = groupData[i];\n      var groupWidths = group.map(function (legendItemArray) {\n        return legendItemArray[0].width;\n      });\n      var groupWidth = Lib.aggNums(Math.max, null, groupWidths);\n      var groupHeight = group.reduce(function (a, b) {\n        return a + b[0].height;\n      }, 0);\n      maxWidth = Math.max(maxWidth, groupWidth);\n      maxHeight = Math.max(maxHeight, groupHeight);\n      maxItems = Math.max(maxItems, group.length);\n    }\n\n    maxWidth += traceGap;\n    maxWidth += 40;\n    var groupXOffsets = [opts._width];\n    var groupYOffsets = [];\n    var rowNum = 0;\n\n    for (i = 0; i < groupData.length; i++) {\n      if (fullLayout._size.w < borderwidth + opts._width + traceGap + maxWidth) {\n        groupXOffsets[groupXOffsets.length - 1] = groupXOffsets[0];\n        opts._width = maxWidth;\n        rowNum++;\n      } else {\n        opts._width += maxWidth + borderwidth;\n      }\n\n      var rowYOffset = rowNum * maxHeight;\n      rowYOffset += rowNum > 0 ? opts.tracegroupgap : 0;\n      groupYOffsets.push(rowYOffset);\n      groupXOffsets.push(opts._width);\n    }\n\n    groups.each(function (d, i) {\n      Drawing.setTranslate(this, groupXOffsets[i], groupYOffsets[i]);\n    });\n    groups.each(function () {\n      var group = d3.select(this);\n      var groupTraces = group.selectAll('g.traces');\n      var groupHeight = 0;\n      groupTraces.each(function (d) {\n        var legendItem = d[0];\n        var textHeight = legendItem.height;\n        Drawing.setTranslate(this, 0, 5 + borderwidth + groupHeight + textHeight / 2);\n        groupHeight += textHeight;\n      });\n    });\n    var maxYLegend = groupYOffsets[groupYOffsets.length - 1] + maxHeight;\n    opts._height = 10 + borderwidth * 2 + maxYLegend;\n    var maxOffset = Math.max.apply(null, groupXOffsets);\n    opts._width = maxOffset + maxWidth + 40;\n    opts._width += borderwidth * 2;\n  } else {\n    var rowHeight = 0;\n    var maxTraceHeight = 0;\n    var maxTraceWidth = 0;\n    var offsetX = 0;\n    var fullTracesWidth = 0; // calculate largest width for traces and use for width of all legend items\n\n    traces.each(function (d) {\n      maxTraceWidth = Math.max(40 + d[0].width, maxTraceWidth);\n      fullTracesWidth += 40 + d[0].width + traceGap;\n    }); // check if legend fits in one row\n\n    var oneRowLegend = fullLayout._size.w > borderwidth + fullTracesWidth - traceGap;\n    traces.each(function (d) {\n      var legendItem = d[0];\n      var traceWidth = oneRowLegend ? 40 + d[0].width : maxTraceWidth;\n\n      if (borderwidth + offsetX + traceGap + traceWidth > fullLayout._size.w) {\n        offsetX = 0;\n        rowHeight += maxTraceHeight;\n        opts._height += maxTraceHeight; // reset for next row\n\n        maxTraceHeight = 0;\n      }\n\n      Drawing.setTranslate(this, borderwidth + offsetX, 5 + borderwidth + legendItem.height / 2 + rowHeight);\n      opts._width += traceGap + traceWidth; // keep track of tallest trace in group\n\n      offsetX += traceGap + traceWidth;\n      maxTraceHeight = Math.max(legendItem.height, maxTraceHeight);\n    });\n\n    if (oneRowLegend) {\n      opts._height = maxTraceHeight;\n    } else {\n      opts._height += maxTraceHeight;\n    }\n\n    opts._width += borderwidth * 2;\n    opts._height += 10 + borderwidth * 2;\n  } // make sure we're only getting full pixels\n\n\n  opts._width = Math.ceil(opts._width);\n  opts._height = Math.ceil(opts._height);\n  var isEditable = gd._context.edits.legendText || gd._context.edits.legendPosition;\n  traces.each(function (d) {\n    var legendItem = d[0];\n    var bg = d3.select(this).select('.legendtoggle');\n    Drawing.setRect(bg, 0, -legendItem.height / 2, (isEditable ? 0 : opts._width) + extraWidth, legendItem.height);\n  });\n}\n\nfunction expandMargin(gd) {\n  var fullLayout = gd._fullLayout;\n  var opts = fullLayout.legend;\n  var xanchor = 'left';\n\n  if (Lib.isRightAnchor(opts)) {\n    xanchor = 'right';\n  } else if (Lib.isCenterAnchor(opts)) {\n    xanchor = 'center';\n  }\n\n  var yanchor = 'top';\n\n  if (Lib.isBottomAnchor(opts)) {\n    yanchor = 'bottom';\n  } else if (Lib.isMiddleAnchor(opts)) {\n    yanchor = 'middle';\n  } // lastly check if the margin auto-expand has changed\n\n\n  Plots.autoMargin(gd, 'legend', {\n    x: opts.x,\n    y: opts.y,\n    l: opts._width * FROM_TL[xanchor],\n    r: opts._width * FROM_BR[xanchor],\n    b: opts._height * FROM_BR[yanchor],\n    t: opts._height * FROM_TL[yanchor]\n  });\n}\n\nfunction expandHorizontalMargin(gd) {\n  var fullLayout = gd._fullLayout;\n  var opts = fullLayout.legend;\n  var xanchor = 'left';\n\n  if (Lib.isRightAnchor(opts)) {\n    xanchor = 'right';\n  } else if (Lib.isCenterAnchor(opts)) {\n    xanchor = 'center';\n  } // lastly check if the margin auto-expand has changed\n\n\n  Plots.autoMargin(gd, 'legend', {\n    x: opts.x,\n    y: 0.5,\n    l: opts._width * FROM_TL[xanchor],\n    r: opts._width * FROM_BR[xanchor],\n    b: 0,\n    t: 0\n  });\n}","map":null,"metadata":{},"sourceType":"script"}