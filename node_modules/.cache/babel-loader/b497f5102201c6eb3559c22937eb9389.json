{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\n\nvar attributes = require('./attributes');\n\nvar fillText = require('../../lib').fillText;\n\nmodule.exports = function hoverPoints(pointData, xval, yval) {\n  var cd = pointData.cd;\n  var trace = cd[0].trace;\n  var geo = pointData.subplot;\n  var pt, i, j, isInside;\n\n  for (i = 0; i < cd.length; i++) {\n    pt = cd[i];\n    isInside = false;\n\n    if (pt._polygons) {\n      for (j = 0; j < pt._polygons.length; j++) {\n        if (pt._polygons[j].contains([xval, yval])) {\n          isInside = !isInside;\n        } // for polygons that cross antimeridian as xval is in [-180, 180]\n\n\n        if (pt._polygons[j].contains([xval + 360, yval])) {\n          isInside = !isInside;\n        }\n      }\n\n      if (isInside) break;\n    }\n  }\n\n  if (!isInside || !pt) return;\n  pointData.x0 = pointData.x1 = pointData.xa.c2p(pt.ct);\n  pointData.y0 = pointData.y1 = pointData.ya.c2p(pt.ct);\n  pointData.index = pt.index;\n  pointData.location = pt.loc;\n  pointData.z = pt.z;\n  pointData.zLabel = Axes.tickText(geo.mockAxis, geo.mockAxis.c2l(pt.z), 'hover').text;\n  pointData.hovertemplate = pt.hovertemplate;\n  makeHoverInfo(pointData, trace, pt, geo.mockAxis);\n  return [pointData];\n};\n\nfunction makeHoverInfo(pointData, trace, pt) {\n  if (trace.hovertemplate) return;\n  var hoverinfo = pt.hi || trace.hoverinfo;\n  var loc = String(pt.loc);\n  var parts = hoverinfo === 'all' ? attributes.hoverinfo.flags : hoverinfo.split('+');\n  var hasName = parts.indexOf('name') !== -1;\n  var hasLocation = parts.indexOf('location') !== -1;\n  var hasZ = parts.indexOf('z') !== -1;\n  var hasText = parts.indexOf('text') !== -1;\n  var hasIdAsNameLabel = !hasName && hasLocation;\n  var text = [];\n\n  if (hasIdAsNameLabel) {\n    pointData.nameOverride = loc;\n  } else {\n    if (hasName) pointData.nameOverride = trace.name;\n    if (hasLocation) text.push(loc);\n  }\n\n  if (hasZ) {\n    text.push(pointData.zLabel);\n  }\n\n  if (hasText) {\n    fillText(pt, trace, text);\n  }\n\n  pointData.extraText = text.join('<br>');\n}","map":null,"metadata":{},"sourceType":"script"}