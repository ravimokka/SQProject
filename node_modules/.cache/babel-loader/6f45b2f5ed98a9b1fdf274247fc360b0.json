{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as viser from 'viser';\n\nvar PluginComponent = function (_super) {\n  __extends(PluginComponent, _super);\n\n  function PluginComponent() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.config = {};\n    _this.plugins = null;\n\n    _this.centralizedUpdates = function (unit) {\n      var config = _this.config;\n      var props = unit.props;\n      var displayName = unit.displayName;\n\n      if (displayName === 'Slider') {\n        var container = props.container;\n\n        if (!container || !document.getElementById(container)) {\n          props = __assign({}, props, {\n            container: unit.state.containerId\n          });\n        }\n      }\n\n      _this.combineContentConfig(displayName, props, config);\n\n      _this.updateSliderInstance(config);\n    };\n\n    _this.portalRef = function (container) {\n      if (!_this.container) {\n        _this.container = container;\n      }\n    };\n\n    return _this;\n  }\n\n  PluginComponent.prototype.getChildContext = function () {\n    return {\n      centralizedUpdates: this.centralizedUpdates\n    };\n  };\n\n  PluginComponent.prototype.combineContentConfig = function (displayName, props, config) {\n    var nameLowerCase = displayName.toLowerCase();\n    config[nameLowerCase] = props;\n  };\n\n  PluginComponent.prototype.updateSliderInstance = function (config) {\n    if (!this.plugins) {\n      this.plugins = viser.Plugin(config);\n    }\n\n    if (this.plugins && this.plugins.slider && config.slider) {\n      this.plugins = viser.Plugin(config);\n    }\n  };\n\n  PluginComponent.prototype.clearConfigData = function () {\n    this.config = {};\n  };\n\n  PluginComponent.prototype.render = function () {\n    return React.createElement(\"div\", {\n      ref: this.portalRef\n    }, this.props.children);\n  };\n\n  PluginComponent.childContextTypes = {\n    centralizedUpdates: PropTypes.func\n  };\n  return PluginComponent;\n}(React.Component);\n\nexport default PluginComponent;","map":null,"metadata":{},"sourceType":"module"}