{"ast":null,"code":"import identity from \"./identity\";\nexport default function (topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function (point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0, x0 = x1;\n    point[1] = y1 - y0, y0 = y1;\n    return point;\n  };\n}","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/topojson-client/src/untransform.js"],"names":["identity","topology","transform","x0","y0","kx","scale","ky","dx","translate","dy","point","i","x1","Math","round","y1"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,eAAe,UAASC,QAAT,EAAmB;AAChC,MAAI,CAACC,SAAS,GAAGD,QAAQ,CAACC,SAAtB,KAAoC,IAAxC,EAA8C,OAAOF,QAAP;AAC9C,MAAIE,SAAJ;AAAA,MACIC,EADJ;AAAA,MAEIC,EAFJ;AAAA,MAGIC,EAAE,GAAGH,SAAS,CAACI,KAAV,CAAgB,CAAhB,CAHT;AAAA,MAIIC,EAAE,GAAGL,SAAS,CAACI,KAAV,CAAgB,CAAhB,CAJT;AAAA,MAKIE,EAAE,GAAGN,SAAS,CAACO,SAAV,CAAoB,CAApB,CALT;AAAA,MAMIC,EAAE,GAAGR,SAAS,CAACO,SAAV,CAAoB,CAApB,CANT;AAOA,SAAO,UAASE,KAAT,EAAgBC,CAAhB,EAAmB;AACxB,QAAI,CAACA,CAAL,EAAQT,EAAE,GAAGC,EAAE,GAAG,CAAV;AACR,QAAIS,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,KAAK,CAAC,CAAD,CAAL,GAAWH,EAAZ,IAAkBH,EAA7B,CAAT;AAAA,QACIW,EAAE,GAAGF,IAAI,CAACC,KAAL,CAAW,CAACJ,KAAK,CAAC,CAAD,CAAL,GAAWD,EAAZ,IAAkBH,EAA7B,CADT;AAEAI,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWE,EAAE,GAAGV,EAAhB,EAAoBA,EAAE,GAAGU,EAAzB;AACAF,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWK,EAAE,GAAGZ,EAAhB,EAAoBA,EAAE,GAAGY,EAAzB;AACA,WAAOL,KAAP;AACD,GAPD;AAQD","sourcesContent":["import identity from \"./identity\";\n\nexport default function(topology) {\n  if ((transform = topology.transform) == null) return identity;\n  var transform,\n      x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(point, i) {\n    if (!i) x0 = y0 = 0;\n    var x1 = Math.round((point[0] - dx) / kx),\n        y1 = Math.round((point[1] - dy) / ky);\n    point[0] = x1 - x0, x0 = x1;\n    point[1] = y1 - y0, y0 = y1;\n    return point;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}