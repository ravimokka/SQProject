{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nimport { shape, arrayOf, func, oneOf, oneOfType, any, node, object, string, number, bool } from 'prop-types';\nimport { checkFormat } from '../utils';\nexport default {\n  anchorOrigin: shape({\n    vertical: oneOf(['top', 'bottom']),\n    horizontal: oneOf(['left', 'right'])\n  }),\n  autocompleteFilter: func,\n  autocompleteStyle: object,\n  autocompleteUnderlineFocusStyle: object,\n  autocompleteUnderlineStyle: object,\n  canAutoPosition: bool,\n  checkedIcon: node,\n  checkPosition: oneOf(['', 'left', 'right']),\n  // children can be either:\n  // an html element with a required 'value' property, and optional label prop,\n  // an optgroup with valid children (same as bove case),\n  // an array of either valid chidlren, or of optgroups hosting valid children\n  children: oneOfType([shape({\n    value: any.isRequired,\n    label: string\n  }), function (props, propName, componentName, location, propFullName) {\n    var pp = props[propName];\n\n    if (pp.type === 'optgroup' && pp.props.children) {\n      if (Array.isArray(pp.props.children)) {\n        for (var _iterator = pp.props.children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref = _i.value;\n          }\n\n          var child = _ref;\n\n          if (!child.props.value) {\n            return new Error('\\n              Missing required property \\'value\\' for \\'' + propFullName + '\\' supplied to \\'' + componentName + ' ' + props.name + '\\'.');\n          }\n        }\n      } else if (_typeof(pp.props.children) === 'object' && !pp.props.children.props.value) {\n        return new Error('\\n          Missing required property \\'value\\' for \\'' + propFullName + '\\' supplied to \\'' + componentName + ' ' + props.name + '\\'.');\n      }\n    }\n  }, arrayOf(function (props, propName, componentName, location, propFullName) {\n    if (props[propName].type !== 'optgroup') {\n      if (!props[propName].props.value) {\n        return new Error('\\n          Missing required property \\'value\\' for \\'' + propFullName + '\\' supplied to \\'' + componentName + ' ' + props.name + '\\'.');\n      }\n    } else {\n      for (var _iterator2 = props[propName].props.children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var child = _ref2;\n\n        if (!child.props.value) {\n          return new Error('\\n            Missing required property \\'value\\' for \\'' + propFullName + '\\' supplied to \\'' + componentName + ' ' + props.name + '\\'.');\n        }\n      }\n    }\n  })]),\n  disabled: bool,\n  elementHeight: oneOfType([number, arrayOf(number)]),\n  floatingLabel: oneOfType([string, node]),\n  hintText: string,\n  hintTextAutocomplete: oneOfType([string, node]),\n  hoverColor: string,\n  infiniteLoadBeginEdgeOffset: number,\n  innerDivStyle: object,\n  keepSearchOnSelect: bool,\n  menuCloseButton: node,\n  menuFooterStyle: object,\n  menuGroupStyle: object,\n  menuStyle: object,\n  multiple: bool,\n  name: string,\n  nb2show: number,\n  noMatchFound: node,\n  noMatchFoundStyle: object,\n  onAutoCompleteTyping: func,\n  onChange: func,\n  onInfiniteLoad: func,\n  onMenuOpen: func,\n  onSelect: func,\n  openImmediately: bool,\n  popoverClassName: string,\n  popoverWidth: number,\n  resetButton: node,\n  selectAllButton: node,\n  selectedMenuItemStyle: object,\n  selectionsRenderer: func,\n  showAutocompleteThreshold: oneOfType([number, oneOf(['always', 'never'])]),\n  style: object,\n  unCheckedIcon: node,\n  underlineFocusStyle: object,\n  underlineStyle: object,\n  value: function value(props, propName, componentName, location, propFullName) {\n    var multiple = props.multiple,\n        value = props.value;\n\n    if (multiple) {\n      if (!Array.isArray(value)) {\n        return new Error('\\n          When using \\'multiple\\' mode, \\'value\\' of \\'' + componentName + ' ' + props.name + '\\' must be an array.');\n      } else {\n        var index = checkFormat(value);\n\n        if (index !== -1) {\n          return new Error('\\n            \\'value[' + index + ']\\' of \\'' + componentName + ' ' + props.name + '\\' must include a \\'value\\' property.');\n        }\n      }\n    } else if (value !== null && ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || !('value' in value))) {\n      return new Error('\\n        \\'value\\' of \\'' + componentName + ' ' + props.name + '\\' must include a \\'value\\' property.');\n    }\n  },\n  withResetSelectAllButtons: bool\n};","map":null,"metadata":{},"sourceType":"module"}