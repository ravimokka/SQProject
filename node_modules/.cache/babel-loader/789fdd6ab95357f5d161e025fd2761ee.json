{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar traceIs = require('../../registry').traceIs;\n\nvar autoType = require('./axis_autotype');\n/*\n *  data: the plot data to use in choosing auto type\n *  name: axis object name (ie 'xaxis') if one should be stored\n */\n\n\nmodule.exports = function handleTypeDefaults(containerIn, containerOut, coerce, options) {\n  var axType = coerce('type', (options.splomStash || {}).type);\n\n  if (axType === '-') {\n    setAutoType(containerOut, options.data);\n\n    if (containerOut.type === '-') {\n      containerOut.type = 'linear';\n    } else {\n      // copy autoType back to input axis\n      // note that if this object didn't exist\n      // in the input layout, we have to put it in\n      // this happens in the main supplyDefaults function\n      containerIn.type = containerOut.type;\n    }\n  }\n};\n\nfunction setAutoType(ax, data) {\n  // new logic: let people specify any type they want,\n  // only autotype if type is '-'\n  if (ax.type !== '-') return;\n  var id = ax._id;\n  var axLetter = id.charAt(0); // support 3d\n\n  if (id.indexOf('scene') !== -1) id = axLetter;\n  var d0 = getFirstNonEmptyTrace(data, id, axLetter);\n  if (!d0) return; // first check for histograms, as the count direction\n  // should always default to a linear axis\n\n  if (d0.type === 'histogram' && axLetter === {\n    v: 'y',\n    h: 'x'\n  }[d0.orientation || 'v']) {\n    ax.type = 'linear';\n    return;\n  }\n\n  var calAttr = axLetter + 'calendar';\n  var calendar = d0[calAttr];\n  var opts = {\n    noMultiCategory: !traceIs(d0, 'cartesian') || traceIs(d0, 'noMultiCategory')\n  };\n  var i; // check all boxes on this x axis to see\n  // if they're dates, numbers, or categories\n\n  if (isBoxWithoutPositionCoords(d0, axLetter)) {\n    var posLetter = getBoxPosLetter(d0);\n    var boxPositions = [];\n\n    for (i = 0; i < data.length; i++) {\n      var trace = data[i];\n      if (!traceIs(trace, 'box-violin') || (trace[axLetter + 'axis'] || axLetter) !== id) continue;\n      if (trace[posLetter] !== undefined) boxPositions.push(trace[posLetter][0]);else if (trace.name !== undefined) boxPositions.push(trace.name);else boxPositions.push('text');\n      if (trace[calAttr] !== calendar) calendar = undefined;\n    }\n\n    ax.type = autoType(boxPositions, calendar, opts);\n  } else if (d0.type === 'splom') {\n    var dimensions = d0.dimensions;\n    var dim = dimensions[d0._axesDim[id]];\n    if (dim.visible) ax.type = autoType(dim.values, calendar, opts);\n  } else {\n    ax.type = autoType(d0[axLetter] || [d0[axLetter + '0']], calendar, opts);\n  }\n}\n\nfunction getFirstNonEmptyTrace(data, id, axLetter) {\n  for (var i = 0; i < data.length; i++) {\n    var trace = data[i];\n\n    if (trace.type === 'splom' && trace._length > 0 && (trace['_' + axLetter + 'axes'] || {})[id]) {\n      return trace;\n    }\n\n    if ((trace[axLetter + 'axis'] || axLetter) === id) {\n      if (isBoxWithoutPositionCoords(trace, axLetter)) {\n        return trace;\n      } else if ((trace[axLetter] || []).length || trace[axLetter + '0']) {\n        return trace;\n      }\n    }\n  }\n}\n\nfunction getBoxPosLetter(trace) {\n  return {\n    v: 'x',\n    h: 'y'\n  }[trace.orientation || 'v'];\n}\n\nfunction isBoxWithoutPositionCoords(trace, axLetter) {\n  var posLetter = getBoxPosLetter(trace);\n  var isBox = traceIs(trace, 'box-violin');\n  var isCandlestick = traceIs(trace._fullInput || {}, 'candlestick');\n  return isBox && !isCandlestick && axLetter === posLetter && trace[posLetter] === undefined && trace[posLetter + '0'] === undefined;\n}","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/cartesian/type_defaults.js"],"names":["traceIs","require","autoType","module","exports","handleTypeDefaults","containerIn","containerOut","coerce","options","axType","splomStash","type","setAutoType","data","ax","id","_id","axLetter","charAt","indexOf","d0","getFirstNonEmptyTrace","v","h","orientation","calAttr","calendar","opts","noMultiCategory","i","isBoxWithoutPositionCoords","posLetter","getBoxPosLetter","boxPositions","length","trace","undefined","push","name","dimensions","dim","_axesDim","visible","values","_length","isBox","isCandlestick","_fullInput"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar traceIs = require('../../registry').traceIs;\nvar autoType = require('./axis_autotype');\n\n/*\n *  data: the plot data to use in choosing auto type\n *  name: axis object name (ie 'xaxis') if one should be stored\n */\nmodule.exports = function handleTypeDefaults(containerIn, containerOut, coerce, options) {\n    var axType = coerce('type', (options.splomStash || {}).type);\n\n    if(axType === '-') {\n        setAutoType(containerOut, options.data);\n\n        if(containerOut.type === '-') {\n            containerOut.type = 'linear';\n        } else {\n            // copy autoType back to input axis\n            // note that if this object didn't exist\n            // in the input layout, we have to put it in\n            // this happens in the main supplyDefaults function\n            containerIn.type = containerOut.type;\n        }\n    }\n};\n\nfunction setAutoType(ax, data) {\n    // new logic: let people specify any type they want,\n    // only autotype if type is '-'\n    if(ax.type !== '-') return;\n\n    var id = ax._id;\n    var axLetter = id.charAt(0);\n\n    // support 3d\n    if(id.indexOf('scene') !== -1) id = axLetter;\n\n    var d0 = getFirstNonEmptyTrace(data, id, axLetter);\n    if(!d0) return;\n\n    // first check for histograms, as the count direction\n    // should always default to a linear axis\n    if(d0.type === 'histogram' &&\n            axLetter === {v: 'y', h: 'x'}[d0.orientation || 'v']) {\n        ax.type = 'linear';\n        return;\n    }\n\n    var calAttr = axLetter + 'calendar';\n    var calendar = d0[calAttr];\n    var opts = {noMultiCategory: !traceIs(d0, 'cartesian') || traceIs(d0, 'noMultiCategory')};\n    var i;\n\n    // check all boxes on this x axis to see\n    // if they're dates, numbers, or categories\n    if(isBoxWithoutPositionCoords(d0, axLetter)) {\n        var posLetter = getBoxPosLetter(d0);\n        var boxPositions = [];\n\n        for(i = 0; i < data.length; i++) {\n            var trace = data[i];\n            if(!traceIs(trace, 'box-violin') || (trace[axLetter + 'axis'] || axLetter) !== id) continue;\n\n            if(trace[posLetter] !== undefined) boxPositions.push(trace[posLetter][0]);\n            else if(trace.name !== undefined) boxPositions.push(trace.name);\n            else boxPositions.push('text');\n\n            if(trace[calAttr] !== calendar) calendar = undefined;\n        }\n\n        ax.type = autoType(boxPositions, calendar, opts);\n    } else if(d0.type === 'splom') {\n        var dimensions = d0.dimensions;\n        var dim = dimensions[d0._axesDim[id]];\n        if(dim.visible) ax.type = autoType(dim.values, calendar, opts);\n    } else {\n        ax.type = autoType(d0[axLetter] || [d0[axLetter + '0']], calendar, opts);\n    }\n}\n\nfunction getFirstNonEmptyTrace(data, id, axLetter) {\n    for(var i = 0; i < data.length; i++) {\n        var trace = data[i];\n\n        if(trace.type === 'splom' &&\n                trace._length > 0 &&\n                (trace['_' + axLetter + 'axes'] || {})[id]\n        ) {\n            return trace;\n        }\n\n        if((trace[axLetter + 'axis'] || axLetter) === id) {\n            if(isBoxWithoutPositionCoords(trace, axLetter)) {\n                return trace;\n            } else if((trace[axLetter] || []).length || trace[axLetter + '0']) {\n                return trace;\n            }\n        }\n    }\n}\n\nfunction getBoxPosLetter(trace) {\n    return {v: 'x', h: 'y'}[trace.orientation || 'v'];\n}\n\nfunction isBoxWithoutPositionCoords(trace, axLetter) {\n    var posLetter = getBoxPosLetter(trace);\n    var isBox = traceIs(trace, 'box-violin');\n    var isCandlestick = traceIs(trace._fullInput || {}, 'candlestick');\n\n    return (\n        isBox &&\n        !isCandlestick &&\n        axLetter === posLetter &&\n        trace[posLetter] === undefined &&\n        trace[posLetter + '0'] === undefined\n    );\n}\n"]},"metadata":{},"sourceType":"script"}