{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isArrayOrTypedArray = require('./array').isArrayOrTypedArray;\n\nvar isPlainObject = require('./is_plain_object');\n/**\n * Relink private _keys and keys with a function value from one container\n * to the new container.\n * Relink means copying if object is pass-by-value and adding a reference\n * if object is pass-by-ref.\n * This prevents deepCopying massive structures like a webgl context.\n */\n\n\nmodule.exports = function relinkPrivateKeys(toContainer, fromContainer) {\n  for (var k in fromContainer) {\n    var fromVal = fromContainer[k];\n    var toVal = toContainer[k];\n\n    if (toVal === fromVal) {\n      continue;\n    }\n\n    if (k.charAt(0) === '_' || typeof fromVal === 'function') {\n      // if it already exists at this point, it's something\n      // that we recreate each time around, so ignore it\n      if (k in toContainer) continue;\n      toContainer[k] = fromVal;\n    } else if (isArrayOrTypedArray(fromVal) && isArrayOrTypedArray(toVal) && isPlainObject(fromVal[0])) {\n      // filter out data_array items that can contain user objects\n      // most of the time the toVal === fromVal check will catch these early\n      // but if the user makes new ones we also don't want to recurse in.\n      if (k === 'customdata' || k === 'ids') continue; // recurse into arrays containers\n\n      var minLen = Math.min(fromVal.length, toVal.length);\n\n      for (var j = 0; j < minLen; j++) {\n        if (toVal[j] !== fromVal[j] && isPlainObject(fromVal[j]) && isPlainObject(toVal[j])) {\n          relinkPrivateKeys(toVal[j], fromVal[j]);\n        }\n      }\n    } else if (isPlainObject(fromVal) && isPlainObject(toVal)) {\n      // recurse into objects, but only if they still exist\n      relinkPrivateKeys(toVal, fromVal);\n      if (!Object.keys(toVal).length) delete toContainer[k];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}