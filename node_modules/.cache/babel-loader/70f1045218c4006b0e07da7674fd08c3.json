{"ast":null,"code":"import * as CustomizeUtils from '../utils/CustomizeUtils';\nvar DEFAULT_SANKEY_SHAPE = 'sankey';\n\nfunction interpolationGenerator(a, b) {\n  var ka = +a;\n  var kb = b - ka;\n  return function (t) {\n    return ka + kb * t;\n  };\n}\n\nfunction getCurvePath(from, to, curvature) {\n  var interpolationFunc = interpolationGenerator(from.x, to.x);\n  var fromCtrlX = interpolationFunc(curvature);\n  var toCtrlX = interpolationFunc(1 - curvature);\n  var points = ['C', fromCtrlX, from.y, toCtrlX, to.y, to.x, to.y];\n  return points;\n}\n\nfunction getEdgePath(points, curvature) {\n  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y]];\n  var c1 = getCurvePath(points[1], points[3], curvature);\n  path.push(c1);\n  path.push(['L', points[3].x, points[3].y]);\n  path.push(['L', points[2].x, points[2].y]);\n  var c2 = getCurvePath(points[2], points[0], curvature);\n  path.push(c2);\n  path.push(['Z']);\n  return path;\n}\n\nexport var registerShape = function () {\n  CustomizeUtils.registerShape('edge', DEFAULT_SANKEY_SHAPE, {\n    drawShape: function (cfg, group) {\n      var points = cfg.points,\n          style = cfg.style;\n      var curvature = style.curvature || 0.5;\n      var path = this.parsePath(getEdgePath(points, curvature));\n      var shape = group.addShape('path', {\n        attrs: {\n          stroke: 'none',\n          strokeOpacity: 0,\n          fill: cfg.color,\n          opacity: cfg.opacity,\n          path: path\n        }\n      });\n      return shape;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}