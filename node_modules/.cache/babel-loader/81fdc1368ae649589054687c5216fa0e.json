{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Management/FinancialCharts/VerticalChart.js\";\nimport { Chart, Tooltip, Axis, Legend, Pie, Coord, Line, Bar, Point } from 'viser-react';\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress, Form, Modal, Table } from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport { CSVLink } from \"react-csv\";\n\nconst DataSet = require('@antv/data-set');\n\nconst vertical_scale = [{\n  dataKey: 'value',\n  min: 0,\n  formatter: function formatter(val) {\n    if (val < 100000) {\n      return Math.round(val / 1000 * 10) / 10 + 'k';\n    } else if (val >= 1000000) {\n      return val = val / 1000000 + \"M\";\n    } else {\n      return val;\n    }\n  }\n}, {\n  dataKey: 'year',\n  min: 0,\n  max: 1\n}];\n\nclass VerticalChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showModal = () => {\n      this.setState({\n        modalVisible: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        modalVisible: false\n      });\n    };\n\n    this.saveFormRef = formRef => {\n      this.formRef = formRef;\n    };\n\n    this.showDrawer = () => {\n      this.setState({\n        drawerVisible: true\n      });\n    };\n\n    this.onClose = () => {\n      this.setState({\n        drawerVisible: false\n      });\n    };\n\n    this.handleSubmitLineChart = e => {\n      this.setState({\n        value_xl: \"\"\n      });\n      this.setState({\n        value_xl: e.target.value\n      });\n    };\n\n    this.handleSubmitLineChart1 = e => {\n      this.setState({\n        value_yl: \"\"\n      });\n      this.setState({\n        value_yl: e.target.value\n      });\n    };\n\n    this.handleSubmitLineChartOK = e => {\n      e.preventDefault();\n      this.loadLineChartData({\n        A: this.state.value_xl,\n        B: this.state.value_yl\n      });\n    };\n\n    this.handleSubmitVerticalBarChart = e => {\n      e.preventDefault();\n      this.setState({\n        value_v_bar: e.target.value\n      });\n      this.VerticalBarCheckbox({\n        Column: e.target.value\n      });\n    };\n\n    this.state = {\n      line_chart_options: {\n        chart: {\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'straight'\n        },\n        title: {\n          text: '',\n          align: 'left'\n        },\n        grid: {\n          row: {\n            colors: ['#f3f3f3', 'transparent'],\n            // takes an array which will be repeated on columns\n            opacity: 0.5\n          }\n        },\n        xaxis: {\n          categories: [...months]\n        }\n      },\n      line_chart_series: [],\n      options2: {\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            dataLabels: {\n              position: 'top'\n            }\n          }\n        },\n        dataLabels: {\n          enabled: false,\n          offsetX: -6,\n          style: {\n            fontSize: '12px',\n            colors: ['#fff']\n          }\n        },\n        stroke: {\n          show: true,\n          width: 1,\n          colors: ['#fff']\n        },\n        xaxis: {\n          categories: [\"\"],\n          labels: {\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          }\n        },\n        yaxis: {\n          categories: [2001, 2002, 2003, 2004, 2005, 2006, 2007],\n          labels: {\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          }\n        }\n      },\n      series2: [],\n      bar_chart_options: {\n        plotOptions: {\n          bar: {\n            horizontal: true\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          categories: []\n        }\n      },\n      bar_chart_series: [],\n      mixed_chart_options: {\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          width: 4\n        },\n        title: {\n          text: '',\n          align: 'left',\n          offsetX: 110\n        },\n        xaxis: {\n          categories: [],\n          labels: {\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          }\n        },\n        yaxis: [{\n          axisTicks: {\n            show: true\n          },\n          axisBorder: {\n            show: true,\n            color: '#008FFB'\n          },\n          labels: {\n            style: {\n              color: '#008FFB'\n            },\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          },\n          title: {\n            text: \"\",\n            style: {\n              color: '#008FFB'\n            }\n          },\n          tooltip: {\n            enabled: true\n          }\n        }, {\n          seriesName: 'Income',\n          opposite: true,\n          axisTicks: {\n            show: true\n          },\n          axisBorder: {\n            show: true,\n            color: '#00E396'\n          },\n          labels: {\n            style: {\n              color: '#00E396'\n            },\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          },\n          title: {\n            text: \"\",\n            style: {\n              color: '#00E396'\n            }\n          }\n        }, {\n          seriesName: 'Revenue',\n          opposite: true,\n          axisTicks: {\n            show: true\n          },\n          axisBorder: {\n            show: true,\n            color: '#FEB019'\n          },\n          labels: {\n            style: {\n              color: '#FEB019'\n            },\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          },\n          title: {\n            text: \"\",\n            style: {\n              color: '#FEB019'\n            }\n          }\n        }],\n        tooltip: {\n          fixed: {\n            enabled: true,\n            position: 'topLeft',\n            // topRight, topLeft, bottomRight, bottomLeft\n            offsetY: 30,\n            offsetX: 60\n          }\n        },\n        legend: {\n          horizontalAlign: 'left',\n          offsetX: 40\n        }\n      },\n      mixed_chart_series: [{\n        name: 'Status',\n        type: 'column',\n        data: [10]\n      }, {\n        name: 'A',\n        type: 'column',\n        data: [20]\n      }, {\n        name: 'B',\n        type: 'column',\n        data: [30]\n      }, {\n        name: 'C',\n        type: 'column',\n        data: [150]\n      }, {\n        name: 'LINE',\n        type: 'line',\n        data: [40, 20]\n      }],\n      area_chart_options: {\n        chart: {\n          stacked: true\n        },\n        colors: ['#008FFB', '#00E396', '#CED4DC'],\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true\n        },\n        xaxis: {\n          categories: ['']\n        },\n        yaxis: {\n          labels: {\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else if (val >= 10000000) {\n                return val = val / 10000000 + \"10M\";\n              } else if (val >= 10000000) {\n                return val = val / 10000000 + \"100M\";\n              } else if (val >= 1000000000) {\n                return val = val / 1000000000 + \"1B\";\n              } else {\n                return val;\n              }\n            }\n          }\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            opacityFrom: 0.6,\n            opacityTo: 0.8\n          }\n        },\n        legend: {\n          position: 'bottom',\n          horizontalAlign: 'left'\n        }\n      },\n      area_chart_series: [{\n        name: 'series1',\n        data: [31, 40]\n      }, {\n        name: 'series1',\n        data: [35, 19]\n      }],\n      books: [],\n      intHeader: [],\n      filter: [],\n      select_status: \"Status\",\n      select_amount_USD: \"Amount_USD\",\n      chart_data: [],\n      donut_data: [],\n      pie_data: [],\n      bar_data: [],\n      ve_bar_data: [],\n      line_data: [{\n        name: \"\",\n        'A': 1,\n        'B': 12\n      }],\n      field_list: [\"A\", \"B\"],\n      chartData: [],\n      sourceData: [],\n      line_chart_source_data: [{\n        name: 'A',\n        value: 13000000\n      }],\n      sourceData_donut: [],\n      table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      load_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      load_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      line_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      line_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      bar_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      bar_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      vertical_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      vertical_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      Gbar_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      Gbar_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      donut_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      donut_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      pie_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      pie_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      mix_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      mix_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      area_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      area_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      value_xl: \"Status\",\n      value_yl: \"Amount_USD\",\n      download_lineChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }],\n      download_barChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }],\n      download_verticalChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }],\n      download_group_barChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }],\n      download_donutChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }],\n      download_pieChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }],\n      download_mixedChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }],\n      download_areaChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }]\n    };\n  }\n\n  // ============================= Loading all charts ====================================================================\n  componentWillMount() {\n    this.loadAnalytical();\n    this.loadIntHeaders();\n    this.loadAll_count_view();\n    this.loadAllChartData({\n      A: \"Status\",\n      B: \"Amount_USD\"\n    });\n    this.loadMixedChartData({\n      A: \"Status\",\n      B: \"Amount_USD\",\n      C: \"Status\"\n    });\n  }\n\n  async loadAnalytical() {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/sqd_api\", {\n      firstName: 'Mokka Ravi',\n      lastName: 'Flintstone'\n    });\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({\n        books: data\n      });\n    }\n  }\n\n  async loadIntHeaders() {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/intHeader\", {\n      firstName: 'Mokka Ravi',\n      lastName: 'Flintstone'\n    });\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({\n        intHeader: data\n      });\n      const d = [{\n        'name': 'Actual',\n        'data': []\n      }, {\n        'name': 'Budget',\n        'data': []\n      }];\n      const dou = [1, 3, 4];\n      this.setState({\n        donut_data: dou\n      });\n      this.setState({\n        chart_data: d\n      });\n      console.log(this.state.chart_data);\n    }\n  }\n\n  async loadAll_count_view() {\n    this.setState({\n      table_columns: []\n    });\n    this.setState({\n      table_data: []\n    });\n    this.setState({\n      download_barChart_table: []\n    });\n    this.setState({\n      download_verticalChart_table: []\n    });\n    this.setState({\n      download_donutChart_table: []\n    });\n    this.setState({\n      download_pieChart_table: []\n    });\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/load_count_api\");\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      var table_dict = data;\n      var i;\n      var keys_list = [];\n      var bar_value_list = [];\n      var load_chart_list = [];\n      var load_donut_chart_list = [];\n      var ct_list1 = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {};\n\n      for (i = 0; i < Object.keys(data).length; i++) {\n        console.log(data[i]);\n        var key = Object.keys(data)[i];\n        keys_list.push(key);\n\n        if (key != \"label\") {\n          ct_list1.push(key);\n        } else {}\n\n        var value = data[key];\n\n        if (this.state.value_bar != value) {\n          bar_value_list.push(value);\n        } else {}\n\n        var data_dict = {};\n        var load_data_dict = {};\n\n        if (key != \"label\") {\n          data_dict['name'] = key;\n          load_data_dict['item'] = key;\n          data_dict['value'] = value;\n          load_data_dict['count'] = value;\n          load_chart_list.push(data_dict);\n          load_donut_chart_list.push(load_data_dict);\n          var column_dict = {};\n          column_dict['title'] = key;\n          column_dict['dataIndex'] = key;\n          column_dict['key'] = key;\n          table_data_dict[key] = value;\n          table_column_list.push(column_dict);\n        } else {}\n      }\n\n      table_data_list.push(table_data_dict);\n      this.setState({\n        bar_data: load_chart_list\n      });\n      this.setState({\n        ve_bar_data: load_chart_list\n      });\n      this.setState({\n        sourceData: load_donut_chart_list\n      });\n      this.setState({\n        sourceData_donut: load_donut_chart_list\n      });\n      this.setState({\n        bar_table_columns: table_column_list\n      });\n      this.setState({\n        bar_table_data: table_data_list\n      });\n      this.setState({\n        vertical_table_columns: table_column_list\n      });\n      this.setState({\n        vertical_table_data: table_data_list\n      });\n      this.setState({\n        donut_table_columns: table_column_list\n      });\n      this.setState({\n        donut_table_data: table_data_list\n      });\n      this.setState({\n        pie_table_columns: table_column_list\n      });\n      this.setState({\n        pie_table_data: table_data_list\n      });\n      this.setState({\n        download_barChart_table: [table_dict]\n      });\n      this.setState({\n        download_verticalChart_table: [table_dict]\n      });\n      this.setState({\n        download_donutChart_table: [table_dict]\n      });\n      this.setState({\n        download_pieChart_table: [table_dict]\n      });\n    }\n  }\n\n  async loadAllChartData(data) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    };\n    this.setState({\n      load_table_columns: []\n    });\n    this.setState({\n      load_table_data: []\n    });\n    this.setState({\n      line_data: []\n    });\n    this.setState({\n      field_list: []\n    });\n    this.setState({\n      line_chart_source_data: []\n    });\n    this.setState({\n      chart_data: []\n    });\n    this.setState({\n      area_chart_series: []\n    });\n    this.setState({\n      download_lineChart_table: []\n    });\n    this.setState({\n      download_group_barChart_table: []\n    });\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/data\", options);\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      var l_data = [data];\n      var table_dict = [data];\n      this.setState(data);\n      var i;\n      var keys_list = [];\n      var line_value_list = [];\n      var line_chart_list = [];\n      var load_bar_chart_list = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {};\n      var area_list = [];\n      var area_chart_data = [];\n\n      for (i = 0; i < Object.keys(data).length; i++) {\n        console.log(data[i]);\n        var key = Object.keys(data)[i];\n        keys_list.push(key);\n        var value = data[key];\n        line_value_list.push(value);\n        var data_dict = {};\n        data_dict['name'] = key;\n        data_dict['value'] = value;\n        line_chart_list.push(data_dict);\n        var load_data_dict = {};\n        load_data_dict['name'] = key;\n        load_data_dict['data'] = [value];\n        load_bar_chart_list.push(load_data_dict);\n        var column_dict = {};\n        column_dict['title'] = key;\n        column_dict['dataIndex'] = key;\n        column_dict['key'] = key;\n        table_data_dict[key] = value;\n        table_column_list.push(column_dict);\n        var area_dict = {};\n        area_list.push(value);\n        area_dict['name'] = key;\n        area_dict['data'] = area_list;\n        area_chart_data.push(area_dict);\n      }\n\n      table_data_list.push(table_data_dict);\n      this.setState({\n        line_chart_source_data: line_chart_list\n      });\n      this.setState({\n        field_list: keys_list\n      });\n      this.setState({\n        chart_data: load_bar_chart_list\n      });\n      this.setState({\n        area_chart_series: area_chart_data\n      });\n      this.setState({\n        line_table_columns: table_column_list\n      });\n      this.setState({\n        line_table_data: table_data_list\n      });\n      this.setState({\n        Gbar_table_columns: table_column_list\n      });\n      this.setState({\n        Gbar_table_data: table_data_list\n      });\n      this.setState({\n        mix_table_columns: table_column_list\n      });\n      this.setState({\n        mix_table_data: table_data_list\n      });\n      this.setState({\n        area_table_columns: table_column_list\n      });\n      this.setState({\n        area_table_data: table_data_list\n      });\n      this.setState({\n        download_lineChart_table: table_dict\n      });\n      this.setState({\n        download_group_barChart_table: table_dict\n      });\n      this.setState({\n        download_areaChart_table: table_dict\n      });\n    }\n  }\n\n  async loadMixedChartData(data) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    };\n    this.setState({\n      mixed_chart_series: []\n    });\n    this.setState({\n      mix_table_columns: []\n    });\n    this.setState({\n      mix_table_data: []\n    });\n    this.setState({\n      download_mixedChart_table: []\n    });\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/dataView_api\", options);\n    const status = promise.status;\n\n    if (status === 200) {\n      const sum_data = promise.data.data[\"sum_data\"];\n      const count_data = promise.data.data[\"count_data\"];\n      var table_dict = sum_data;\n      this.setState(data);\n      var i;\n      var keys_list = [];\n      var value_list = [];\n      var max_chart_list = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {};\n\n      for (i = 0; i < Object.keys(sum_data).length; i++) {\n        console.log(data[i]);\n        var key = Object.keys(sum_data)[i]; //            keys_list.push(key)\n\n        var value = sum_data[key];\n        value_list.push(value);\n        var data_dict = {};\n        data_dict['name'] = key;\n        data_dict['type'] = 'column';\n        data_dict['data'] = [value];\n        max_chart_list.push(data_dict);\n        var column_dict = {};\n        column_dict['title'] = key;\n        column_dict['dataIndex'] = key;\n        column_dict['key'] = key;\n        table_data_dict[key] = value;\n        table_column_list.push(column_dict);\n      }\n\n      table_data_list.push(table_data_dict);\n      var j;\n      var c_keys_list = [];\n      var c_value_list = [];\n      var max_chart_count_list = {};\n\n      for (j = 0; j < Object.keys(count_data).length; j++) {\n        console.log(data[j]);\n        var key = Object.keys(sum_data)[j]; //            keys_list.push(key)\n\n        var value = sum_data[key];\n        c_value_list.push(value);\n        var data_dict = {};\n        max_chart_count_list['name'] = count_data[\"label\"];\n        max_chart_count_list['type'] = 'line';\n        max_chart_count_list['data'] = c_value_list;\n      }\n\n      max_chart_list.push(max_chart_count_list);\n      const g_data = [this.state.Actual, this.state.Budget];\n      this.setState({\n        g: g_data\n      });\n      this.setState({\n        mixed_chart_series: max_chart_list\n      });\n      this.setState({\n        mix_table_columns: table_column_list\n      });\n      this.setState({\n        mix_table_data: table_data_list\n      });\n      this.setState({\n        download_mixedChart_table: [table_dict]\n      });\n    }\n  } // =================================================== Line Chart ======================================================\n\n\n  async loadLineChartData(data) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    };\n    this.setState({\n      line_data: []\n    });\n    this.setState({\n      field_list: []\n    });\n    this.setState({\n      line_chart_source_data: []\n    });\n    this.setState({\n      line_table_columns: []\n    });\n    this.setState({\n      line_table_data: []\n    });\n    this.setState({\n      download_lineChart_table: []\n    });\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/data\", options);\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      const table_dict = data;\n      var l_data = [data];\n      this.setState(data);\n      var i;\n      var keys_list = [];\n      var line_value_list = [];\n      var line_chart_list = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {};\n\n      for (i = 0; i < Object.keys(data).length; i++) {\n        console.log(data[i]);\n        var key = Object.keys(data)[i];\n        keys_list.push(key);\n        var value = data[key];\n        line_value_list.push(value);\n        var data_dict = {};\n        data_dict['name'] = key;\n        data_dict['value'] = value;\n        line_chart_list.push(data_dict);\n        var column_dict = {};\n        column_dict['title'] = key;\n        column_dict['dataIndex'] = key;\n        column_dict['key'] = key;\n        table_data_dict[key] = value;\n        table_column_list.push(column_dict);\n      }\n\n      table_data_list.push(table_data_dict);\n      this.setState({\n        download_lineChart_table: [table_dict]\n      });\n      this.setState({\n        line_chart_source_data: line_chart_list\n      });\n      this.setState({\n        field_list: keys_list\n      });\n      this.setState({\n        line_table_columns: table_column_list\n      });\n      this.setState({\n        line_table_data: table_data_list\n      });\n    }\n  } //========================================== Vertical bar Chart ================================================================\n\n\n  async VerticalBarCheckbox(data) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    };\n    this.setState({\n      ve_bar_data: []\n    });\n    this.setState({\n      vertical_table_columns: []\n    });\n    this.setState({\n      vertical_table_data: []\n    });\n    this.setState({\n      download_verticalChart_table: []\n    });\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/count_api\", options);\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      var table_dict = data;\n      this.setState(data);\n      console.log(data);\n      var i;\n      var keys_list = [];\n      var bar_value_list = [];\n      var Ve_Bar_chart_list = [];\n      var ct_list1 = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {};\n\n      for (i = 0; i < Object.keys(data).length; i++) {\n        console.log(data[i]);\n        var key = Object.keys(data)[i];\n        keys_list.push(key);\n\n        if (key != \"label\") {\n          ct_list1.push(key);\n        } else {}\n\n        var value = data[key];\n\n        if (this.state.value_bar != value) {\n          bar_value_list.push(value);\n        } else {}\n\n        var data_dict = {};\n\n        if (key != \"label\") {\n          data_dict['name'] = key;\n          data_dict['value'] = value;\n          Ve_Bar_chart_list.push(data_dict);\n          var column_dict = {};\n          column_dict['title'] = key;\n          column_dict['dataIndex'] = key;\n          column_dict['key'] = key;\n          table_data_dict[key] = value;\n          table_column_list.push(column_dict);\n        } else {}\n      }\n\n      table_data_list.push(table_data_dict);\n      this.setState({\n        ve_bar_data: Ve_Bar_chart_list\n      });\n      this.setState({\n        vertical_table_columns: table_column_list\n      });\n      this.setState({\n        vertical_table_data: table_data_list\n      });\n      this.setState({\n        download_verticalChart_table: [table_dict]\n      });\n    }\n  }\n\n  render() {\n    const dv = new DataSet.View().source(this.state.sourceData);\n    dv.transform({\n      type: 'percent',\n      field: 'count',\n      dimension: 'item',\n      as: 'percent',\n      align: 'left'\n    });\n    const pie_data = dv.rows;\n    const dv1 = new DataSet.View().source(this.state.sourceData_donut);\n    dv1.transform({\n      type: 'percent',\n      field: 'count',\n      dimension: 'item',\n      as: 'percent'\n    });\n    const don_data = dv1.rows;\n    const dv12 = new DataSet.View().source(this.state.line_data);\n    dv12.transform({\n      type: \"fold\",\n      fields: this.state.field_list,\n      key: \"keySelect\",\n      value: \"average\"\n    });\n    const data1233 = dv12.rows;\n    const bar_dv = new DataSet.View().source(this.state.bar_data);\n    bar_dv.transform({\n      type: 'sort',\n\n      callback(a, b) {\n        return a.value - b.value > 0;\n      }\n\n    });\n    const basic_bar_data = bar_dv.rows;\n    const line_chart_source_scale = [{\n      dataKey: 'value',\n      min: 0,\n      formatter: function formatter(val) {\n        if (val < 100000) {\n          return Math.round(val / 1000 * 10) / 10 + 'k';\n        } else if (val >= 1000000) {\n          return val = val / 1000000 + \"M\";\n        } else {\n          return val;\n        }\n      }\n    }, {\n      dataKey: 'year',\n      min: 0,\n      max: 1\n    }];\n    const ve_bar_dv = new DataSet.View().source(this.state.ve_bar_data);\n    ve_bar_dv.transform({\n      type: 'sort',\n\n      callback(a, b) {\n        return a.value - b.value > 0;\n      }\n\n    });\n    const vertical_bar_data = ve_bar_dv.rows;\n    return React.createElement(\"div\", {\n      id: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      class: \"custom-select\",\n      value: this.state.value_v_bar,\n      onChange: this.handleSubmitVerticalBarChart,\n      style: {\n        width: \"110px\",\n        marginLeft: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108\n      },\n      __self: this\n    }, this.state.select_status), this.state.books.map((value, index) => {\n      return React.createElement(\"option\", {\n        class: \"btn btn-custom btn-block btn-detail\",\n        style: {\n          cursor: \"pointer;\",\n          fontSize: \"14px\"\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1110\n        },\n        __self: this\n      }, \" \", value, \" \");\n    })), React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      \"data-toggle\": \"modal\",\n      \"data-target\": \"#myModal_Vertical\",\n      style: {\n        marginLeft: \"3px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114\n      },\n      __self: this\n    }, \"Table View\"), React.createElement(\"div\", {\n      class: \"modal fade\",\n      id: \"myModal_Vertical\",\n      role: \"dialog\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"modal-dialog\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"modal-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      class: \"modal-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121\n      },\n      __self: this\n    }, \"Vertical Bar Chart Table Data\")), React.createElement(\"div\", {\n      class: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: this.state.vertical_table_columns,\n      dataSource: this.state.vertical_table_data,\n      style: {\n        overflowY: \"scroll\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"modal-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-info\",\n      \"data-dismiss\": \"modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128\n      },\n      __self: this\n    }, \"Close\"), React.createElement(CSVLink, {\n      data: this.state.download_verticalChart_table,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130\n      },\n      __self: this\n    }, \" Download \")), \";\")))), React.createElement(Chart, {\n      forceFit: true,\n      height: 400,\n      data: vertical_bar_data,\n      scale: vertical_scale,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139\n      },\n      __self: this\n    }), React.createElement(Axis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140\n      },\n      __self: this\n    }), React.createElement(Bar, {\n      position: \"name*value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default VerticalChart;","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Management/FinancialCharts/VerticalChart.js"],"names":["Chart","Tooltip","Axis","Legend","Pie","Coord","Line","Bar","Point","React","Row","Col","Card","Button","Icon","Progress","Form","Modal","Table","axios","ReactApexChart","$","Popper","CSVLink","DataSet","require","vertical_scale","dataKey","min","formatter","val","Math","round","max","VerticalChart","Component","constructor","props","showModal","setState","modalVisible","handleCancel","saveFormRef","formRef","showDrawer","drawerVisible","onClose","handleSubmitLineChart","e","value_xl","target","value","handleSubmitLineChart1","value_yl","handleSubmitLineChartOK","preventDefault","loadLineChartData","A","state","B","handleSubmitVerticalBarChart","value_v_bar","VerticalBarCheckbox","Column","line_chart_options","chart","zoom","enabled","dataLabels","stroke","curve","title","text","align","grid","row","colors","opacity","xaxis","categories","months","line_chart_series","options2","plotOptions","bar","horizontal","position","offsetX","style","fontSize","show","width","labels","yaxis","series2","bar_chart_options","bar_chart_series","mixed_chart_options","axisTicks","axisBorder","color","tooltip","seriesName","opposite","fixed","offsetY","legend","horizontalAlign","mixed_chart_series","name","type","data","area_chart_options","stacked","fill","gradient","opacityFrom","opacityTo","area_chart_series","books","intHeader","filter","select_status","select_amount_USD","chart_data","donut_data","pie_data","bar_data","ve_bar_data","line_data","field_list","chartData","sourceData","line_chart_source_data","sourceData_donut","table_columns","dataIndex","key","table_data","oNumber","load_table_columns","load_table_data","line_table_columns","line_table_data","bar_table_columns","bar_table_data","vertical_table_columns","vertical_table_data","Gbar_table_columns","Gbar_table_data","donut_table_columns","donut_table_data","pie_table_columns","pie_table_data","mix_table_columns","mix_table_data","area_table_columns","area_table_data","download_lineChart_table","firstname","lastname","email","download_barChart_table","download_verticalChart_table","download_group_barChart_table","download_donutChart_table","download_pieChart_table","download_mixedChart_table","download_areaChart_table","componentWillMount","loadAnalytical","loadIntHeaders","loadAll_count_view","loadAllChartData","loadMixedChartData","C","promise","post","firstName","lastName","status","console","log","d","dou","table_dict","i","keys_list","bar_value_list","load_chart_list","load_donut_chart_list","ct_list1","table_column_list","table_data_list","table_data_dict","Object","keys","length","push","value_bar","data_dict","load_data_dict","column_dict","headers","Headers","append","options","method","body","JSON","stringify","l_data","line_value_list","line_chart_list","load_bar_chart_list","area_list","area_chart_data","area_dict","sum_data","count_data","value_list","max_chart_list","j","c_keys_list","c_value_list","max_chart_count_list","g_data","Actual","Budget","g","Ve_Bar_chart_list","render","dv","View","source","transform","field","dimension","as","rows","dv1","don_data","dv12","fields","data1233","bar_dv","callback","a","b","basic_bar_data","line_chart_source_scale","ve_bar_dv","vertical_bar_data","marginLeft","map","index","cursor","overflowY"],"mappings":"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","sourcesContent":["import { Chart, Tooltip, Axis, Legend, Pie, Coord, Line, Bar, Point} from 'viser-react';\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress, Form , Modal, Table} from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport { CSVLink } from \"react-csv\";\n\nconst DataSet = require('@antv/data-set');\n\nconst vertical_scale = [{\n  dataKey: 'value',\n  min: 0,\n  formatter: function formatter(val) {\n             if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n\n                         else {\n                                    return val;\n                                }\n        }\n},{\n  dataKey: 'year',\n  min: 0,\n  max: 1,\n}];\n\nclass VerticalChart extends React.Component {\n\n constructor(props) {\n    super(props);\n   this.state = {\n\n\nline_chart_options: {\n            chart: {\n                  zoom: {\n                      enabled: false\n                  }\n              },\n              dataLabels: {\n                  enabled: false\n              },\n              stroke: {\n                  curve: 'straight'\n              },\n              title: {\n                  text: '',\n                  align: 'left'\n              },\n              grid: {\n                  row: {\n                      colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                      opacity: 0.5\n                  },\n              },\n              xaxis: {\n                  categories: [...months],\n              }\n          },\n          line_chart_series:[],\n\n\n\n\noptions2: {\n            plotOptions: {\n              bar: {\n                horizontal: true,\n                dataLabels: {\n                  position: 'top',\n                },\n              }\n            },\n            dataLabels: {\n              enabled: false,\n              offsetX: -6,\n              style: {\n                fontSize: '12px',\n                colors: ['#fff']\n              }\n            },\n            stroke: {\n              show: true,\n              width: 1,\n              colors: ['#fff']\n            },\n\n            xaxis: {\n              categories: [\"\"],\n              labels: {\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                }\n            },\n            yaxis: {\n              categories: [2001, 2002, 2003, 2004, 2005, 2006, 2007],\n              labels: {\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                }\n            }\n          },\n\n      series2:[],\n\n\nbar_chart_options: {\n            plotOptions: {\n              bar: {\n                horizontal: true,\n              }\n            },\n            dataLabels: {\n              enabled: false,\n\n            },\n\n\n            xaxis: {\n              categories: [],\n            }\n          },\nbar_chart_series: [],\n\n\n\n\n\nmixed_chart_options:  {\n            dataLabels: {\n              enabled: false\n            },\n\n            stroke: {\n              width:4\n            },\n            title: {\n              text: '',\n              align: 'left',\n              offsetX: 110\n            },\n            xaxis: {\n              categories: [],\n\n              labels: {\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                }\n            },\n            yaxis: [\n              {\n                axisTicks: {\n                  show: true,\n                },\n                axisBorder: {\n                  show: true,\n                  color: '#008FFB'\n                },\n                 labels: {\n                   style: {\n                    color: '#008FFB',\n                  },\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                },\n                title: {\n                  text: \"\",\n                  style: {\n                    color: '#008FFB',\n                  }\n                },\n                tooltip: {\n                  enabled: true\n                }\n              },\n\n              {\n                seriesName: 'Income',\n                opposite: true,\n                axisTicks: {\n                  show: true,\n                },\n                axisBorder: {\n                  show: true,\n                  color: '#00E396'\n                },\n                   labels: {\n                   style: {\n                    color: '#00E396',\n                  },\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                },\n                title: {\n                  text: \"\",\n                  style: {\n                    color: '#00E396',\n                  }\n                },\n              },\n              {\n                seriesName: 'Revenue',\n                opposite: true,\n                axisTicks: {\n                  show: true,\n                },\n                axisBorder: {\n                  show: true,\n                  color: '#FEB019'\n                },\n                 labels: {\n                   style: {\n                    color: '#FEB019',\n\n                  },\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                },\n                title: {\n                  text: \"\",\n                  style: {\n                    color: '#FEB019',\n                  }\n                }\n              },\n            ],\n\n\n            tooltip: {\n              fixed: {\n                enabled: true,\n                position: 'topLeft', // topRight, topLeft, bottomRight, bottomLeft\n                offsetY: 30,\n                offsetX: 60\n              },\n            },\n            legend: {\n              horizontalAlign: 'left',\n              offsetX: 40\n            }\n          },\nmixed_chart_series: [{\nname: 'Status',\ntype: 'column',\ndata: [10]\n}, {\nname: 'A',\ntype: 'column',\ndata: [20]\n},\n\n{\nname: 'B',\ntype: 'column',\ndata: [30]\n},\n{\nname: 'C',\ntype: 'column',\ndata: [150]\n},\n\n\n{\nname: 'LINE',\ntype: 'line',\ndata: [40, 20]\n},\n\n],\n\n\n\n\n\narea_chart_options :{\n            chart: {\n              stacked: true,\n\n            },\n            colors: ['#008FFB', '#00E396', '#CED4DC'],\n            dataLabels: {\n              enabled: false\n            },\n            stroke: {\n              show: true,\n\n            },\n            xaxis: {\n              categories:[''],\n            },\n             yaxis: {\n\n              labels: {\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                        else if (val >= 10000000){\n\n                        return val=(val/10000000)+\"10M\";\n\n                        }\n                        else if (val >= 10000000){\n\n                        return val=(val/10000000)+\"100M\";\n\n                        }\n\n                        else if (val >= 1000000000){\n\n                        return val=(val/1000000000)+\"1B\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                }\n            },\n            fill: {\n              type: 'gradient',\n              gradient: {\n                opacityFrom: 0.6,\n                opacityTo: 0.8,\n              }\n            },\n            legend: {\n              position: 'bottom',\n              horizontalAlign: 'left'\n            },\n\n          },\n\narea_chart_series:[{\n            name: 'series1',\n            data: [31, 40]\n          },\n          {\n            name: 'series1',\n            data: [35, 19]\n          }],\n\n      books:[],\n     intHeader:[],\n     filter:[],\n     select_status:\"Status\",\n     select_amount_USD:\"Amount_USD\",\n     chart_data:[],\n     donut_data:[],\n     pie_data:[],\n     bar_data:[],\n     ve_bar_data:[],\n     line_data:[{name:\"\", 'A':1, 'B':12}],\n     field_list:[\"A\",\"B\"],\n     chartData: [],\n     sourceData :[],\n     line_chart_source_data:[{name: 'A', value: 13000000}],\n     sourceData_donut:[],\n\n     table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n\n     load_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     load_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     line_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     line_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     bar_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     bar_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     vertical_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     vertical_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     Gbar_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     Gbar_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     donut_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     donut_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     pie_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     pie_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     mix_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     mix_table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     area_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     area_table_data : [{ key: '1', oNumber: 'DVO524',}],\n     value_xl : \"Status\",\n     value_yl : \"Amount_USD\",\n\n\n       download_lineChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n       download_barChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n       download_verticalChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n       download_group_barChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n       download_donutChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n       download_pieChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n       download_mixedChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n       download_areaChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }]\n\n\n\n\n\n\n\n      }\n\n\n   }\n\n\n showModal = () => {\n    this.setState({ modalVisible: true });\n  };\n\n  handleCancel = () => {\n    this.setState({ modalVisible: false });\n  };\n\n\n\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n\n  showDrawer = () => {\n    this.setState({\n      drawerVisible: true\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      drawerVisible: false\n    });\n  };\n\n\n// ============================= Loading all charts ====================================================================\n\ncomponentWillMount() {\n    this.loadAnalytical();\n     this.loadIntHeaders();\n     this.loadAll_count_view();\n     this.loadAllChartData({A:\"Status\", B:\"Amount_USD\"});\n     this.loadMixedChartData({A:\"Status\", B:\"Amount_USD\", C:\"Status\"})\n  }\n\n async loadAnalytical()\n  {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/sqd_api\", { firstName: 'Mokka Ravi', lastName: 'Flintstone' });\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({books:data});\n    }\n  }\n\nasync loadIntHeaders()\n  {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/intHeader\", { firstName: 'Mokka Ravi', lastName: 'Flintstone' });\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({intHeader:data});\n      const d = [{'name': 'Actual','data': []}, {'name': 'Budget','data': []}]\n      const dou = [1,3,4]\n      this.setState({donut_data:dou})\n      this.setState({chart_data:d})\n       console.log(this.state.chart_data);\n\n    }\n  }\n  async loadAll_count_view()\n  {\n    this.setState({table_columns : []})\n    this.setState({table_data : []})\n\n    this.setState({download_barChart_table:[]})\n    this.setState({download_verticalChart_table:[]})\n    this.setState({download_donutChart_table:[]})\n    this.setState({download_pieChart_table:[]})\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/load_count_api\");\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.data;\n      var table_dict = data\n      var i;\n      var keys_list =[];\n      var bar_value_list =[];\n      var load_chart_list = [];\n      var load_donut_chart_list = [];\n      var ct_list1 = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {}\n      for (i = 0; i < Object.keys(data).length; i++) {\n            console.log(data[i])\n            var key = Object.keys(data)[i]\n\n            keys_list.push(key)\n            if (key != \"label\"){\n            ct_list1.push(key)\n\n            }\n            else{}\n\n            var value = data[key]\n            if (this.state.value_bar != value){bar_value_list.push(value)}\n            else {\n            }\n\n            var data_dict = {};\n\n            var load_data_dict = {};\n            if (key != \"label\"){\n            data_dict['name']=key;\n            load_data_dict['item']=key;\n            data_dict['value']=value;\n            load_data_dict['count']=value;\n            load_chart_list.push(data_dict)\n            load_donut_chart_list.push(load_data_dict)\n            var column_dict = {}\n            column_dict['title'] =key;\n            column_dict['dataIndex'] =key;\n            column_dict['key'] =key;\n            table_data_dict[key] = value;\n            table_column_list.push(column_dict)\n\n\n\n\n\n            }\n            else{}\n        }\n      table_data_list.push(table_data_dict)\n      this.setState({bar_data:load_chart_list})\n      this.setState({ve_bar_data:load_chart_list})\n      this.setState({sourceData:load_donut_chart_list})\n      this.setState({sourceData_donut:load_donut_chart_list})\n\n      this.setState({bar_table_columns:table_column_list})\n      this.setState({bar_table_data:table_data_list})\n\n      this.setState({vertical_table_columns:table_column_list})\n      this.setState({vertical_table_data:table_data_list})\n\n      this.setState({donut_table_columns:table_column_list})\n      this.setState({donut_table_data:table_data_list})\n\n      this.setState({pie_table_columns:table_column_list})\n      this.setState({pie_table_data:table_data_list})\n\n     this.setState({download_barChart_table:[table_dict]})\n    this.setState({download_verticalChart_table:[table_dict]})\n    this.setState({download_donutChart_table:[table_dict]})\n    this.setState({download_pieChart_table:[table_dict]})\n\n\n\n\n\n\n    }\n  }\n\n\n\nasync loadAllChartData(data){\n\n    const headers  = new Headers()\n    headers.append('Content-Type', 'application/json');\n    const options = {\n    method : 'POST',\n    headers,\n    body:JSON.stringify(data),\n    }\n    this.setState({load_table_columns : []})\n    this.setState({load_table_data : []})\n    this.setState({line_data : []})\n    this.setState({field_list : []})\n    this.setState({line_chart_source_data : []})\n    this.setState({chart_data:[]})\n    this.setState({area_chart_series:[]})\n\n     this.setState({download_lineChart_table:[]})\n     this.setState({download_group_barChart_table:[]})\n const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/data\", options);\n    const status = promise.status;\n\n    if(status===200)\n    {\n      const data = promise.data.data;\n      var l_data = [data];\n      var table_dict = [data]\n      this.setState(data);\n      var i;\n      var keys_list =[];\n      var line_value_list =[];\n      var line_chart_list = [];\n      var load_bar_chart_list = [];\n       var table_column_list = [];\n       var table_data_list = [];\n       var table_data_dict = {}\n       var area_list = [];\n       var area_chart_data = [];\n      for (i = 0; i < Object.keys(data).length; i++) {\n            console.log(data[i])\n            var key = Object.keys(data)[i]\n            keys_list.push(key)\n            var value = data[key]\n            line_value_list.push(value)\n            var data_dict = {};\n            data_dict['name']=key;\n            data_dict['value']=value;\n            line_chart_list.push(data_dict)\n            var load_data_dict = {};\n            load_data_dict['name']=key;\n            load_data_dict['data']=[value];\n            load_bar_chart_list.push(load_data_dict)\n            var column_dict = {}\n            column_dict['title'] =key;\n            column_dict['dataIndex'] =key;\n            column_dict['key'] =key;\n            table_data_dict[key] = value;\n            table_column_list.push(column_dict)\n\n            var area_dict = {}\n            area_list.push(value);\n            area_dict['name']=key;\n            area_dict['data'] = area_list;\n            area_chart_data.push(area_dict);\n\n\n        }\n       table_data_list.push(table_data_dict)\n\n\n      this.setState({line_chart_source_data:line_chart_list})\n      this.setState({field_list:keys_list})\n      this.setState({chart_data:load_bar_chart_list})\n      this.setState({area_chart_series:area_chart_data})\n\n\n      this.setState({line_table_columns:table_column_list})\n      this.setState({line_table_data:table_data_list})\n\n       this.setState({Gbar_table_columns:table_column_list})\n      this.setState({Gbar_table_data:table_data_list})\n\n       this.setState({mix_table_columns:table_column_list})\n      this.setState({mix_table_data:table_data_list})\n\n       this.setState({area_table_columns:table_column_list})\n      this.setState({area_table_data:table_data_list})\n\n\n       this.setState({download_lineChart_table:table_dict})\n       this.setState({download_group_barChart_table:table_dict})\n       this.setState({download_areaChart_table:table_dict})\n }\n}\n\nasync loadMixedChartData(data){\n\n    const headers  = new Headers()\n    headers.append('Content-Type', 'application/json');\n    const options = {\n    method : 'POST',\n    headers,\n    body:JSON.stringify(data),\n    }\n    this.setState({mixed_chart_series : []})\n\n    this.setState({mix_table_columns:[]})\n     this.setState({mix_table_data:[]})\n\n\n     this.setState({download_mixedChart_table:[]})\n const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/dataView_api\", options);\n    const status = promise.status;\n    if(status===200)\n    {\n\n      const sum_data = promise.data.data[\"sum_data\"];\n      const count_data = promise.data.data[\"count_data\"];\n      var table_dict = sum_data;\n      this.setState(data);\n      var i;\n      var keys_list =[];\n      var value_list =[];\n      var max_chart_list = [];\n\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {}\n\n      for (i = 0; i < Object.keys(sum_data).length; i++) {\n            console.log(data[i])\n            var key = Object.keys(sum_data)[i]\n//            keys_list.push(key)\n            var value = sum_data[key]\n            value_list.push(value)\n            var data_dict = {};\n            data_dict['name']=key;\n            data_dict['type']='column';\n            data_dict['data']=[value];\n            max_chart_list.push(data_dict)\n\n            var column_dict = {}\n            column_dict['title'] =key;\n            column_dict['dataIndex'] =key;\n            column_dict['key'] =key;\n            table_data_dict[key] = value;\n            table_column_list.push(column_dict)\n        }\n      table_data_list.push(table_data_dict)\n      var j;\n      var c_keys_list =[];\n      var c_value_list =[];\n      var max_chart_count_list ={};\n      for (j = 0; j < Object.keys(count_data).length; j++) {\n            console.log(data[j])\n            var key = Object.keys(sum_data)[j]\n//            keys_list.push(key)\n            var value = sum_data[key]\n            c_value_list.push(value)\n            var data_dict = {};\n            max_chart_count_list['name']=count_data[\"label\"];\n            max_chart_count_list['type']='line';\n            max_chart_count_list['data']=c_value_list;\n\n        }\n\n       max_chart_list.push(max_chart_count_list)\n      const g_data = [this.state.Actual, this.state.Budget]\n      this.setState({g:g_data})\n      this.setState({mixed_chart_series:max_chart_list})\n      this.setState({mix_table_columns:table_column_list})\n     this.setState({mix_table_data:table_data_list})\n\n     this.setState({download_mixedChart_table:[table_dict]})\n    }\n\n}\n\n\n// =================================================== Line Chart ======================================================\n\nhandleSubmitLineChart = (e) => {\n     this.setState({value_xl:\"\"})\n     this.setState({value_xl: e.target.value});\n };\n\nhandleSubmitLineChart1 = (e) => {\n    this.setState({value_yl:\"\"})\n    this.setState({value_yl: e.target.value});\n  };\n\n\nhandleSubmitLineChartOK = (e) => {\n    e.preventDefault();\n     this.loadLineChartData(\n         {A:this.state.value_xl, B:this.state.value_yl}\n  );\n  };\n\n\nasync loadLineChartData(data){\n\n    const headers  = new Headers()\n    headers.append('Content-Type', 'application/json');\n    const options = {\n    method : 'POST',\n    headers,\n    body:JSON.stringify(data),\n    }\n    this.setState({line_data : []})\n    this.setState({field_list : []})\n    this.setState({line_chart_source_data : []})\n\n     this.setState({line_table_columns:[]})\n      this.setState({line_table_data:[]})\n      this.setState({download_lineChart_table:[]})\n const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/data\", options);\n    const status = promise.status;\n\n    if(status===200)\n    {\n      const data = promise.data.data;\n      const table_dict = data\n      var l_data = [data];\n      this.setState(data);\n      var i;\n      var keys_list =[];\n      var line_value_list =[];\n      var line_chart_list = []\n       var table_column_list = [];\n       var table_data_list = [];\n       var table_data_dict = {}\n      for (i = 0; i < Object.keys(data).length; i++) {\n            console.log(data[i])\n            var key = Object.keys(data)[i]\n            keys_list.push(key)\n            var value = data[key]\n            line_value_list.push(value)\n            var data_dict = {};\n            data_dict['name']=key;\n            data_dict['value']=value;\n            line_chart_list.push(data_dict)\n            var column_dict = {}\n            column_dict['title'] =key;\n            column_dict['dataIndex'] =key;\n            column_dict['key'] =key;\n            table_data_dict[key] = value;\n            table_column_list.push(column_dict)\n        }\n\n      table_data_list.push(table_data_dict)\n      this.setState({download_lineChart_table:[table_dict]})\n      this.setState({line_chart_source_data:line_chart_list})\n      this.setState({field_list:keys_list})\n\n      this.setState({line_table_columns:table_column_list})\n      this.setState({line_table_data:table_data_list})\n    }\n}\n\n\n//========================================== Vertical bar Chart ================================================================\nhandleSubmitVerticalBarChart = (e) => {\n        e.preventDefault();\n        this.setState({value_v_bar: e.target.value});\n         this.VerticalBarCheckbox(\n             {Column:e.target.value }\n      );\n };\n\n\nasync VerticalBarCheckbox(data){\n    const headers  = new Headers()\n    headers.append('Content-Type', 'application/json');\n    const options = {\n    method : 'POST',\n    headers,\n    body:JSON.stringify(data),\n    }\n\n    this.setState({ve_bar_data : []})\n\n    this.setState({vertical_table_columns:[]})\n      this.setState({vertical_table_data:[]})\n\n\n this.setState({download_verticalChart_table:[]})\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/count_api\", options);\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.data;\n      var table_dict = data;\n\n      this.setState(data);\n      console.log(data);\n      var i;\n      var keys_list =[];\n      var bar_value_list =[];\n      var Ve_Bar_chart_list = []\n      var ct_list1 = []\n\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {}\n      for (i = 0; i < Object.keys(data).length; i++) {\n            console.log(data[i])\n            var key = Object.keys(data)[i]\n\n            keys_list.push(key)\n            if (key != \"label\"){\n            ct_list1.push(key)\n\n            }\n            else{}\n\n            var value = data[key]\n            if (this.state.value_bar != value){bar_value_list.push(value)}\n            else {\n            }\n\n            var data_dict = {};\n            if (key != \"label\"){\n            data_dict['name']=key;\n            data_dict['value']=value;\n            Ve_Bar_chart_list.push(data_dict)\n\n            var column_dict = {}\n            column_dict['title'] =key;\n            column_dict['dataIndex'] =key;\n            column_dict['key'] =key;\n            table_data_dict[key] = value;\n            table_column_list.push(column_dict)\n\n\n\n            }\n            else{}\n        }\n     table_data_list.push(table_data_dict)\n     this.setState({ve_bar_data:Ve_Bar_chart_list})\n     this.setState({vertical_table_columns:table_column_list})\n     this.setState({vertical_table_data:table_data_list})\n\n     this.setState({download_verticalChart_table:[table_dict]})\n\n    }\n\n}\n\nrender() {\n\n\nconst dv = new DataSet.View().source(this.state.sourceData);\ndv.transform({\n  type: 'percent',\n  field: 'count',\n  dimension: 'item',\n  as: 'percent',\n  align: 'left'\n});\nconst pie_data = dv.rows;\n\n\nconst dv1 = new DataSet.View().source(this.state.sourceData_donut);\ndv1.transform({\n  type: 'percent',\n  field: 'count',\n  dimension: 'item',\n  as: 'percent'\n});\nconst don_data = dv1.rows;\n\nconst dv12 = new DataSet.View().source(this.state.line_data);\n    dv12.transform({\n      type: \"fold\",\n      fields:this.state.field_list,\n      key: \"keySelect\",\n      value: \"average\"\n    });\n    const data1233 = dv12.rows;\n\n\n\nconst bar_dv = new DataSet.View().source(this.state.bar_data);\nbar_dv.transform({\n  type: 'sort',\n  callback(a, b) {\n    return a.value - b.value > 0;\n  },\n});\nconst basic_bar_data = bar_dv.rows;\n\n\n\n\n\nconst line_chart_source_scale = [{\n  dataKey: 'value',\n  min: 0,\n  formatter: function formatter(val) {\n             if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n\n                         else {\n                                    return val;\n                                }\n        }\n},{\n  dataKey: 'year',\n  min: 0,\n  max: 1,\n}];\n\n\n\n\n\nconst ve_bar_dv = new DataSet.View().source(this.state.ve_bar_data);\nve_bar_dv.transform({\n  type: 'sort',\n  callback(a, b) {\n    return a.value - b.value > 0;\n  },\n});\nconst vertical_bar_data = ve_bar_dv.rows;\n\n\n\n    return (\n\n\n   <div id=\"chart\">\n        <select class=\"custom-select\"  value={this.state.value_v_bar} onChange={this.handleSubmitVerticalBarChart}\n            style={{ width:\"110px\", marginLeft:\"20px\" }}>\n             <option  value=\"\" >{this.state.select_status}</option>\n             {this.state.books.map((value,index)=>\n                      {return   <option class=\"btn btn-custom btn-block btn-detail\"\n                      style={{ cursor: \"pointer;\", fontSize: \"14px\"}} key={index}> {value} </option> }\n                      )}\n       </select>\n       <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#myModal_Vertical\" style={{marginLeft:\"3px\"}}>\n        Table View</button>\n          <div class=\"modal fade\" id=\"myModal_Vertical\" role=\"dialog\">\n            <div class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                 {/* <button type=\"button\" class=\"close\" data-dismiss=\"modal\" style={{marginLeft:\"1px\"}}>&times;</button> */}\n                  <h4 class=\"modal-title\">Vertical Bar Chart Table Data</h4>\n                </div>\n                <div class=\"modal-body\">\n                 <Table columns={this.state.vertical_table_columns} dataSource={this.state.vertical_table_data} style={{overflowY:\"scroll\"}}/>\n\n                </div>\n                <div class=\"modal-footer\">\n                  <button type=\"button\" class=\"btn btn-info\" data-dismiss=\"modal\">Close</button>\n                  <CSVLink data={this.state.download_verticalChart_table}>\n                  <button type=\"button\" class=\"btn btn-primary\" > Download </button>\n                  </CSVLink>;\n                </div>\n              </div>\n\n            </div>\n          </div>\n\n            <Chart forceFit height={400} data={vertical_bar_data} scale={vertical_scale}>\n            <Tooltip />\n            <Axis />\n            <Bar position=\"name*value\" />\n            </Chart>\n    </div>\n\n    );\n  }\n}\nexport default VerticalChart;"]},"metadata":{},"sourceType":"module"}