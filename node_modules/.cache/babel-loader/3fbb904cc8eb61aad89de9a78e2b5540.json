{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\n\nfunction generateRandomNum() {\n  return Math.floor(new Date().getTime() + Math.random() * 10000).toString();\n}\n\nvar Props = function () {\n  function Props() {}\n\n  return Props;\n}();\n\nvar SubPlugin = function (_super) {\n  __extends(SubPlugin, _super);\n\n  function SubPlugin(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.displayName = 'SubPlugin';\n    _this.state = {\n      container: props.container || 'viser-slider-' + generateRandomNum()\n    };\n    return _this;\n  }\n\n  SubPlugin.prototype.getChildContext = function () {\n    return {\n      container: this.state.container\n    };\n  };\n\n  SubPlugin.prototype.componentDidUpdate = function () {\n    this.context.centralizedUpdates(this);\n  };\n\n  SubPlugin.prototype.componentDidMount = function () {\n    this.context.centralizedUpdates(this);\n  };\n\n  SubPlugin.prototype.render = function () {\n    var container = this.state.container;\n    return React.createElement(\"div\", {\n      id: container\n    });\n  };\n\n  SubPlugin.childContextTypes = {\n    container: PropTypes.string\n  };\n  SubPlugin.contextTypes = {\n    centralizedUpdates: PropTypes.func\n  };\n  return SubPlugin;\n}(React.Component);\n\nvar Slider = function (_super) {\n  __extends(Slider, _super);\n\n  function Slider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.displayName = 'Slider';\n    return _this;\n  }\n\n  return Slider;\n}(SubPlugin);\n\nexport { Slider };","map":null,"metadata":{},"sourceType":"module"}