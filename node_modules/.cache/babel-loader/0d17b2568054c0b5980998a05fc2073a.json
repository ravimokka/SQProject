{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar Registry = require('../../registry');\n\nmodule.exports = function handleXYZDefaults(traceIn, traceOut, coerce, layout, xName, yName) {\n  var z = coerce('z');\n  xName = xName || 'x';\n  yName = yName || 'y';\n  var x, y;\n  if (z === undefined || !z.length) return 0;\n\n  if (Lib.isArray1D(traceIn.z)) {\n    x = coerce(xName);\n    y = coerce(yName);\n    var xlen = Lib.minRowLength(x);\n    var ylen = Lib.minRowLength(y); // column z must be accompanied by xName and yName arrays\n\n    if (xlen === 0 || ylen === 0) return 0;\n    traceOut._length = Math.min(xlen, ylen, z.length);\n  } else {\n    x = coordDefaults(xName, coerce);\n    y = coordDefaults(yName, coerce); // TODO put z validation elsewhere\n\n    if (!isValidZ(z)) return 0;\n    coerce('transpose');\n    traceOut._length = null;\n  }\n\n  var handleCalendarDefaults = Registry.getComponentMethod('calendars', 'handleTraceDefaults');\n  handleCalendarDefaults(traceIn, traceOut, [xName, yName], layout);\n  return true;\n};\n\nfunction coordDefaults(coordStr, coerce) {\n  var coord = coerce(coordStr);\n  var coordType = coord ? coerce(coordStr + 'type', 'array') : 'scaled';\n\n  if (coordType === 'scaled') {\n    coerce(coordStr + '0');\n    coerce('d' + coordStr);\n  }\n\n  return coord;\n}\n\nfunction isValidZ(z) {\n  var allRowsAreArrays = true;\n  var oneRowIsFilled = false;\n  var hasOneNumber = false;\n  var zi;\n  /*\n   * Without this step:\n   *\n   * hasOneNumber = false breaks contour but not heatmap\n   * allRowsAreArrays = false breaks contour but not heatmap\n   * oneRowIsFilled = false breaks both\n   */\n\n  for (var i = 0; i < z.length; i++) {\n    zi = z[i];\n\n    if (!Lib.isArrayOrTypedArray(zi)) {\n      allRowsAreArrays = false;\n      break;\n    }\n\n    if (zi.length > 0) oneRowIsFilled = true;\n\n    for (var j = 0; j < zi.length; j++) {\n      if (isNumeric(zi[j])) {\n        hasOneNumber = true;\n        break;\n      }\n    }\n  }\n\n  return allRowsAreArrays && oneRowIsFilled && hasOneNumber;\n}","map":null,"metadata":{},"sourceType":"script"}