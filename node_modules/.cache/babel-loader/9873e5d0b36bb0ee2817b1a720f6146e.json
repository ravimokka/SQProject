{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib');\n\nvar Color = require('../color'); // defaults common to 'annotations' and 'annotations3d'\n\n\nmodule.exports = function handleAnnotationCommonDefaults(annIn, annOut, fullLayout, coerce) {\n  coerce('opacity');\n  var bgColor = coerce('bgcolor');\n  var borderColor = coerce('bordercolor');\n  var borderOpacity = Color.opacity(borderColor);\n  coerce('borderpad');\n  var borderWidth = coerce('borderwidth');\n  var showArrow = coerce('showarrow');\n  coerce('text', showArrow ? ' ' : fullLayout._dfltTitle.annotation);\n  coerce('textangle');\n  Lib.coerceFont(coerce, 'font', fullLayout.font);\n  coerce('width');\n  coerce('align');\n  var h = coerce('height');\n  if (h) coerce('valign');\n\n  if (showArrow) {\n    var arrowside = coerce('arrowside');\n    var arrowhead;\n    var arrowsize;\n\n    if (arrowside.indexOf('end') !== -1) {\n      arrowhead = coerce('arrowhead');\n      arrowsize = coerce('arrowsize');\n    }\n\n    if (arrowside.indexOf('start') !== -1) {\n      coerce('startarrowhead', arrowhead);\n      coerce('startarrowsize', arrowsize);\n    }\n\n    coerce('arrowcolor', borderOpacity ? annOut.bordercolor : Color.defaultLine);\n    coerce('arrowwidth', (borderOpacity && borderWidth || 1) * 2);\n    coerce('standoff');\n    coerce('startstandoff');\n  }\n\n  var hoverText = coerce('hovertext');\n  var globalHoverLabel = fullLayout.hoverlabel || {};\n\n  if (hoverText) {\n    var hoverBG = coerce('hoverlabel.bgcolor', globalHoverLabel.bgcolor || (Color.opacity(bgColor) ? Color.rgb(bgColor) : Color.defaultLine));\n    var hoverBorder = coerce('hoverlabel.bordercolor', globalHoverLabel.bordercolor || Color.contrast(hoverBG));\n    Lib.coerceFont(coerce, 'hoverlabel.font', {\n      family: globalHoverLabel.font.family,\n      size: globalHoverLabel.font.size,\n      color: globalHoverLabel.font.color || hoverBorder\n    });\n  }\n\n  coerce('captureevents', !!hoverText);\n};","map":null,"metadata":{},"sourceType":"script"}