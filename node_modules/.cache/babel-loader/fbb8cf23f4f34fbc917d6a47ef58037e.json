{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar extendFlat = require('../lib/extend').extendFlat;\n/**\n * Make a xy domain attribute group\n *\n * @param {object} opts\n *   @param {string}\n *     opts.name: name to be inserted in the default description\n *   @param {boolean}\n *     opts.trace: set to true for trace containers\n *   @param {string}\n *     opts.editType: editType for all pieces\n *   @param {boolean}\n *     opts.noGridCell: set to true to omit `row` and `column`\n *\n * @param {object} extra\n *   @param {string}\n *     extra.description: extra description. N.B we use\n *     a separate extra container to make it compatible with\n *     the compress_attributes transform.\n *\n * @return {object} attributes object containing {x,y} as specified\n */\n\n\nexports.attributes = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var base = {\n    valType: 'info_array',\n    role: 'info',\n    editType: opts.editType,\n    items: [{\n      valType: 'number',\n      min: 0,\n      max: 1,\n      editType: opts.editType\n    }, {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      editType: opts.editType\n    }],\n    dflt: [0, 1]\n  };\n  var namePart = opts.name ? opts.name + ' ' : '';\n  var contPart = opts.trace ? 'trace ' : 'subplot ';\n  var descPart = extra.description ? ' ' + extra.description : '';\n  var out = {\n    x: extendFlat({}, base, {\n      description: ['Sets the horizontal domain of this ', namePart, contPart, '(in plot fraction).', descPart].join('')\n    }),\n    y: extendFlat({}, base, {\n      description: ['Sets the vertical domain of this ', namePart, contPart, '(in plot fraction).', descPart].join('')\n    }),\n    editType: opts.editType\n  };\n\n  if (!opts.noGridCell) {\n    out.row = {\n      valType: 'integer',\n      min: 0,\n      dflt: 0,\n      role: 'info',\n      editType: opts.editType,\n      description: ['If there is a layout grid, use the domain ', 'for this row in the grid for this ', namePart, contPart, '.', descPart].join('')\n    };\n    out.column = {\n      valType: 'integer',\n      min: 0,\n      dflt: 0,\n      role: 'info',\n      editType: opts.editType,\n      description: ['If there is a layout grid, use the domain ', 'for this column in the grid for this ', namePart, contPart, '.', descPart].join('')\n    };\n  }\n\n  return out;\n};\n\nexports.defaults = function (containerOut, layout, coerce, dfltDomains) {\n  var dfltX = dfltDomains && dfltDomains.x || [0, 1];\n  var dfltY = dfltDomains && dfltDomains.y || [0, 1];\n  var grid = layout.grid;\n\n  if (grid) {\n    var column = coerce('domain.column');\n\n    if (column !== undefined) {\n      if (column < grid.columns) dfltX = grid._domains.x[column];else delete containerOut.domain.column;\n    }\n\n    var row = coerce('domain.row');\n\n    if (row !== undefined) {\n      if (row < grid.rows) dfltY = grid._domains.y[row];else delete containerOut.domain.row;\n    }\n  }\n\n  coerce('domain.x', dfltX);\n  coerce('domain.y', dfltY);\n};","map":null,"metadata":{},"sourceType":"script"}