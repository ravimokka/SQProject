{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar d3 = require('d3');\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\n\nvar cleanNumber = Lib.cleanNumber;\nvar ms2DateTime = Lib.ms2DateTime;\nvar dateTime2ms = Lib.dateTime2ms;\nvar ensureNumber = Lib.ensureNumber;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\n\nvar numConstants = require('../../constants/numerical');\n\nvar FP_SAFE = numConstants.FP_SAFE;\nvar BADNUM = numConstants.BADNUM;\nvar LOG_CLIP = numConstants.LOG_CLIP;\n\nvar constants = require('./constants');\n\nvar axisIds = require('./axis_ids');\n\nfunction fromLog(v) {\n  return Math.pow(10, v);\n}\n\nfunction isValidCategory(v) {\n  return v !== null && v !== undefined;\n}\n/**\n * Define the conversion functions for an axis data is used in 5 ways:\n *\n *  d: data, in whatever form it's provided\n *  c: calcdata: turned into numbers, but not linearized\n *  l: linearized - same as c except for log axes (and other nonlinear\n *      mappings later?) this is used when we need to know if it's\n *      *possible* to show some data on this axis, without caring about\n *      the current range\n *  p: pixel value - mapped to the screen with current size and zoom\n *  r: ranges, tick0, and annotation positions match one of the above\n *     but are handled differently for different types:\n *     - linear and date: data format (d)\n *     - category: calcdata format (c), and will stay that way because\n *       the data format has no continuous mapping\n *     - log: linearized (l) format\n *       TODO: in v2.0 we plan to change it to data format. At that point\n *       shapes will work the same way as ranges, tick0, and annotations\n *       so they can use this conversion too.\n *\n * Creates/updates these conversion functions, and a few more utilities\n * like cleanRange, and makeCalcdata\n *\n * also clears the autotick constraints ._minDtick, ._forceTick0\n */\n\n\nmodule.exports = function setConvert(ax, fullLayout) {\n  fullLayout = fullLayout || {};\n  var axId = ax._id || 'x';\n  var axLetter = axId.charAt(0);\n\n  function toLog(v, clip) {\n    if (v > 0) return Math.log(v) / Math.LN10;else if (v <= 0 && clip && ax.range && ax.range.length === 2) {\n      // clip NaN (ie past negative infinity) to LOG_CLIP axis\n      // length past the negative edge\n      var r0 = ax.range[0];\n      var r1 = ax.range[1];\n      return 0.5 * (r0 + r1 - 2 * LOG_CLIP * Math.abs(r0 - r1));\n    } else return BADNUM;\n  }\n  /*\n   * wrapped dateTime2ms that:\n   * - accepts ms numbers for backward compatibility\n   * - inserts a dummy arg so calendar is the 3rd arg (see notes below).\n   * - defaults to ax.calendar\n   */\n\n\n  function dt2ms(v, _, calendar) {\n    // NOTE: Changed this behavior: previously we took any numeric value\n    // to be a ms, even if it was a string that could be a bare year.\n    // Now we convert it as a date if at all possible, and only try\n    // as (local) ms if that fails.\n    var ms = dateTime2ms(v, calendar || ax.calendar);\n\n    if (ms === BADNUM) {\n      if (isNumeric(v)) {\n        v = +v; // keep track of tenths of ms, that `new Date` will drop\n        // same logic as in Lib.ms2DateTime\n\n        var msecTenths = Math.floor(Lib.mod(v + 0.05, 1) * 10);\n        var msRounded = Math.round(v - msecTenths / 10);\n        ms = dateTime2ms(new Date(msRounded)) + msecTenths / 10;\n      } else return BADNUM;\n    }\n\n    return ms;\n  } // wrapped ms2DateTime to insert default ax.calendar\n\n\n  function ms2dt(v, r, calendar) {\n    return ms2DateTime(v, r, calendar || ax.calendar);\n  }\n\n  function getCategoryName(v) {\n    return ax._categories[Math.round(v)];\n  }\n  /*\n   * setCategoryIndex: return the index of category v,\n   * inserting it in the list if it's not already there\n   *\n   * this will enter the categories in the order it\n   * encounters them, ie all the categories from the\n   * first data set, then all the ones from the second\n   * that aren't in the first etc.\n   *\n   * it is assumed that this function is being invoked in the\n   * already sorted category order; otherwise there would be\n   * a disconnect between the array and the index returned\n   */\n\n\n  function setCategoryIndex(v) {\n    if (isValidCategory(v)) {\n      if (ax._categoriesMap === undefined) {\n        ax._categoriesMap = {};\n      }\n\n      if (ax._categoriesMap[v] !== undefined) {\n        return ax._categoriesMap[v];\n      } else {\n        ax._categories.push(typeof v === 'number' ? String(v) : v);\n\n        var curLength = ax._categories.length - 1;\n        ax._categoriesMap[v] = curLength;\n        return curLength;\n      }\n    }\n\n    return BADNUM;\n  }\n\n  function setMultiCategoryIndex(arrayIn, len) {\n    var arrayOut = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var v0 = (arrayIn[0] || [])[i];\n      var v1 = (arrayIn[1] || [])[i];\n      arrayOut[i] = getCategoryIndex([v0, v1]);\n    }\n\n    return arrayOut;\n  }\n\n  function getCategoryIndex(v) {\n    if (ax._categoriesMap) {\n      return ax._categoriesMap[v];\n    }\n  }\n\n  function getCategoryPosition(v) {\n    // d2l/d2c variant that that won't add categories but will also\n    // allow numbers to be mapped to the linearized axis positions\n    var index = getCategoryIndex(v);\n    if (index !== undefined) return index;\n    if (isNumeric(v)) return +v;\n  }\n\n  function l2p(v) {\n    if (!isNumeric(v)) return BADNUM; // include 2 fractional digits on pixel, for PDF zooming etc\n\n    return d3.round(ax._b + ax._m * v, 2);\n  }\n\n  function p2l(px) {\n    return (px - ax._b) / ax._m;\n  } // conversions among c/l/p are fairly simple - do them together for all axis types\n\n\n  ax.c2l = ax.type === 'log' ? toLog : ensureNumber;\n  ax.l2c = ax.type === 'log' ? fromLog : ensureNumber;\n  ax.l2p = l2p;\n  ax.p2l = p2l;\n  ax.c2p = ax.type === 'log' ? function (v, clip) {\n    return l2p(toLog(v, clip));\n  } : l2p;\n  ax.p2c = ax.type === 'log' ? function (px) {\n    return fromLog(p2l(px));\n  } : p2l;\n  /*\n   * now type-specific conversions for **ALL** other combinations\n   * they're all written out, instead of being combinations of each other, for\n   * both clarity and speed.\n   */\n\n  if (['linear', '-'].indexOf(ax.type) !== -1) {\n    // all are data vals, but d and r need cleaning\n    ax.d2r = ax.r2d = ax.d2c = ax.r2c = ax.d2l = ax.r2l = cleanNumber;\n    ax.c2d = ax.c2r = ax.l2d = ax.l2r = ensureNumber;\n\n    ax.d2p = ax.r2p = function (v) {\n      return ax.l2p(cleanNumber(v));\n    };\n\n    ax.p2d = ax.p2r = p2l;\n    ax.cleanPos = ensureNumber;\n  } else if (ax.type === 'log') {\n    // d and c are data vals, r and l are logged (but d and r need cleaning)\n    ax.d2r = ax.d2l = function (v, clip) {\n      return toLog(cleanNumber(v), clip);\n    };\n\n    ax.r2d = ax.r2c = function (v) {\n      return fromLog(cleanNumber(v));\n    };\n\n    ax.d2c = ax.r2l = cleanNumber;\n    ax.c2d = ax.l2r = ensureNumber;\n    ax.c2r = toLog;\n    ax.l2d = fromLog;\n\n    ax.d2p = function (v, clip) {\n      return ax.l2p(ax.d2r(v, clip));\n    };\n\n    ax.p2d = function (px) {\n      return fromLog(p2l(px));\n    };\n\n    ax.r2p = function (v) {\n      return ax.l2p(cleanNumber(v));\n    };\n\n    ax.p2r = p2l;\n    ax.cleanPos = ensureNumber;\n  } else if (ax.type === 'date') {\n    // r and d are date strings, l and c are ms\n\n    /*\n     * Any of these functions with r and d on either side, calendar is the\n     * **3rd** argument. log has reserved the second argument.\n     *\n     * Unless you need the special behavior of the second arg (ms2DateTime\n     * uses this to limit precision, toLog uses true to clip negatives\n     * to offscreen low rather than undefined), it's safe to pass 0.\n     */\n    ax.d2r = ax.r2d = Lib.identity;\n    ax.d2c = ax.r2c = ax.d2l = ax.r2l = dt2ms;\n    ax.c2d = ax.c2r = ax.l2d = ax.l2r = ms2dt;\n\n    ax.d2p = ax.r2p = function (v, _, calendar) {\n      return ax.l2p(dt2ms(v, 0, calendar));\n    };\n\n    ax.p2d = ax.p2r = function (px, r, calendar) {\n      return ms2dt(p2l(px), r, calendar);\n    };\n\n    ax.cleanPos = function (v) {\n      return Lib.cleanDate(v, BADNUM, ax.calendar);\n    };\n  } else if (ax.type === 'category') {\n    // d is categories (string)\n    // c and l are indices (numbers)\n    // r is categories or numbers\n    ax.d2c = ax.d2l = setCategoryIndex;\n    ax.r2d = ax.c2d = ax.l2d = getCategoryName;\n    ax.d2r = ax.d2l_noadd = getCategoryPosition;\n\n    ax.r2c = function (v) {\n      var index = getCategoryPosition(v);\n      return index !== undefined ? index : ax.fraction2r(0.5);\n    };\n\n    ax.l2r = ax.c2r = ensureNumber;\n    ax.r2l = getCategoryPosition;\n\n    ax.d2p = function (v) {\n      return ax.l2p(ax.r2c(v));\n    };\n\n    ax.p2d = function (px) {\n      return getCategoryName(p2l(px));\n    };\n\n    ax.r2p = ax.d2p;\n    ax.p2r = p2l;\n\n    ax.cleanPos = function (v) {\n      if (typeof v === 'string' && v !== '') return v;\n      return ensureNumber(v);\n    };\n  } else if (ax.type === 'multicategory') {\n    // N.B. multicategory axes don't define d2c and d2l,\n    // as 'data-to-calcdata' conversion needs to take into\n    // account all data array items as in ax.makeCalcdata.\n    ax.r2d = ax.c2d = ax.l2d = getCategoryName;\n    ax.d2r = ax.d2l_noadd = getCategoryPosition;\n\n    ax.r2c = function (v) {\n      var index = getCategoryPosition(v);\n      return index !== undefined ? index : ax.fraction2r(0.5);\n    };\n\n    ax.r2c_just_indices = getCategoryIndex;\n    ax.l2r = ax.c2r = ensureNumber;\n    ax.r2l = getCategoryPosition;\n\n    ax.d2p = function (v) {\n      return ax.l2p(ax.r2c(v));\n    };\n\n    ax.p2d = function (px) {\n      return getCategoryName(p2l(px));\n    };\n\n    ax.r2p = ax.d2p;\n    ax.p2r = p2l;\n\n    ax.cleanPos = function (v) {\n      if (Array.isArray(v) || typeof v === 'string' && v !== '') return v;\n      return ensureNumber(v);\n    };\n\n    ax.setupMultiCategory = function (fullData) {\n      var traceIndices = ax._traceIndices;\n      var i, j;\n      var matchGroups = fullLayout._axisMatchGroups;\n\n      if (matchGroups && matchGroups.length && ax._categories.length === 0) {\n        for (i = 0; i < matchGroups.length; i++) {\n          var group = matchGroups[i];\n\n          if (group[axId]) {\n            for (var axId2 in group) {\n              if (axId2 !== axId) {\n                var ax2 = fullLayout[axisIds.id2name(axId2)];\n                traceIndices = traceIndices.concat(ax2._traceIndices);\n              }\n            }\n          }\n        }\n      } // [ [cnt, {$cat: index}], for 1,2 ]\n\n\n      var seen = [[0, {}], [0, {}]]; // [ [arrayIn[0][i], arrayIn[1][i]], for i .. N ]\n\n      var list = [];\n\n      for (i = 0; i < traceIndices.length; i++) {\n        var trace = fullData[traceIndices[i]];\n\n        if (axLetter in trace) {\n          var arrayIn = trace[axLetter];\n          var len = trace._length || Lib.minRowLength(arrayIn);\n\n          if (isArrayOrTypedArray(arrayIn[0]) && isArrayOrTypedArray(arrayIn[1])) {\n            for (j = 0; j < len; j++) {\n              var v0 = arrayIn[0][j];\n              var v1 = arrayIn[1][j];\n\n              if (isValidCategory(v0) && isValidCategory(v1)) {\n                list.push([v0, v1]);\n\n                if (!(v0 in seen[0][1])) {\n                  seen[0][1][v0] = seen[0][0]++;\n                }\n\n                if (!(v1 in seen[1][1])) {\n                  seen[1][1][v1] = seen[1][0]++;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      list.sort(function (a, b) {\n        var ind0 = seen[0][1];\n        var d = ind0[a[0]] - ind0[b[0]];\n        if (d) return d;\n        var ind1 = seen[1][1];\n        return ind1[a[1]] - ind1[b[1]];\n      });\n\n      for (i = 0; i < list.length; i++) {\n        setCategoryIndex(list[i]);\n      }\n    };\n  } // find the range value at the specified (linear) fraction of the axis\n\n\n  ax.fraction2r = function (v) {\n    var rl0 = ax.r2l(ax.range[0]);\n    var rl1 = ax.r2l(ax.range[1]);\n    return ax.l2r(rl0 + v * (rl1 - rl0));\n  }; // find the fraction of the range at the specified range value\n\n\n  ax.r2fraction = function (v) {\n    var rl0 = ax.r2l(ax.range[0]);\n    var rl1 = ax.r2l(ax.range[1]);\n    return (ax.r2l(v) - rl0) / (rl1 - rl0);\n  };\n  /*\n   * cleanRange: make sure range is a couplet of valid & distinct values\n   * keep numbers away from the limits of floating point numbers,\n   * and dates away from the ends of our date system (+/- 9999 years)\n   *\n   * optional param rangeAttr: operate on a different attribute, like\n   * ax._r, rather than ax.range\n   */\n\n\n  ax.cleanRange = function (rangeAttr, opts) {\n    if (!opts) opts = {};\n    if (!rangeAttr) rangeAttr = 'range';\n    var range = Lib.nestedProperty(ax, rangeAttr).get();\n    var i, dflt;\n    if (ax.type === 'date') dflt = Lib.dfltRange(ax.calendar);else if (axLetter === 'y') dflt = constants.DFLTRANGEY;else dflt = opts.dfltRange || constants.DFLTRANGEX; // make sure we don't later mutate the defaults\n\n    dflt = dflt.slice();\n\n    if (ax.rangemode === 'tozero' || ax.rangemode === 'nonnegative') {\n      dflt[0] = 0;\n    }\n\n    if (!range || range.length !== 2) {\n      Lib.nestedProperty(ax, rangeAttr).set(dflt);\n      return;\n    }\n\n    if (ax.type === 'date' && !ax.autorange) {\n      // check if milliseconds or js date objects are provided for range\n      // and convert to date strings\n      range[0] = Lib.cleanDate(range[0], BADNUM, ax.calendar);\n      range[1] = Lib.cleanDate(range[1], BADNUM, ax.calendar);\n    }\n\n    for (i = 0; i < 2; i++) {\n      if (ax.type === 'date') {\n        if (!Lib.isDateTime(range[i], ax.calendar)) {\n          ax[rangeAttr] = dflt;\n          break;\n        }\n\n        if (ax.r2l(range[0]) === ax.r2l(range[1])) {\n          // split by +/- 1 second\n          var linCenter = Lib.constrain(ax.r2l(range[0]), Lib.MIN_MS + 1000, Lib.MAX_MS - 1000);\n          range[0] = ax.l2r(linCenter - 1000);\n          range[1] = ax.l2r(linCenter + 1000);\n          break;\n        }\n      } else {\n        if (!isNumeric(range[i])) {\n          if (isNumeric(range[1 - i])) {\n            range[i] = range[1 - i] * (i ? 10 : 0.1);\n          } else {\n            ax[rangeAttr] = dflt;\n            break;\n          }\n        }\n\n        if (range[i] < -FP_SAFE) range[i] = -FP_SAFE;else if (range[i] > FP_SAFE) range[i] = FP_SAFE;\n\n        if (range[0] === range[1]) {\n          // somewhat arbitrary: split by 1 or 1ppm, whichever is bigger\n          var inc = Math.max(1, Math.abs(range[0] * 1e-6));\n          range[0] -= inc;\n          range[1] += inc;\n        }\n      }\n    }\n  }; // set scaling to pixels\n\n\n  ax.setScale = function (usePrivateRange) {\n    var gs = fullLayout._size; // make sure we have a domain (pull it in from the axis\n    // this one is overlaying if necessary)\n\n    if (ax.overlaying) {\n      var ax2 = axisIds.getFromId({\n        _fullLayout: fullLayout\n      }, ax.overlaying);\n      ax.domain = ax2.domain;\n    } // While transitions are occuring, occurring, we get a double-transform\n    // issue if we transform the drawn layer *and* use the new axis range to\n    // draw the data. This allows us to construct setConvert using the pre-\n    // interaction values of the range:\n\n\n    var rangeAttr = usePrivateRange && ax._r ? '_r' : 'range';\n    var calendar = ax.calendar;\n    ax.cleanRange(rangeAttr);\n    var rl0 = ax.r2l(ax[rangeAttr][0], calendar);\n    var rl1 = ax.r2l(ax[rangeAttr][1], calendar);\n\n    if (axLetter === 'y') {\n      ax._offset = gs.t + (1 - ax.domain[1]) * gs.h;\n      ax._length = gs.h * (ax.domain[1] - ax.domain[0]);\n      ax._m = ax._length / (rl0 - rl1);\n      ax._b = -ax._m * rl1;\n    } else {\n      ax._offset = gs.l + ax.domain[0] * gs.w;\n      ax._length = gs.w * (ax.domain[1] - ax.domain[0]);\n      ax._m = ax._length / (rl1 - rl0);\n      ax._b = -ax._m * rl0;\n    }\n\n    if (!isFinite(ax._m) || !isFinite(ax._b) || ax._length < 0) {\n      fullLayout._replotting = false;\n      throw new Error('Something went wrong with axis scaling');\n    }\n  }; // makeCalcdata: takes an x or y array and converts it\n  // to a position on the axis object \"ax\"\n  // inputs:\n  //      trace - a data object from gd.data\n  //      axLetter - a string, either 'x' or 'y', for which item\n  //          to convert (TODO: is this now always the same as\n  //          the first letter of ax._id?)\n  // in case the expected data isn't there, make a list of\n  // integers based on the opposite data\n\n\n  ax.makeCalcdata = function (trace, axLetter) {\n    var arrayIn, arrayOut, i, len;\n    var axType = ax.type;\n    var cal = axType === 'date' && trace[axLetter + 'calendar'];\n\n    if (axLetter in trace) {\n      arrayIn = trace[axLetter];\n      len = trace._length || Lib.minRowLength(arrayIn);\n\n      if (Lib.isTypedArray(arrayIn) && (axType === 'linear' || axType === 'log')) {\n        if (len === arrayIn.length) {\n          return arrayIn;\n        } else if (arrayIn.subarray) {\n          return arrayIn.subarray(0, len);\n        }\n      }\n\n      if (axType === 'multicategory') {\n        return setMultiCategoryIndex(arrayIn, len);\n      }\n\n      arrayOut = new Array(len);\n\n      for (i = 0; i < len; i++) {\n        arrayOut[i] = ax.d2c(arrayIn[i], 0, cal);\n      }\n    } else {\n      var v0 = axLetter + '0' in trace ? ax.d2c(trace[axLetter + '0'], 0, cal) : 0;\n      var dv = trace['d' + axLetter] ? Number(trace['d' + axLetter]) : 1; // the opposing data, for size if we have x and dx etc\n\n      arrayIn = trace[{\n        x: 'y',\n        y: 'x'\n      }[axLetter]];\n      len = trace._length || arrayIn.length;\n      arrayOut = new Array(len);\n\n      for (i = 0; i < len; i++) {\n        arrayOut[i] = v0 + i * dv;\n      }\n    }\n\n    return arrayOut;\n  };\n\n  ax.isValidRange = function (range) {\n    return Array.isArray(range) && range.length === 2 && isNumeric(ax.r2l(range[0])) && isNumeric(ax.r2l(range[1]));\n  };\n\n  ax.isPtWithinRange = function (d, calendar) {\n    var coord = ax.c2l(d[axLetter], null, calendar);\n    var r0 = ax.r2l(ax.range[0]);\n    var r1 = ax.r2l(ax.range[1]);\n\n    if (r0 < r1) {\n      return r0 <= coord && coord <= r1;\n    } else {\n      // Reversed axis case.\n      return r1 <= coord && coord <= r0;\n    }\n  }; // should skip if not category nor multicategory\n\n\n  ax.clearCalc = function () {\n    var emptyCategories = function emptyCategories() {\n      ax._categories = [];\n      ax._categoriesMap = {};\n    };\n\n    var matchGroups = fullLayout._axisMatchGroups;\n\n    if (matchGroups && matchGroups.length) {\n      var found = false;\n\n      for (var i = 0; i < matchGroups.length; i++) {\n        var group = matchGroups[i];\n\n        if (group[axId]) {\n          found = true;\n          var categories = null;\n          var categoriesMap = null;\n\n          for (var axId2 in group) {\n            var ax2 = fullLayout[axisIds.id2name(axId2)];\n\n            if (ax2._categories) {\n              categories = ax2._categories;\n              categoriesMap = ax2._categoriesMap;\n              break;\n            }\n          }\n\n          if (categories && categoriesMap) {\n            ax._categories = categories;\n            ax._categoriesMap = categoriesMap;\n          } else {\n            emptyCategories();\n          }\n\n          break;\n        }\n      }\n\n      if (!found) emptyCategories();\n    } else {\n      emptyCategories();\n    }\n\n    if (ax._initialCategories) {\n      for (var j = 0; j < ax._initialCategories.length; j++) {\n        setCategoryIndex(ax._initialCategories[j]);\n      }\n    }\n  }; // sort the axis (and all the matching ones) by _initialCategories\n  // returns the indices of the traces affected by the reordering\n\n\n  ax.sortByInitialCategories = function () {\n    var affectedTraces = [];\n\n    var emptyCategories = function emptyCategories() {\n      ax._categories = [];\n      ax._categoriesMap = {};\n    };\n\n    emptyCategories();\n\n    if (ax._initialCategories) {\n      for (var j = 0; j < ax._initialCategories.length; j++) {\n        setCategoryIndex(ax._initialCategories[j]);\n      }\n    }\n\n    affectedTraces = affectedTraces.concat(ax._traceIndices); // Propagate to matching axes\n\n    var group = ax._matchGroup;\n\n    for (var axId2 in group) {\n      if (axId === axId2) continue;\n      var ax2 = fullLayout[axisIds.id2name(axId2)];\n      ax2._categories = ax._categories;\n      ax2._categoriesMap = ax._categoriesMap;\n      affectedTraces = affectedTraces.concat(ax2._traceIndices);\n    }\n\n    return affectedTraces;\n  }; // Propagate localization into the axis so that\n  // methods in Axes can use it w/o having to pass fullLayout\n  // Default (non-d3) number formatting uses separators directly\n  // dates and d3-formatted numbers use the d3 locale\n  // Fall back on default format for dummy axes that don't care about formatting\n\n\n  var locale = fullLayout._d3locale;\n\n  if (ax.type === 'date') {\n    ax._dateFormat = locale ? locale.timeFormat.utc : d3.time.format.utc;\n    ax._extraFormat = fullLayout._extraFormat;\n  } // occasionally we need _numFormat to pass through\n  // even though it won't be needed by this axis\n\n\n  ax._separators = fullLayout.separators;\n  ax._numFormat = locale ? locale.numberFormat : d3.format; // and for bar charts and box plots: reset forced minimum tick spacing\n\n  delete ax._minDtick;\n  delete ax._forceTick0;\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/cartesian/set_convert.js"],"names":["d3","require","isNumeric","Lib","cleanNumber","ms2DateTime","dateTime2ms","ensureNumber","isArrayOrTypedArray","numConstants","FP_SAFE","BADNUM","LOG_CLIP","constants","axisIds","fromLog","v","Math","pow","isValidCategory","undefined","module","exports","setConvert","ax","fullLayout","axId","_id","axLetter","charAt","toLog","clip","log","LN10","range","length","r0","r1","abs","dt2ms","_","calendar","ms","msecTenths","floor","mod","msRounded","round","Date","ms2dt","r","getCategoryName","_categories","setCategoryIndex","_categoriesMap","push","String","curLength","setMultiCategoryIndex","arrayIn","len","arrayOut","Array","i","v0","v1","getCategoryIndex","getCategoryPosition","index","l2p","_b","_m","p2l","px","c2l","type","l2c","c2p","p2c","indexOf","d2r","r2d","d2c","r2c","d2l","r2l","c2d","c2r","l2d","l2r","d2p","r2p","p2d","p2r","cleanPos","identity","cleanDate","d2l_noadd","fraction2r","r2c_just_indices","isArray","setupMultiCategory","fullData","traceIndices","_traceIndices","j","matchGroups","_axisMatchGroups","group","axId2","ax2","id2name","concat","seen","list","trace","_length","minRowLength","sort","a","b","ind0","d","ind1","rl0","rl1","r2fraction","cleanRange","rangeAttr","opts","nestedProperty","get","dflt","dfltRange","DFLTRANGEY","DFLTRANGEX","slice","rangemode","set","autorange","isDateTime","linCenter","constrain","MIN_MS","MAX_MS","inc","max","setScale","usePrivateRange","gs","_size","overlaying","getFromId","_fullLayout","domain","_r","_offset","t","h","l","w","isFinite","_replotting","Error","makeCalcdata","axType","cal","isTypedArray","subarray","dv","Number","x","y","isValidRange","isPtWithinRange","coord","clearCalc","emptyCategories","found","categories","categoriesMap","_initialCategories","sortByInitialCategories","affectedTraces","_matchGroup","locale","_d3locale","_dateFormat","timeFormat","utc","time","format","_extraFormat","_separators","separators","_numFormat","numberFormat","_minDtick","_forceTick0"],"mappings":"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","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n'use strict';\n\nvar d3 = require('d3');\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar cleanNumber = Lib.cleanNumber;\nvar ms2DateTime = Lib.ms2DateTime;\nvar dateTime2ms = Lib.dateTime2ms;\nvar ensureNumber = Lib.ensureNumber;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\n\nvar numConstants = require('../../constants/numerical');\nvar FP_SAFE = numConstants.FP_SAFE;\nvar BADNUM = numConstants.BADNUM;\nvar LOG_CLIP = numConstants.LOG_CLIP;\n\nvar constants = require('./constants');\nvar axisIds = require('./axis_ids');\n\nfunction fromLog(v) {\n    return Math.pow(10, v);\n}\n\nfunction isValidCategory(v) {\n    return v !== null && v !== undefined;\n}\n\n/**\n * Define the conversion functions for an axis data is used in 5 ways:\n *\n *  d: data, in whatever form it's provided\n *  c: calcdata: turned into numbers, but not linearized\n *  l: linearized - same as c except for log axes (and other nonlinear\n *      mappings later?) this is used when we need to know if it's\n *      *possible* to show some data on this axis, without caring about\n *      the current range\n *  p: pixel value - mapped to the screen with current size and zoom\n *  r: ranges, tick0, and annotation positions match one of the above\n *     but are handled differently for different types:\n *     - linear and date: data format (d)\n *     - category: calcdata format (c), and will stay that way because\n *       the data format has no continuous mapping\n *     - log: linearized (l) format\n *       TODO: in v2.0 we plan to change it to data format. At that point\n *       shapes will work the same way as ranges, tick0, and annotations\n *       so they can use this conversion too.\n *\n * Creates/updates these conversion functions, and a few more utilities\n * like cleanRange, and makeCalcdata\n *\n * also clears the autotick constraints ._minDtick, ._forceTick0\n */\nmodule.exports = function setConvert(ax, fullLayout) {\n    fullLayout = fullLayout || {};\n\n    var axId = (ax._id || 'x');\n    var axLetter = axId.charAt(0);\n\n    function toLog(v, clip) {\n        if(v > 0) return Math.log(v) / Math.LN10;\n\n        else if(v <= 0 && clip && ax.range && ax.range.length === 2) {\n            // clip NaN (ie past negative infinity) to LOG_CLIP axis\n            // length past the negative edge\n            var r0 = ax.range[0];\n            var r1 = ax.range[1];\n            return 0.5 * (r0 + r1 - 2 * LOG_CLIP * Math.abs(r0 - r1));\n        } else return BADNUM;\n    }\n\n    /*\n     * wrapped dateTime2ms that:\n     * - accepts ms numbers for backward compatibility\n     * - inserts a dummy arg so calendar is the 3rd arg (see notes below).\n     * - defaults to ax.calendar\n     */\n    function dt2ms(v, _, calendar) {\n        // NOTE: Changed this behavior: previously we took any numeric value\n        // to be a ms, even if it was a string that could be a bare year.\n        // Now we convert it as a date if at all possible, and only try\n        // as (local) ms if that fails.\n        var ms = dateTime2ms(v, calendar || ax.calendar);\n        if(ms === BADNUM) {\n            if(isNumeric(v)) {\n                v = +v;\n                // keep track of tenths of ms, that `new Date` will drop\n                // same logic as in Lib.ms2DateTime\n                var msecTenths = Math.floor(Lib.mod(v + 0.05, 1) * 10);\n                var msRounded = Math.round(v - msecTenths / 10);\n                ms = dateTime2ms(new Date(msRounded)) + msecTenths / 10;\n            } else return BADNUM;\n        }\n        return ms;\n    }\n\n    // wrapped ms2DateTime to insert default ax.calendar\n    function ms2dt(v, r, calendar) {\n        return ms2DateTime(v, r, calendar || ax.calendar);\n    }\n\n    function getCategoryName(v) {\n        return ax._categories[Math.round(v)];\n    }\n\n    /*\n     * setCategoryIndex: return the index of category v,\n     * inserting it in the list if it's not already there\n     *\n     * this will enter the categories in the order it\n     * encounters them, ie all the categories from the\n     * first data set, then all the ones from the second\n     * that aren't in the first etc.\n     *\n     * it is assumed that this function is being invoked in the\n     * already sorted category order; otherwise there would be\n     * a disconnect between the array and the index returned\n     */\n    function setCategoryIndex(v) {\n        if(isValidCategory(v)) {\n            if(ax._categoriesMap === undefined) {\n                ax._categoriesMap = {};\n            }\n\n            if(ax._categoriesMap[v] !== undefined) {\n                return ax._categoriesMap[v];\n            } else {\n                ax._categories.push(typeof v === 'number' ? String(v) : v);\n\n                var curLength = ax._categories.length - 1;\n                ax._categoriesMap[v] = curLength;\n\n                return curLength;\n            }\n        }\n        return BADNUM;\n    }\n\n    function setMultiCategoryIndex(arrayIn, len) {\n        var arrayOut = new Array(len);\n\n        for(var i = 0; i < len; i++) {\n            var v0 = (arrayIn[0] || [])[i];\n            var v1 = (arrayIn[1] || [])[i];\n            arrayOut[i] = getCategoryIndex([v0, v1]);\n        }\n\n        return arrayOut;\n    }\n\n    function getCategoryIndex(v) {\n        if(ax._categoriesMap) {\n            return ax._categoriesMap[v];\n        }\n    }\n\n    function getCategoryPosition(v) {\n        // d2l/d2c variant that that won't add categories but will also\n        // allow numbers to be mapped to the linearized axis positions\n        var index = getCategoryIndex(v);\n        if(index !== undefined) return index;\n        if(isNumeric(v)) return +v;\n    }\n\n    function l2p(v) {\n        if(!isNumeric(v)) return BADNUM;\n\n        // include 2 fractional digits on pixel, for PDF zooming etc\n        return d3.round(ax._b + ax._m * v, 2);\n    }\n\n    function p2l(px) { return (px - ax._b) / ax._m; }\n\n    // conversions among c/l/p are fairly simple - do them together for all axis types\n    ax.c2l = (ax.type === 'log') ? toLog : ensureNumber;\n    ax.l2c = (ax.type === 'log') ? fromLog : ensureNumber;\n\n    ax.l2p = l2p;\n    ax.p2l = p2l;\n\n    ax.c2p = (ax.type === 'log') ? function(v, clip) { return l2p(toLog(v, clip)); } : l2p;\n    ax.p2c = (ax.type === 'log') ? function(px) { return fromLog(p2l(px)); } : p2l;\n\n    /*\n     * now type-specific conversions for **ALL** other combinations\n     * they're all written out, instead of being combinations of each other, for\n     * both clarity and speed.\n     */\n    if(['linear', '-'].indexOf(ax.type) !== -1) {\n        // all are data vals, but d and r need cleaning\n        ax.d2r = ax.r2d = ax.d2c = ax.r2c = ax.d2l = ax.r2l = cleanNumber;\n        ax.c2d = ax.c2r = ax.l2d = ax.l2r = ensureNumber;\n\n        ax.d2p = ax.r2p = function(v) { return ax.l2p(cleanNumber(v)); };\n        ax.p2d = ax.p2r = p2l;\n\n        ax.cleanPos = ensureNumber;\n    } else if(ax.type === 'log') {\n        // d and c are data vals, r and l are logged (but d and r need cleaning)\n        ax.d2r = ax.d2l = function(v, clip) { return toLog(cleanNumber(v), clip); };\n        ax.r2d = ax.r2c = function(v) { return fromLog(cleanNumber(v)); };\n\n        ax.d2c = ax.r2l = cleanNumber;\n        ax.c2d = ax.l2r = ensureNumber;\n\n        ax.c2r = toLog;\n        ax.l2d = fromLog;\n\n        ax.d2p = function(v, clip) { return ax.l2p(ax.d2r(v, clip)); };\n        ax.p2d = function(px) { return fromLog(p2l(px)); };\n\n        ax.r2p = function(v) { return ax.l2p(cleanNumber(v)); };\n        ax.p2r = p2l;\n\n        ax.cleanPos = ensureNumber;\n    } else if(ax.type === 'date') {\n        // r and d are date strings, l and c are ms\n\n        /*\n         * Any of these functions with r and d on either side, calendar is the\n         * **3rd** argument. log has reserved the second argument.\n         *\n         * Unless you need the special behavior of the second arg (ms2DateTime\n         * uses this to limit precision, toLog uses true to clip negatives\n         * to offscreen low rather than undefined), it's safe to pass 0.\n         */\n        ax.d2r = ax.r2d = Lib.identity;\n\n        ax.d2c = ax.r2c = ax.d2l = ax.r2l = dt2ms;\n        ax.c2d = ax.c2r = ax.l2d = ax.l2r = ms2dt;\n\n        ax.d2p = ax.r2p = function(v, _, calendar) { return ax.l2p(dt2ms(v, 0, calendar)); };\n        ax.p2d = ax.p2r = function(px, r, calendar) { return ms2dt(p2l(px), r, calendar); };\n\n        ax.cleanPos = function(v) { return Lib.cleanDate(v, BADNUM, ax.calendar); };\n    } else if(ax.type === 'category') {\n        // d is categories (string)\n        // c and l are indices (numbers)\n        // r is categories or numbers\n\n        ax.d2c = ax.d2l = setCategoryIndex;\n        ax.r2d = ax.c2d = ax.l2d = getCategoryName;\n\n        ax.d2r = ax.d2l_noadd = getCategoryPosition;\n\n        ax.r2c = function(v) {\n            var index = getCategoryPosition(v);\n            return index !== undefined ? index : ax.fraction2r(0.5);\n        };\n\n        ax.l2r = ax.c2r = ensureNumber;\n        ax.r2l = getCategoryPosition;\n\n        ax.d2p = function(v) { return ax.l2p(ax.r2c(v)); };\n        ax.p2d = function(px) { return getCategoryName(p2l(px)); };\n        ax.r2p = ax.d2p;\n        ax.p2r = p2l;\n\n        ax.cleanPos = function(v) {\n            if(typeof v === 'string' && v !== '') return v;\n            return ensureNumber(v);\n        };\n    } else if(ax.type === 'multicategory') {\n        // N.B. multicategory axes don't define d2c and d2l,\n        // as 'data-to-calcdata' conversion needs to take into\n        // account all data array items as in ax.makeCalcdata.\n\n        ax.r2d = ax.c2d = ax.l2d = getCategoryName;\n        ax.d2r = ax.d2l_noadd = getCategoryPosition;\n\n        ax.r2c = function(v) {\n            var index = getCategoryPosition(v);\n            return index !== undefined ? index : ax.fraction2r(0.5);\n        };\n\n        ax.r2c_just_indices = getCategoryIndex;\n\n        ax.l2r = ax.c2r = ensureNumber;\n        ax.r2l = getCategoryPosition;\n\n        ax.d2p = function(v) { return ax.l2p(ax.r2c(v)); };\n        ax.p2d = function(px) { return getCategoryName(p2l(px)); };\n        ax.r2p = ax.d2p;\n        ax.p2r = p2l;\n\n        ax.cleanPos = function(v) {\n            if(Array.isArray(v) || (typeof v === 'string' && v !== '')) return v;\n            return ensureNumber(v);\n        };\n\n        ax.setupMultiCategory = function(fullData) {\n            var traceIndices = ax._traceIndices;\n            var i, j;\n\n            var matchGroups = fullLayout._axisMatchGroups;\n            if(matchGroups && matchGroups.length && ax._categories.length === 0) {\n                for(i = 0; i < matchGroups.length; i++) {\n                    var group = matchGroups[i];\n                    if(group[axId]) {\n                        for(var axId2 in group) {\n                            if(axId2 !== axId) {\n                                var ax2 = fullLayout[axisIds.id2name(axId2)];\n                                traceIndices = traceIndices.concat(ax2._traceIndices);\n                            }\n                        }\n                    }\n                }\n            }\n\n            // [ [cnt, {$cat: index}], for 1,2 ]\n            var seen = [[0, {}], [0, {}]];\n            // [ [arrayIn[0][i], arrayIn[1][i]], for i .. N ]\n            var list = [];\n\n            for(i = 0; i < traceIndices.length; i++) {\n                var trace = fullData[traceIndices[i]];\n\n                if(axLetter in trace) {\n                    var arrayIn = trace[axLetter];\n                    var len = trace._length || Lib.minRowLength(arrayIn);\n\n                    if(isArrayOrTypedArray(arrayIn[0]) && isArrayOrTypedArray(arrayIn[1])) {\n                        for(j = 0; j < len; j++) {\n                            var v0 = arrayIn[0][j];\n                            var v1 = arrayIn[1][j];\n\n                            if(isValidCategory(v0) && isValidCategory(v1)) {\n                                list.push([v0, v1]);\n\n                                if(!(v0 in seen[0][1])) {\n                                    seen[0][1][v0] = seen[0][0]++;\n                                }\n                                if(!(v1 in seen[1][1])) {\n                                    seen[1][1][v1] = seen[1][0]++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            list.sort(function(a, b) {\n                var ind0 = seen[0][1];\n                var d = ind0[a[0]] - ind0[b[0]];\n                if(d) return d;\n\n                var ind1 = seen[1][1];\n                return ind1[a[1]] - ind1[b[1]];\n            });\n\n            for(i = 0; i < list.length; i++) {\n                setCategoryIndex(list[i]);\n            }\n        };\n    }\n\n    // find the range value at the specified (linear) fraction of the axis\n    ax.fraction2r = function(v) {\n        var rl0 = ax.r2l(ax.range[0]);\n        var rl1 = ax.r2l(ax.range[1]);\n        return ax.l2r(rl0 + v * (rl1 - rl0));\n    };\n\n    // find the fraction of the range at the specified range value\n    ax.r2fraction = function(v) {\n        var rl0 = ax.r2l(ax.range[0]);\n        var rl1 = ax.r2l(ax.range[1]);\n        return (ax.r2l(v) - rl0) / (rl1 - rl0);\n    };\n\n    /*\n     * cleanRange: make sure range is a couplet of valid & distinct values\n     * keep numbers away from the limits of floating point numbers,\n     * and dates away from the ends of our date system (+/- 9999 years)\n     *\n     * optional param rangeAttr: operate on a different attribute, like\n     * ax._r, rather than ax.range\n     */\n    ax.cleanRange = function(rangeAttr, opts) {\n        if(!opts) opts = {};\n        if(!rangeAttr) rangeAttr = 'range';\n\n        var range = Lib.nestedProperty(ax, rangeAttr).get();\n        var i, dflt;\n\n        if(ax.type === 'date') dflt = Lib.dfltRange(ax.calendar);\n        else if(axLetter === 'y') dflt = constants.DFLTRANGEY;\n        else dflt = opts.dfltRange || constants.DFLTRANGEX;\n\n        // make sure we don't later mutate the defaults\n        dflt = dflt.slice();\n\n        if(ax.rangemode === 'tozero' || ax.rangemode === 'nonnegative') {\n            dflt[0] = 0;\n        }\n\n        if(!range || range.length !== 2) {\n            Lib.nestedProperty(ax, rangeAttr).set(dflt);\n            return;\n        }\n\n        if(ax.type === 'date' && !ax.autorange) {\n            // check if milliseconds or js date objects are provided for range\n            // and convert to date strings\n            range[0] = Lib.cleanDate(range[0], BADNUM, ax.calendar);\n            range[1] = Lib.cleanDate(range[1], BADNUM, ax.calendar);\n        }\n\n        for(i = 0; i < 2; i++) {\n            if(ax.type === 'date') {\n                if(!Lib.isDateTime(range[i], ax.calendar)) {\n                    ax[rangeAttr] = dflt;\n                    break;\n                }\n\n                if(ax.r2l(range[0]) === ax.r2l(range[1])) {\n                    // split by +/- 1 second\n                    var linCenter = Lib.constrain(ax.r2l(range[0]),\n                        Lib.MIN_MS + 1000, Lib.MAX_MS - 1000);\n                    range[0] = ax.l2r(linCenter - 1000);\n                    range[1] = ax.l2r(linCenter + 1000);\n                    break;\n                }\n            } else {\n                if(!isNumeric(range[i])) {\n                    if(isNumeric(range[1 - i])) {\n                        range[i] = range[1 - i] * (i ? 10 : 0.1);\n                    } else {\n                        ax[rangeAttr] = dflt;\n                        break;\n                    }\n                }\n\n                if(range[i] < -FP_SAFE) range[i] = -FP_SAFE;\n                else if(range[i] > FP_SAFE) range[i] = FP_SAFE;\n\n                if(range[0] === range[1]) {\n                    // somewhat arbitrary: split by 1 or 1ppm, whichever is bigger\n                    var inc = Math.max(1, Math.abs(range[0] * 1e-6));\n                    range[0] -= inc;\n                    range[1] += inc;\n                }\n            }\n        }\n    };\n\n    // set scaling to pixels\n    ax.setScale = function(usePrivateRange) {\n        var gs = fullLayout._size;\n\n        // make sure we have a domain (pull it in from the axis\n        // this one is overlaying if necessary)\n        if(ax.overlaying) {\n            var ax2 = axisIds.getFromId({ _fullLayout: fullLayout }, ax.overlaying);\n            ax.domain = ax2.domain;\n        }\n\n        // While transitions are occuring, occurring, we get a double-transform\n        // issue if we transform the drawn layer *and* use the new axis range to\n        // draw the data. This allows us to construct setConvert using the pre-\n        // interaction values of the range:\n        var rangeAttr = (usePrivateRange && ax._r) ? '_r' : 'range';\n        var calendar = ax.calendar;\n        ax.cleanRange(rangeAttr);\n\n        var rl0 = ax.r2l(ax[rangeAttr][0], calendar);\n        var rl1 = ax.r2l(ax[rangeAttr][1], calendar);\n\n        if(axLetter === 'y') {\n            ax._offset = gs.t + (1 - ax.domain[1]) * gs.h;\n            ax._length = gs.h * (ax.domain[1] - ax.domain[0]);\n            ax._m = ax._length / (rl0 - rl1);\n            ax._b = -ax._m * rl1;\n        } else {\n            ax._offset = gs.l + ax.domain[0] * gs.w;\n            ax._length = gs.w * (ax.domain[1] - ax.domain[0]);\n            ax._m = ax._length / (rl1 - rl0);\n            ax._b = -ax._m * rl0;\n        }\n\n        if(!isFinite(ax._m) || !isFinite(ax._b) || ax._length < 0) {\n            fullLayout._replotting = false;\n            throw new Error('Something went wrong with axis scaling');\n        }\n    };\n\n    // makeCalcdata: takes an x or y array and converts it\n    // to a position on the axis object \"ax\"\n    // inputs:\n    //      trace - a data object from gd.data\n    //      axLetter - a string, either 'x' or 'y', for which item\n    //          to convert (TODO: is this now always the same as\n    //          the first letter of ax._id?)\n    // in case the expected data isn't there, make a list of\n    // integers based on the opposite data\n    ax.makeCalcdata = function(trace, axLetter) {\n        var arrayIn, arrayOut, i, len;\n\n        var axType = ax.type;\n        var cal = axType === 'date' && trace[axLetter + 'calendar'];\n\n        if(axLetter in trace) {\n            arrayIn = trace[axLetter];\n            len = trace._length || Lib.minRowLength(arrayIn);\n\n            if(Lib.isTypedArray(arrayIn) && (axType === 'linear' || axType === 'log')) {\n                if(len === arrayIn.length) {\n                    return arrayIn;\n                } else if(arrayIn.subarray) {\n                    return arrayIn.subarray(0, len);\n                }\n            }\n\n            if(axType === 'multicategory') {\n                return setMultiCategoryIndex(arrayIn, len);\n            }\n\n            arrayOut = new Array(len);\n            for(i = 0; i < len; i++) {\n                arrayOut[i] = ax.d2c(arrayIn[i], 0, cal);\n            }\n        } else {\n            var v0 = ((axLetter + '0') in trace) ? ax.d2c(trace[axLetter + '0'], 0, cal) : 0;\n            var dv = (trace['d' + axLetter]) ? Number(trace['d' + axLetter]) : 1;\n\n            // the opposing data, for size if we have x and dx etc\n            arrayIn = trace[{x: 'y', y: 'x'}[axLetter]];\n            len = trace._length || arrayIn.length;\n            arrayOut = new Array(len);\n\n            for(i = 0; i < len; i++) {\n                arrayOut[i] = v0 + i * dv;\n            }\n        }\n\n        return arrayOut;\n    };\n\n    ax.isValidRange = function(range) {\n        return (\n            Array.isArray(range) &&\n            range.length === 2 &&\n            isNumeric(ax.r2l(range[0])) &&\n            isNumeric(ax.r2l(range[1]))\n        );\n    };\n\n    ax.isPtWithinRange = function(d, calendar) {\n        var coord = ax.c2l(d[axLetter], null, calendar);\n        var r0 = ax.r2l(ax.range[0]);\n        var r1 = ax.r2l(ax.range[1]);\n\n        if(r0 < r1) {\n            return r0 <= coord && coord <= r1;\n        } else {\n            // Reversed axis case.\n            return r1 <= coord && coord <= r0;\n        }\n    };\n\n    // should skip if not category nor multicategory\n    ax.clearCalc = function() {\n        var emptyCategories = function() {\n            ax._categories = [];\n            ax._categoriesMap = {};\n        };\n\n        var matchGroups = fullLayout._axisMatchGroups;\n\n        if(matchGroups && matchGroups.length) {\n            var found = false;\n\n            for(var i = 0; i < matchGroups.length; i++) {\n                var group = matchGroups[i];\n\n                if(group[axId]) {\n                    found = true;\n                    var categories = null;\n                    var categoriesMap = null;\n\n                    for(var axId2 in group) {\n                        var ax2 = fullLayout[axisIds.id2name(axId2)];\n                        if(ax2._categories) {\n                            categories = ax2._categories;\n                            categoriesMap = ax2._categoriesMap;\n                            break;\n                        }\n                    }\n\n                    if(categories && categoriesMap) {\n                        ax._categories = categories;\n                        ax._categoriesMap = categoriesMap;\n                    } else {\n                        emptyCategories();\n                    }\n                    break;\n                }\n            }\n            if(!found) emptyCategories();\n        } else {\n            emptyCategories();\n        }\n\n        if(ax._initialCategories) {\n            for(var j = 0; j < ax._initialCategories.length; j++) {\n                setCategoryIndex(ax._initialCategories[j]);\n            }\n        }\n    };\n\n    // sort the axis (and all the matching ones) by _initialCategories\n    // returns the indices of the traces affected by the reordering\n    ax.sortByInitialCategories = function() {\n        var affectedTraces = [];\n        var emptyCategories = function() {\n            ax._categories = [];\n            ax._categoriesMap = {};\n        };\n\n        emptyCategories();\n\n        if(ax._initialCategories) {\n            for(var j = 0; j < ax._initialCategories.length; j++) {\n                setCategoryIndex(ax._initialCategories[j]);\n            }\n        }\n\n        affectedTraces = affectedTraces.concat(ax._traceIndices);\n\n        // Propagate to matching axes\n        var group = ax._matchGroup;\n        for(var axId2 in group) {\n            if(axId === axId2) continue;\n            var ax2 = fullLayout[axisIds.id2name(axId2)];\n            ax2._categories = ax._categories;\n            ax2._categoriesMap = ax._categoriesMap;\n            affectedTraces = affectedTraces.concat(ax2._traceIndices);\n        }\n        return affectedTraces;\n    };\n\n    // Propagate localization into the axis so that\n    // methods in Axes can use it w/o having to pass fullLayout\n    // Default (non-d3) number formatting uses separators directly\n    // dates and d3-formatted numbers use the d3 locale\n    // Fall back on default format for dummy axes that don't care about formatting\n    var locale = fullLayout._d3locale;\n    if(ax.type === 'date') {\n        ax._dateFormat = locale ? locale.timeFormat.utc : d3.time.format.utc;\n        ax._extraFormat = fullLayout._extraFormat;\n    }\n    // occasionally we need _numFormat to pass through\n    // even though it won't be needed by this axis\n    ax._separators = fullLayout.separators;\n    ax._numFormat = locale ? locale.numberFormat : d3.format;\n\n    // and for bar charts and box plots: reset forced minimum tick spacing\n    delete ax._minDtick;\n    delete ax._forceTick0;\n};\n"]},"metadata":{},"sourceType":"script"}