{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar handleSubplotDefaults = require('../subplot_defaults');\n\nvar constants = require('./constants');\n\nvar layoutAttributes = require('./layout_attributes');\n\nvar axesNames = constants.axesNames;\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: 'geo',\n    attributes: layoutAttributes,\n    handleDefaults: handleGeoDefaults,\n    partition: 'y'\n  });\n};\n\nfunction handleGeoDefaults(geoLayoutIn, geoLayoutOut, coerce) {\n  var show;\n  var resolution = coerce('resolution');\n  var scope = coerce('scope');\n  var scopeParams = constants.scopeDefaults[scope];\n  var projType = coerce('projection.type', scopeParams.projType);\n  var isAlbersUsa = geoLayoutOut._isAlbersUsa = projType === 'albers usa'; // no other scopes are allowed for 'albers usa' projection\n\n  if (isAlbersUsa) scope = geoLayoutOut.scope = 'usa';\n  var isScoped = geoLayoutOut._isScoped = scope !== 'world';\n  var isConic = geoLayoutOut._isConic = projType.indexOf('conic') !== -1;\n  geoLayoutOut._isClipped = !!constants.lonaxisSpan[projType];\n\n  for (var i = 0; i < axesNames.length; i++) {\n    var axisName = axesNames[i];\n    var dtickDflt = [30, 10][i];\n    var rangeDflt;\n\n    if (isScoped) {\n      rangeDflt = scopeParams[axisName + 'Range'];\n    } else {\n      var dfltSpans = constants[axisName + 'Span'];\n      var hSpan = (dfltSpans[projType] || dfltSpans['*']) / 2;\n      var rot = coerce('projection.rotation.' + axisName.substr(0, 3), scopeParams.projRotate[i]);\n      rangeDflt = [rot - hSpan, rot + hSpan];\n    }\n\n    coerce(axisName + '.range', rangeDflt);\n    coerce(axisName + '.tick0');\n    coerce(axisName + '.dtick', dtickDflt);\n    show = coerce(axisName + '.showgrid');\n\n    if (show) {\n      coerce(axisName + '.gridcolor');\n      coerce(axisName + '.gridwidth');\n    }\n  }\n\n  var lonRange = geoLayoutOut.lonaxis.range;\n  var latRange = geoLayoutOut.lataxis.range; // to cross antimeridian w/o ambiguity\n\n  var lon0 = lonRange[0];\n  var lon1 = lonRange[1];\n  if (lon0 > 0 && lon1 < 0) lon1 += 360;\n  var centerLon = (lon0 + lon1) / 2;\n  var projLon;\n\n  if (!isAlbersUsa) {\n    var dfltProjRotate = isScoped ? scopeParams.projRotate : [centerLon, 0, 0];\n    projLon = coerce('projection.rotation.lon', dfltProjRotate[0]);\n    coerce('projection.rotation.lat', dfltProjRotate[1]);\n    coerce('projection.rotation.roll', dfltProjRotate[2]);\n    show = coerce('showcoastlines', !isScoped);\n\n    if (show) {\n      coerce('coastlinecolor');\n      coerce('coastlinewidth');\n    }\n\n    show = coerce('showocean');\n    if (show) coerce('oceancolor');\n  }\n\n  var centerLonDflt;\n  var centerLatDflt;\n\n  if (isAlbersUsa) {\n    // 'albers usa' does not have a 'center',\n    // these values were found using via:\n    //   projection.invert([geoLayout.center.lon, geoLayoutIn.center.lat])\n    centerLonDflt = -96.6;\n    centerLatDflt = 38.7;\n  } else {\n    centerLonDflt = isScoped ? centerLon : projLon;\n    centerLatDflt = (latRange[0] + latRange[1]) / 2;\n  }\n\n  coerce('center.lon', centerLonDflt);\n  coerce('center.lat', centerLatDflt);\n\n  if (isConic) {\n    var dfltProjParallels = scopeParams.projParallels || [0, 60];\n    coerce('projection.parallels', dfltProjParallels);\n  }\n\n  coerce('projection.scale');\n  show = coerce('showland');\n  if (show) coerce('landcolor');\n  show = coerce('showlakes');\n  if (show) coerce('lakecolor');\n  show = coerce('showrivers');\n\n  if (show) {\n    coerce('rivercolor');\n    coerce('riverwidth');\n  }\n\n  show = coerce('showcountries', isScoped && scope !== 'usa');\n\n  if (show) {\n    coerce('countrycolor');\n    coerce('countrywidth');\n  }\n\n  if (scope === 'usa' || scope === 'north america' && resolution === 50) {\n    // Only works for:\n    //   USA states at 110m\n    //   USA states + Canada provinces at 50m\n    coerce('showsubunits', true);\n    coerce('subunitcolor');\n    coerce('subunitwidth');\n  }\n\n  if (!isScoped) {\n    // Does not work in non-world scopes\n    show = coerce('showframe', true);\n\n    if (show) {\n      coerce('framecolor');\n      coerce('framewidth');\n    }\n  }\n\n  coerce('bgcolor');\n}","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/plotly.js/src/plots/geo/layout_defaults.js"],"names":["handleSubplotDefaults","require","constants","layoutAttributes","axesNames","module","exports","supplyLayoutDefaults","layoutIn","layoutOut","fullData","type","attributes","handleDefaults","handleGeoDefaults","partition","geoLayoutIn","geoLayoutOut","coerce","show","resolution","scope","scopeParams","scopeDefaults","projType","isAlbersUsa","_isAlbersUsa","isScoped","_isScoped","isConic","_isConic","indexOf","_isClipped","lonaxisSpan","i","length","axisName","dtickDflt","rangeDflt","dfltSpans","hSpan","rot","substr","projRotate","lonRange","lonaxis","range","latRange","lataxis","lon0","lon1","centerLon","projLon","dfltProjRotate","centerLonDflt","centerLatDflt","dfltProjParallels","projParallels"],"mappings":"AAAA;;;;;;;AASA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,qBAAD,CAAnC;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,qBAAD,CAA9B;;AAEA,IAAIG,SAAS,GAAGF,SAAS,CAACE,SAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,SAAxC,EAAmDC,QAAnD,EAA6D;AAC1EV,EAAAA,qBAAqB,CAACQ,QAAD,EAAWC,SAAX,EAAsBC,QAAtB,EAAgC;AACjDC,IAAAA,IAAI,EAAE,KAD2C;AAEjDC,IAAAA,UAAU,EAAET,gBAFqC;AAGjDU,IAAAA,cAAc,EAAEC,iBAHiC;AAIjDC,IAAAA,SAAS,EAAE;AAJsC,GAAhC,CAArB;AAMH,CAPD;;AASA,SAASD,iBAAT,CAA2BE,WAA3B,EAAwCC,YAAxC,EAAsDC,MAAtD,EAA8D;AAC1D,MAAIC,IAAJ;AAEA,MAAIC,UAAU,GAAGF,MAAM,CAAC,YAAD,CAAvB;AACA,MAAIG,KAAK,GAAGH,MAAM,CAAC,OAAD,CAAlB;AACA,MAAII,WAAW,GAAGpB,SAAS,CAACqB,aAAV,CAAwBF,KAAxB,CAAlB;AAEA,MAAIG,QAAQ,GAAGN,MAAM,CAAC,iBAAD,EAAoBI,WAAW,CAACE,QAAhC,CAArB;AACA,MAAIC,WAAW,GAAGR,YAAY,CAACS,YAAb,GAA4BF,QAAQ,KAAK,YAA3D,CAR0D,CAU1D;;AACA,MAAGC,WAAH,EAAgBJ,KAAK,GAAGJ,YAAY,CAACI,KAAb,GAAqB,KAA7B;AAEhB,MAAIM,QAAQ,GAAGV,YAAY,CAACW,SAAb,GAA0BP,KAAK,KAAK,OAAnD;AACA,MAAIQ,OAAO,GAAGZ,YAAY,CAACa,QAAb,GAAwBN,QAAQ,CAACO,OAAT,CAAiB,OAAjB,MAA8B,CAAC,CAArE;AACAd,EAAAA,YAAY,CAACe,UAAb,GAA0B,CAAC,CAAC9B,SAAS,CAAC+B,WAAV,CAAsBT,QAAtB,CAA5B;;AAEA,OAAI,IAAIU,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG9B,SAAS,CAAC+B,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAIE,QAAQ,GAAGhC,SAAS,CAAC8B,CAAD,CAAxB;AACA,QAAIG,SAAS,GAAG,CAAC,EAAD,EAAK,EAAL,EAASH,CAAT,CAAhB;AACA,QAAII,SAAJ;;AAEA,QAAGX,QAAH,EAAa;AACTW,MAAAA,SAAS,GAAGhB,WAAW,CAACc,QAAQ,GAAG,OAAZ,CAAvB;AACH,KAFD,MAEO;AACH,UAAIG,SAAS,GAAGrC,SAAS,CAACkC,QAAQ,GAAG,MAAZ,CAAzB;AACA,UAAII,KAAK,GAAG,CAACD,SAAS,CAACf,QAAD,CAAT,IAAuBe,SAAS,CAAC,GAAD,CAAjC,IAA0C,CAAtD;AACA,UAAIE,GAAG,GAAGvB,MAAM,CACZ,yBAAyBkB,QAAQ,CAACM,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,CADb,EAEZpB,WAAW,CAACqB,UAAZ,CAAuBT,CAAvB,CAFY,CAAhB;AAIAI,MAAAA,SAAS,GAAG,CAACG,GAAG,GAAGD,KAAP,EAAcC,GAAG,GAAGD,KAApB,CAAZ;AACH;;AAEDtB,IAAAA,MAAM,CAACkB,QAAQ,GAAG,QAAZ,EAAsBE,SAAtB,CAAN;AACApB,IAAAA,MAAM,CAACkB,QAAQ,GAAG,QAAZ,CAAN;AACAlB,IAAAA,MAAM,CAACkB,QAAQ,GAAG,QAAZ,EAAsBC,SAAtB,CAAN;AAEAlB,IAAAA,IAAI,GAAGD,MAAM,CAACkB,QAAQ,GAAG,WAAZ,CAAb;;AACA,QAAGjB,IAAH,EAAS;AACLD,MAAAA,MAAM,CAACkB,QAAQ,GAAG,YAAZ,CAAN;AACAlB,MAAAA,MAAM,CAACkB,QAAQ,GAAG,YAAZ,CAAN;AACH;AACJ;;AAED,MAAIQ,QAAQ,GAAG3B,YAAY,CAAC4B,OAAb,CAAqBC,KAApC;AACA,MAAIC,QAAQ,GAAG9B,YAAY,CAAC+B,OAAb,CAAqBF,KAApC,CA9C0D,CAgD1D;;AACA,MAAIG,IAAI,GAAGL,QAAQ,CAAC,CAAD,CAAnB;AACA,MAAIM,IAAI,GAAGN,QAAQ,CAAC,CAAD,CAAnB;AACA,MAAGK,IAAI,GAAG,CAAP,IAAYC,IAAI,GAAG,CAAtB,EAAyBA,IAAI,IAAI,GAAR;AAEzB,MAAIC,SAAS,GAAG,CAACF,IAAI,GAAGC,IAAR,IAAgB,CAAhC;AACA,MAAIE,OAAJ;;AAEA,MAAG,CAAC3B,WAAJ,EAAiB;AACb,QAAI4B,cAAc,GAAG1B,QAAQ,GAAGL,WAAW,CAACqB,UAAf,GAA4B,CAACQ,SAAD,EAAY,CAAZ,EAAe,CAAf,CAAzD;AAEAC,IAAAA,OAAO,GAAGlC,MAAM,CAAC,yBAAD,EAA4BmC,cAAc,CAAC,CAAD,CAA1C,CAAhB;AACAnC,IAAAA,MAAM,CAAC,yBAAD,EAA4BmC,cAAc,CAAC,CAAD,CAA1C,CAAN;AACAnC,IAAAA,MAAM,CAAC,0BAAD,EAA6BmC,cAAc,CAAC,CAAD,CAA3C,CAAN;AAEAlC,IAAAA,IAAI,GAAGD,MAAM,CAAC,gBAAD,EAAmB,CAACS,QAApB,CAAb;;AACA,QAAGR,IAAH,EAAS;AACLD,MAAAA,MAAM,CAAC,gBAAD,CAAN;AACAA,MAAAA,MAAM,CAAC,gBAAD,CAAN;AACH;;AAEDC,IAAAA,IAAI,GAAGD,MAAM,CAAC,WAAD,CAAb;AACA,QAAGC,IAAH,EAASD,MAAM,CAAC,YAAD,CAAN;AACZ;;AAED,MAAIoC,aAAJ;AACA,MAAIC,aAAJ;;AAEA,MAAG9B,WAAH,EAAgB;AACZ;AACA;AACA;AACA6B,IAAAA,aAAa,GAAG,CAAC,IAAjB;AACAC,IAAAA,aAAa,GAAG,IAAhB;AACH,GAND,MAMO;AACHD,IAAAA,aAAa,GAAG3B,QAAQ,GAAGwB,SAAH,GAAeC,OAAvC;AACAG,IAAAA,aAAa,GAAG,CAACR,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAAvB,IAA8B,CAA9C;AACH;;AAED7B,EAAAA,MAAM,CAAC,YAAD,EAAeoC,aAAf,CAAN;AACApC,EAAAA,MAAM,CAAC,YAAD,EAAeqC,aAAf,CAAN;;AAEA,MAAG1B,OAAH,EAAY;AACR,QAAI2B,iBAAiB,GAAGlC,WAAW,CAACmC,aAAZ,IAA6B,CAAC,CAAD,EAAI,EAAJ,CAArD;AACAvC,IAAAA,MAAM,CAAC,sBAAD,EAAyBsC,iBAAzB,CAAN;AACH;;AAEDtC,EAAAA,MAAM,CAAC,kBAAD,CAAN;AAEAC,EAAAA,IAAI,GAAGD,MAAM,CAAC,UAAD,CAAb;AACA,MAAGC,IAAH,EAASD,MAAM,CAAC,WAAD,CAAN;AAETC,EAAAA,IAAI,GAAGD,MAAM,CAAC,WAAD,CAAb;AACA,MAAGC,IAAH,EAASD,MAAM,CAAC,WAAD,CAAN;AAETC,EAAAA,IAAI,GAAGD,MAAM,CAAC,YAAD,CAAb;;AACA,MAAGC,IAAH,EAAS;AACLD,IAAAA,MAAM,CAAC,YAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,YAAD,CAAN;AACH;;AAEDC,EAAAA,IAAI,GAAGD,MAAM,CAAC,eAAD,EAAkBS,QAAQ,IAAIN,KAAK,KAAK,KAAxC,CAAb;;AACA,MAAGF,IAAH,EAAS;AACLD,IAAAA,MAAM,CAAC,cAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,cAAD,CAAN;AACH;;AAED,MAAGG,KAAK,KAAK,KAAV,IAAoBA,KAAK,KAAK,eAAV,IAA6BD,UAAU,KAAK,EAAnE,EAAwE;AACpE;AACA;AACA;AACAF,IAAAA,MAAM,CAAC,cAAD,EAAiB,IAAjB,CAAN;AACAA,IAAAA,MAAM,CAAC,cAAD,CAAN;AACAA,IAAAA,MAAM,CAAC,cAAD,CAAN;AACH;;AAED,MAAG,CAACS,QAAJ,EAAc;AACV;AACAR,IAAAA,IAAI,GAAGD,MAAM,CAAC,WAAD,EAAc,IAAd,CAAb;;AACA,QAAGC,IAAH,EAAS;AACLD,MAAAA,MAAM,CAAC,YAAD,CAAN;AACAA,MAAAA,MAAM,CAAC,YAAD,CAAN;AACH;AACJ;;AAEDA,EAAAA,MAAM,CAAC,SAAD,CAAN;AACH","sourcesContent":["/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n\n\n'use strict';\n\nvar handleSubplotDefaults = require('../subplot_defaults');\nvar constants = require('./constants');\nvar layoutAttributes = require('./layout_attributes');\n\nvar axesNames = constants.axesNames;\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: 'geo',\n        attributes: layoutAttributes,\n        handleDefaults: handleGeoDefaults,\n        partition: 'y'\n    });\n};\n\nfunction handleGeoDefaults(geoLayoutIn, geoLayoutOut, coerce) {\n    var show;\n\n    var resolution = coerce('resolution');\n    var scope = coerce('scope');\n    var scopeParams = constants.scopeDefaults[scope];\n\n    var projType = coerce('projection.type', scopeParams.projType);\n    var isAlbersUsa = geoLayoutOut._isAlbersUsa = projType === 'albers usa';\n\n    // no other scopes are allowed for 'albers usa' projection\n    if(isAlbersUsa) scope = geoLayoutOut.scope = 'usa';\n\n    var isScoped = geoLayoutOut._isScoped = (scope !== 'world');\n    var isConic = geoLayoutOut._isConic = projType.indexOf('conic') !== -1;\n    geoLayoutOut._isClipped = !!constants.lonaxisSpan[projType];\n\n    for(var i = 0; i < axesNames.length; i++) {\n        var axisName = axesNames[i];\n        var dtickDflt = [30, 10][i];\n        var rangeDflt;\n\n        if(isScoped) {\n            rangeDflt = scopeParams[axisName + 'Range'];\n        } else {\n            var dfltSpans = constants[axisName + 'Span'];\n            var hSpan = (dfltSpans[projType] || dfltSpans['*']) / 2;\n            var rot = coerce(\n                'projection.rotation.' + axisName.substr(0, 3),\n                scopeParams.projRotate[i]\n            );\n            rangeDflt = [rot - hSpan, rot + hSpan];\n        }\n\n        coerce(axisName + '.range', rangeDflt);\n        coerce(axisName + '.tick0');\n        coerce(axisName + '.dtick', dtickDflt);\n\n        show = coerce(axisName + '.showgrid');\n        if(show) {\n            coerce(axisName + '.gridcolor');\n            coerce(axisName + '.gridwidth');\n        }\n    }\n\n    var lonRange = geoLayoutOut.lonaxis.range;\n    var latRange = geoLayoutOut.lataxis.range;\n\n    // to cross antimeridian w/o ambiguity\n    var lon0 = lonRange[0];\n    var lon1 = lonRange[1];\n    if(lon0 > 0 && lon1 < 0) lon1 += 360;\n\n    var centerLon = (lon0 + lon1) / 2;\n    var projLon;\n\n    if(!isAlbersUsa) {\n        var dfltProjRotate = isScoped ? scopeParams.projRotate : [centerLon, 0, 0];\n\n        projLon = coerce('projection.rotation.lon', dfltProjRotate[0]);\n        coerce('projection.rotation.lat', dfltProjRotate[1]);\n        coerce('projection.rotation.roll', dfltProjRotate[2]);\n\n        show = coerce('showcoastlines', !isScoped);\n        if(show) {\n            coerce('coastlinecolor');\n            coerce('coastlinewidth');\n        }\n\n        show = coerce('showocean');\n        if(show) coerce('oceancolor');\n    }\n\n    var centerLonDflt;\n    var centerLatDflt;\n\n    if(isAlbersUsa) {\n        // 'albers usa' does not have a 'center',\n        // these values were found using via:\n        //   projection.invert([geoLayout.center.lon, geoLayoutIn.center.lat])\n        centerLonDflt = -96.6;\n        centerLatDflt = 38.7;\n    } else {\n        centerLonDflt = isScoped ? centerLon : projLon;\n        centerLatDflt = (latRange[0] + latRange[1]) / 2;\n    }\n\n    coerce('center.lon', centerLonDflt);\n    coerce('center.lat', centerLatDflt);\n\n    if(isConic) {\n        var dfltProjParallels = scopeParams.projParallels || [0, 60];\n        coerce('projection.parallels', dfltProjParallels);\n    }\n\n    coerce('projection.scale');\n\n    show = coerce('showland');\n    if(show) coerce('landcolor');\n\n    show = coerce('showlakes');\n    if(show) coerce('lakecolor');\n\n    show = coerce('showrivers');\n    if(show) {\n        coerce('rivercolor');\n        coerce('riverwidth');\n    }\n\n    show = coerce('showcountries', isScoped && scope !== 'usa');\n    if(show) {\n        coerce('countrycolor');\n        coerce('countrywidth');\n    }\n\n    if(scope === 'usa' || (scope === 'north america' && resolution === 50)) {\n        // Only works for:\n        //   USA states at 110m\n        //   USA states + Canada provinces at 50m\n        coerce('showsubunits', true);\n        coerce('subunitcolor');\n        coerce('subunitwidth');\n    }\n\n    if(!isScoped) {\n        // Does not work in non-world scopes\n        show = coerce('showframe', true);\n        if(show) {\n            coerce('framecolor');\n            coerce('framewidth');\n        }\n    }\n\n    coerce('bgcolor');\n}\n"]},"metadata":{},"sourceType":"script"}