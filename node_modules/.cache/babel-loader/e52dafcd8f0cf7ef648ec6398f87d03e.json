{"ast":null,"code":"/**\n* Copyright 2012-2019, Plotly, Inc.\n* All rights reserved.\n*\n* This source code is licensed under the MIT license found in the\n* LICENSE file in the root directory of this source tree.\n*/\n'use strict';\n\nvar Lib = require('../../lib'); // look for either subplot or xaxis and yaxis attributes\n// does not handle splom case\n\n\nexports.getSubplot = function getSubplot(trace) {\n  return trace.subplot || trace.xaxis + trace.yaxis || trace.geo;\n}; // is trace in given list of subplots?\n// does handle splom case\n\n\nexports.isTraceInSubplots = function isTraceInSubplots(trace, subplots) {\n  if (trace.type === 'splom') {\n    var xaxes = trace.xaxes || [];\n    var yaxes = trace.yaxes || [];\n\n    for (var i = 0; i < xaxes.length; i++) {\n      for (var j = 0; j < yaxes.length; j++) {\n        if (subplots.indexOf(xaxes[i] + yaxes[j]) !== -1) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return subplots.indexOf(exports.getSubplot(trace)) !== -1;\n}; // convenience functions for mapping all relevant axes\n\n\nexports.flat = function flat(subplots, v) {\n  var out = new Array(subplots.length);\n\n  for (var i = 0; i < subplots.length; i++) {\n    out[i] = v;\n  }\n\n  return out;\n};\n\nexports.p2c = function p2c(axArray, v) {\n  var out = new Array(axArray.length);\n\n  for (var i = 0; i < axArray.length; i++) {\n    out[i] = axArray[i].p2c(v);\n  }\n\n  return out;\n};\n\nexports.getDistanceFunction = function getDistanceFunction(mode, dx, dy, dxy) {\n  if (mode === 'closest') return dxy || exports.quadrature(dx, dy);\n  return mode === 'x' ? dx : dy;\n};\n\nexports.getClosest = function getClosest(cd, distfn, pointData) {\n  // do we already have a point number? (array mode only)\n  if (pointData.index !== false) {\n    if (pointData.index >= 0 && pointData.index < cd.length) {\n      pointData.distance = 0;\n    } else pointData.index = false;\n  } else {\n    // apply the distance function to each data point\n    // this is the longest loop... if this bogs down, we may need\n    // to create pre-sorted data (by x or y), not sure how to\n    // do this for 'closest'\n    for (var i = 0; i < cd.length; i++) {\n      var newDistance = distfn(cd[i]);\n\n      if (newDistance <= pointData.distance) {\n        pointData.index = i;\n        pointData.distance = newDistance;\n      }\n    }\n  }\n\n  return pointData;\n};\n/*\n * pseudo-distance function for hover effects on areas: inside the region\n * distance is finite (`passVal`), outside it's Infinity.\n *\n * @param {number} v0: signed difference between the current position and the left edge\n * @param {number} v1: signed difference between the current position and the right edge\n * @param {number} passVal: the value to return on success\n */\n\n\nexports.inbox = function inbox(v0, v1, passVal) {\n  return v0 * v1 < 0 || v0 === 0 ? passVal : Infinity;\n};\n\nexports.quadrature = function quadrature(dx, dy) {\n  return function (di) {\n    var x = dx(di);\n    var y = dy(di);\n    return Math.sqrt(x * x + y * y);\n  };\n};\n/** Fill event data point object for hover and selection.\n *  Invokes _module.eventData if present.\n *\n * N.B. note that point 'index' corresponds to input data array index\n *  whereas 'number' is its post-transform version.\n *\n * If the hovered/selected pt corresponds to an multiple input points\n * (e.g. for histogram and transformed traces), 'pointNumbers` and 'pointIndices'\n * are include in the event data.\n *\n * @param {object} pt\n * @param {object} trace\n * @param {object} cd\n * @return {object}\n */\n\n\nexports.makeEventData = function makeEventData(pt, trace, cd) {\n  // hover uses 'index', select uses 'pointNumber'\n  var pointNumber = 'index' in pt ? pt.index : pt.pointNumber;\n  var out = {\n    data: trace._input,\n    fullData: trace,\n    curveNumber: trace.index,\n    pointNumber: pointNumber\n  };\n\n  if (trace._indexToPoints) {\n    var pointIndices = trace._indexToPoints[pointNumber];\n\n    if (pointIndices.length === 1) {\n      out.pointIndex = pointIndices[0];\n    } else {\n      out.pointIndices = pointIndices;\n    }\n  } else {\n    out.pointIndex = pointNumber;\n  }\n\n  if (trace._module.eventData) {\n    out = trace._module.eventData(out, pt, trace, cd, pointNumber);\n  } else {\n    if ('xVal' in pt) out.x = pt.xVal;else if ('x' in pt) out.x = pt.x;\n    if ('yVal' in pt) out.y = pt.yVal;else if ('y' in pt) out.y = pt.y;\n    if (pt.xa) out.xaxis = pt.xa;\n    if (pt.ya) out.yaxis = pt.ya;\n    if (pt.zLabelVal !== undefined) out.z = pt.zLabelVal;\n  }\n\n  exports.appendArrayPointValue(out, trace, pointNumber);\n  return out;\n};\n/** Appends values inside array attributes corresponding to given point number\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {number|Array(number)} pointNumber : point number. May be a length-2 array\n *     [row, col] to dig into 2D arrays\n */\n\n\nexports.appendArrayPointValue = function (pointData, trace, pointNumber) {\n  var arrayAttrs = trace._arrayAttrs;\n\n  if (!arrayAttrs) {\n    return;\n  }\n\n  for (var i = 0; i < arrayAttrs.length; i++) {\n    var astr = arrayAttrs[i];\n    var key = getPointKey(astr);\n\n    if (pointData[key] === undefined) {\n      var val = Lib.nestedProperty(trace, astr).get();\n      var pointVal = getPointData(val, pointNumber);\n      if (pointVal !== undefined) pointData[key] = pointVal;\n    }\n  }\n};\n/**\n * Appends values inside array attributes corresponding to given point number array\n * For use when pointData references a plot entity that arose (or potentially arose)\n * from multiple points in the input data\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {Array(number)|Array(Array(number))} pointNumbers : Array of point numbers.\n *     Each entry in the array may itself be a length-2 array [row, col] to dig into 2D arrays\n */\n\n\nexports.appendArrayMultiPointValues = function (pointData, trace, pointNumbers) {\n  var arrayAttrs = trace._arrayAttrs;\n\n  if (!arrayAttrs) {\n    return;\n  }\n\n  for (var i = 0; i < arrayAttrs.length; i++) {\n    var astr = arrayAttrs[i];\n    var key = getPointKey(astr);\n\n    if (pointData[key] === undefined) {\n      var val = Lib.nestedProperty(trace, astr).get();\n      var keyVal = new Array(pointNumbers.length);\n\n      for (var j = 0; j < pointNumbers.length; j++) {\n        keyVal[j] = getPointData(val, pointNumbers[j]);\n      }\n\n      pointData[key] = keyVal;\n    }\n  }\n};\n\nvar pointKeyMap = {\n  ids: 'id',\n  locations: 'location',\n  labels: 'label',\n  values: 'value',\n  'marker.colors': 'color',\n  parents: 'parent'\n};\n\nfunction getPointKey(astr) {\n  return pointKeyMap[astr] || astr;\n}\n\nfunction getPointData(val, pointNumber) {\n  if (Array.isArray(pointNumber)) {\n    if (Array.isArray(val) && Array.isArray(val[pointNumber[0]])) {\n      return val[pointNumber[0]][pointNumber[1]];\n    }\n  } else {\n    return val[pointNumber];\n  }\n}","map":null,"metadata":{},"sourceType":"script"}