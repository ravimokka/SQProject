{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.init = function (jQuery) {\n  if (typeof jQuery.fn.multiselect !== \"undefined\") return jQuery;\n  /**\n   * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\n   *\n   * Apache License, Version 2.0:\n   * Copyright (c) 2012 - 2015 David Stutz\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n   * use this file except in compliance with the License. You may obtain a\n   * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n   * License for the specific language governing permissions and limitations\n   * under the License.\n   *\n   * BSD 3-Clause License:\n   * Copyright (c) 2012 - 2015 David Stutz\n   * All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without\n   * modification, are permitted provided that the following conditions are met:\n   *    - Redistributions of source code must retain the above copyright notice,\n   *      this list of conditions and the following disclaimer.\n   *    - Redistributions in binary form must reproduce the above copyright notice,\n   *      this list of conditions and the following disclaimer in the documentation\n   *      and/or other materials provided with the distribution.\n   *    - Neither the name of David Stutz nor the names of its contributors may be\n   *      used to endorse or promote products derived from this software without\n   *      specific prior written permission.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n   * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n   * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n   * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n   * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   */\n\n  !function ($) {\n    \"use strict\"; // jshint ;_;\n\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\n      ko.bindingHandlers.multiselect = {\n        after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\n        init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n          var $element = $(element);\n          var config = ko.toJS(valueAccessor());\n          $element.multiselect(config);\n\n          if (allBindings.has('options')) {\n            var options = allBindings.get('options');\n\n            if (ko.isObservable(options)) {\n              ko.computed({\n                read: function read() {\n                  options();\n                  setTimeout(function () {\n                    var ms = $element.data('multiselect');\n                    if (ms) ms.updateOriginalOptions(); //Not sure how beneficial this is.\n\n                    $element.multiselect('rebuild');\n                  }, 1);\n                },\n                disposeWhenNodeIsRemoved: element\n              });\n            }\n          } //value and selectedOptions are two-way, so these will be triggered even by our own actions.\n          //It needs some way to tell if they are triggered because of us or because of outside change.\n          //It doesn't loop but it's a waste of processing.\n\n\n          if (allBindings.has('value')) {\n            var value = allBindings.get('value');\n\n            if (ko.isObservable(value)) {\n              ko.computed({\n                read: function read() {\n                  value();\n                  setTimeout(function () {\n                    $element.multiselect('refresh');\n                  }, 1);\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            }\n          } //Switched from arrayChange subscription to general subscription using 'refresh'.\n          //Not sure performance is any better using 'select' and 'deselect'.\n\n\n          if (allBindings.has('selectedOptions')) {\n            var selectedOptions = allBindings.get('selectedOptions');\n\n            if (ko.isObservable(selectedOptions)) {\n              ko.computed({\n                read: function read() {\n                  selectedOptions();\n                  setTimeout(function () {\n                    $element.multiselect('refresh');\n                  }, 1);\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            }\n          }\n\n          var setEnabled = function setEnabled(enable) {\n            setTimeout(function () {\n              if (enable) $element.multiselect('enable');else $element.multiselect('disable');\n            });\n          };\n\n          if (allBindings.has('enable')) {\n            var enable = allBindings.get('enable');\n\n            if (ko.isObservable(enable)) {\n              ko.computed({\n                read: function read() {\n                  setEnabled(enable());\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            } else {\n              setEnabled(enable);\n            }\n          }\n\n          if (allBindings.has('disable')) {\n            var disable = allBindings.get('disable');\n\n            if (ko.isObservable(disable)) {\n              ko.computed({\n                read: function read() {\n                  setEnabled(!disable());\n                },\n                disposeWhenNodeIsRemoved: element\n              }).extend({\n                rateLimit: 100,\n                notifyWhenChangesStop: true\n              });\n            } else {\n              setEnabled(!disable);\n            }\n          }\n\n          ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n            $element.multiselect('destroy');\n          });\n        },\n        update: function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n          var $element = $(element);\n          var config = ko.toJS(valueAccessor());\n          $element.multiselect('setOptions', config);\n          $element.multiselect('rebuild');\n        }\n      };\n    }\n\n    function forEach(array, callback) {\n      for (var index = 0; index < array.length; ++index) {\n        callback(array[index], index);\n      }\n    }\n    /**\n     * Constructor to create a new multiselect using the given select.\n     *\n     * @param {jQuery} select\n     * @param {Object} options\n     * @returns {Multiselect}\n     */\n\n\n    function Multiselect(select, options) {\n      this.$select = $(select);\n      this.options = this.mergeOptions($.extend({}, options, this.$select.data())); // Placeholder via data attributes\n\n      if (this.$select.attr(\"data-placeholder\")) {\n        this.options.nonSelectedText = this.$select.data(\"placeholder\");\n      } // Initialization.\n      // We have to clone to create a new reference.\n\n\n      this.originalOptions = this.$select.clone()[0].options;\n      this.query = '';\n      this.searchTimeout = null;\n      this.lastToggledInput = null;\n      this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n      this.options.onChange = $.proxy(this.options.onChange, this);\n      this.options.onSelectAll = $.proxy(this.options.onSelectAll, this);\n      this.options.onDeselectAll = $.proxy(this.options.onDeselectAll, this);\n      this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\n      this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\n      this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\n      this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\n      this.options.onInitialized = $.proxy(this.options.onInitialized, this);\n      this.options.onFiltering = $.proxy(this.options.onFiltering, this); // Build select all if enabled.\n\n      this.buildContainer();\n      this.buildButton();\n      this.buildDropdown();\n      this.buildSelectAll();\n      this.buildDropdownOptions();\n      this.buildFilter();\n      this.updateButtonText();\n      this.updateSelectAll(true);\n\n      if (this.options.enableClickableOptGroups && this.options.multiple) {\n        this.updateOptGroups();\n      }\n\n      this.options.wasDisabled = this.$select.prop('disabled');\n\n      if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n        this.disable();\n      }\n\n      this.$select.wrap('<span class=\"multiselect-native-select\" />').after(this.$container);\n      this.options.onInitialized(this.$select, this.$container);\n    }\n\n    Multiselect.prototype = {\n      defaults: {\n        /**\n         * Default text function will either print 'None selected' in case no\n         * option is selected or a list of the selected options up to a length\n         * of 3 selected options.\n         *\n         * @param {jQuery} options\n         * @param {jQuery} select\n         * @returns {String}\n         */\n        buttonText: function buttonText(options, select) {\n          if (this.disabledText.length > 0 && (select.prop('disabled') || options.length == 0 && this.disableIfEmpty)) {\n            return this.disabledText;\n          } else if (options.length === 0) {\n            return this.nonSelectedText;\n          } else if (this.allSelectedText && options.length === $('option', $(select)).length && $('option', $(select)).length !== 1 && this.multiple) {\n            if (this.selectAllNumber) {\n              return this.allSelectedText + ' (' + options.length + ')';\n            } else {\n              return this.allSelectedText;\n            }\n          } else if (options.length > this.numberDisplayed) {\n            return options.length + ' ' + this.nSelectedText;\n          } else {\n            var selected = '';\n            var delimiter = this.delimiterText;\n            options.each(function () {\n              var label = $(this).attr('label') !== undefined ? $(this).attr('label') : $(this).text();\n              selected += label + delimiter;\n            });\n            return selected.substr(0, selected.length - this.delimiterText.length);\n          }\n        },\n\n        /**\n         * Updates the title of the button similar to the buttonText function.\n         *\n         * @param {jQuery} options\n         * @param {jQuery} select\n         * @returns {@exp;selected@call;substr}\n         */\n        buttonTitle: function buttonTitle(options, select) {\n          if (options.length === 0) {\n            return this.nonSelectedText;\n          } else {\n            var selected = '';\n            var delimiter = this.delimiterText;\n            options.each(function () {\n              var label = $(this).attr('label') !== undefined ? $(this).attr('label') : $(this).text();\n              selected += label + delimiter;\n            });\n            return selected.substr(0, selected.length - this.delimiterText.length);\n          }\n        },\n        checkboxName: function checkboxName(option) {\n          return false; // no checkbox name\n        },\n\n        /**\n         * Create a label.\n         *\n         * @param {jQuery} element\n         * @returns {String}\n         */\n        optionLabel: function optionLabel(element) {\n          return $(element).attr('label') || $(element).text();\n        },\n\n        /**\n         * Create a class.\n         *\n         * @param {jQuery} element\n         * @returns {String}\n         */\n        optionClass: function optionClass(element) {\n          return $(element).attr('class') || '';\n        },\n\n        /**\n         * Triggered on change of the multiselect.\n         *\n         * Not triggered when selecting/deselecting options manually.\n         *\n         * @param {jQuery} option\n         * @param {Boolean} checked\n         */\n        onChange: function onChange(option, checked) {},\n\n        /**\n         * Triggered when the dropdown is shown.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownShow: function onDropdownShow(event) {},\n\n        /**\n         * Triggered when the dropdown is hidden.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownHide: function onDropdownHide(event) {},\n\n        /**\n         * Triggered after the dropdown is shown.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownShown: function onDropdownShown(event) {},\n\n        /**\n         * Triggered after the dropdown is hidden.\n         *\n         * @param {jQuery} event\n         */\n        onDropdownHidden: function onDropdownHidden(event) {},\n\n        /**\n         * Triggered on select all.\n         */\n        onSelectAll: function onSelectAll() {},\n\n        /**\n         * Triggered on deselect all.\n         */\n        onDeselectAll: function onDeselectAll() {},\n\n        /**\n         * Triggered after initializing.\n         *\n         * @param {jQuery} $select\n         * @param {jQuery} $container\n         */\n        onInitialized: function onInitialized($select, $container) {},\n\n        /**\n         * Triggered on filtering.\n         *\n         * @param {jQuery} $filter\n         */\n        onFiltering: function onFiltering($filter) {},\n        enableHTML: false,\n        buttonClass: 'btn btn-default',\n        inheritClass: false,\n        buttonWidth: 'auto',\n        buttonContainer: '<div class=\"btn-group\" />',\n        dropRight: false,\n        dropUp: false,\n        selectedClass: 'active',\n        // Maximum height of the dropdown menu.\n        // If maximum height is exceeded a scrollbar will be displayed.\n        maxHeight: false,\n        includeSelectAllOption: false,\n        includeSelectAllIfMoreThan: 0,\n        selectAllText: ' Select all',\n        selectAllValue: 'multiselect-all',\n        selectAllName: false,\n        selectAllNumber: true,\n        selectAllJustVisible: true,\n        enableFiltering: false,\n        enableCaseInsensitiveFiltering: false,\n        enableFullValueFiltering: false,\n        enableClickableOptGroups: false,\n        enableCollapsibleOptGroups: false,\n        filterPlaceholder: 'Search',\n        // possible options: 'text', 'value', 'both'\n        filterBehavior: 'text',\n        includeFilterClearBtn: true,\n        preventInputChangeEvent: false,\n        nonSelectedText: 'None selected',\n        nSelectedText: 'selected',\n        allSelectedText: 'All selected',\n        numberDisplayed: 3,\n        disableIfEmpty: false,\n        disabledText: '',\n        delimiterText: ', ',\n        templates: {\n          button: '<button type=\"button\" class=\"multiselect dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span> <b class=\"caret\"></b></button>',\n          ul: '<ul class=\"multiselect-container dropdown-menu\"></ul>',\n          filter: '<li class=\"multiselect-item multiselect-filter\"><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\n          filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"glyphicon glyphicon-remove-circle\"></i></button></span>',\n          li: '<li><a tabindex=\"0\"><label></label></a></li>',\n          divider: '<li class=\"multiselect-item divider\"></li>',\n          liGroup: '<li class=\"multiselect-item multiselect-group\"><label></label></li>'\n        }\n      },\n      constructor: Multiselect,\n\n      /**\n       * Builds the container of the multiselect.\n       */\n      buildContainer: function buildContainer() {\n        this.$container = $(this.options.buttonContainer);\n        this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\n        this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\n        this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\n        this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\n      },\n\n      /**\n       * Builds the button of the multiselect.\n       */\n      buildButton: function buildButton() {\n        this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\n\n        if (this.$select.attr('class') && this.options.inheritClass) {\n          this.$button.addClass(this.$select.attr('class'));\n        } // Adopt active state.\n\n\n        if (this.$select.prop('disabled')) {\n          this.disable();\n        } else {\n          this.enable();\n        } // Manually add button width if set.\n\n\n        if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\n          this.$button.css({\n            'width': '100%',\n            //this.options.buttonWidth,\n            'overflow': 'hidden',\n            'text-overflow': 'ellipsis'\n          });\n          this.$container.css({\n            'width': this.options.buttonWidth\n          });\n        } // Keep the tab index from the select.\n\n\n        var tabindex = this.$select.attr('tabindex');\n\n        if (tabindex) {\n          this.$button.attr('tabindex', tabindex);\n        }\n\n        this.$container.prepend(this.$button);\n      },\n\n      /**\n       * Builds the ul representing the dropdown menu.\n       */\n      buildDropdown: function buildDropdown() {\n        // Build ul.\n        this.$ul = $(this.options.templates.ul);\n\n        if (this.options.dropRight) {\n          this.$ul.addClass('pull-right');\n        } // Set max height of dropdown menu to activate auto scrollbar.\n\n\n        if (this.options.maxHeight) {\n          // TODO: Add a class for this option to move the css declarations.\n          this.$ul.css({\n            'max-height': this.options.maxHeight + 'px',\n            'overflow-y': 'auto',\n            'overflow-x': 'hidden'\n          });\n        }\n\n        if (this.options.dropUp) {\n          var height = Math.min(this.options.maxHeight, $('option[data-role!=\"divider\"]', this.$select).length * 26 + $('option[data-role=\"divider\"]', this.$select).length * 19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));\n          var moveCalc = height + 34;\n          this.$ul.css({\n            'max-height': height + 'px',\n            'overflow-y': 'auto',\n            'overflow-x': 'hidden',\n            'margin-top': \"-\" + moveCalc + 'px'\n          });\n        }\n\n        this.$container.append(this.$ul);\n      },\n\n      /**\n       * Build the dropdown options and binds all necessary events.\n       *\n       * Uses createDivider and createOptionValue to create the necessary options.\n       */\n      buildDropdownOptions: function buildDropdownOptions() {\n        this.$select.children().each($.proxy(function (index, element) {\n          var $element = $(element); // Support optgroups and options without a group simultaneously.\n\n          var tag = $element.prop('tagName').toLowerCase();\n\n          if ($element.prop('value') === this.options.selectAllValue) {\n            return;\n          }\n\n          if (tag === 'optgroup') {\n            this.createOptgroup(element);\n          } else if (tag === 'option') {\n            if ($element.data('role') === 'divider') {\n              this.createDivider();\n            } else {\n              this.createOptionValue(element);\n            }\n          } // Other illegal tags will be ignored.\n\n        }, this)); // Bind the change event on the dropdown elements.\n\n        $('li:not(.multiselect-group) input', this.$ul).on('change', $.proxy(function (event) {\n          var $target = $(event.target);\n          var checked = $target.prop('checked') || false;\n          var isSelectAllOption = $target.val() === this.options.selectAllValue; // Apply or unapply the configured selected class.\n\n          if (this.options.selectedClass) {\n            if (checked) {\n              $target.closest('li').addClass(this.options.selectedClass);\n            } else {\n              $target.closest('li').removeClass(this.options.selectedClass);\n            }\n          } // Get the corresponding option.\n\n\n          var value = $target.val();\n          var $option = this.getOptionByValue(value);\n          var $optionsNotThis = $('option', this.$select).not($option);\n          var $checkboxesNotThis = $('input', this.$container).not($target);\n\n          if (isSelectAllOption) {\n            if (checked) {\n              this.selectAll(this.options.selectAllJustVisible, true);\n            } else {\n              this.deselectAll(this.options.selectAllJustVisible, true);\n            }\n          } else {\n            if (checked) {\n              $option.prop('selected', true);\n\n              if (this.options.multiple) {\n                // Simply select additional option.\n                $option.prop('selected', true);\n              } else {\n                // Unselect all other options and corresponding checkboxes.\n                if (this.options.selectedClass) {\n                  $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\n                }\n\n                $($checkboxesNotThis).prop('checked', false);\n                $optionsNotThis.prop('selected', false); // It's a single selection, so close.\n\n                this.$button.click();\n              }\n\n              if (this.options.selectedClass === \"active\") {\n                $optionsNotThis.closest(\"a\").css(\"outline\", \"\");\n              }\n            } else {\n              // Unselect option.\n              $option.prop('selected', false);\n            } // To prevent select all from firing onChange: #575\n\n\n            this.options.onChange($option, checked); // Do not update select all or optgroups on select all change!\n\n            this.updateSelectAll();\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n              this.updateOptGroups();\n            }\n          }\n\n          this.$select.change();\n          this.updateButtonText();\n\n          if (this.options.preventInputChangeEvent) {\n            return false;\n          }\n        }, this));\n        $('li a', this.$ul).on('mousedown', function (e) {\n          if (e.shiftKey) {\n            // Prevent selecting text by Shift+click\n            return false;\n          }\n        });\n        $('li a', this.$ul).on('touchstart click', $.proxy(function (event) {\n          event.stopPropagation();\n          var $target = $(event.target);\n\n          if (event.shiftKey && this.options.multiple) {\n            if ($target.is(\"label\")) {\n              // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\n              event.preventDefault();\n              $target = $target.find(\"input\");\n              $target.prop(\"checked\", !$target.prop(\"checked\"));\n            }\n\n            var checked = $target.prop('checked') || false;\n\n            if (this.lastToggledInput !== null && this.lastToggledInput !== $target) {\n              // Make sure we actually have a range\n              var from = $target.closest(\"li\").index();\n              var to = this.lastToggledInput.closest(\"li\").index();\n\n              if (from > to) {\n                // Swap the indices\n                var tmp = to;\n                to = from;\n                from = tmp;\n              } // Make sure we grab all elements since slice excludes the last index\n\n\n              ++to; // Change the checkboxes and underlying options\n\n              var range = this.$ul.find(\"li\").slice(from, to).find(\"input\");\n              range.prop('checked', checked);\n\n              if (this.options.selectedClass) {\n                range.closest('li').toggleClass(this.options.selectedClass, checked);\n              }\n\n              for (var i = 0, j = range.length; i < j; i++) {\n                var $checkbox = $(range[i]);\n                var $option = this.getOptionByValue($checkbox.val());\n                $option.prop('selected', checked);\n              }\n            } // Trigger the select \"change\" event\n\n\n            $target.trigger(\"change\");\n          } // Remembers last clicked option\n\n\n          if ($target.is(\"input\") && !$target.closest(\"li\").is(\".multiselect-item\")) {\n            this.lastToggledInput = $target;\n          }\n\n          $target.blur();\n        }, this)); // Keyboard support.\n\n        this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function (event) {\n          if ($('input[type=\"text\"]', this.$container).is(':focus')) {\n            return;\n          }\n\n          if (event.keyCode === 9 && this.$container.hasClass('open')) {\n            this.$button.click();\n          } else {\n            var $items = $(this.$container).find(\"li:not(.divider):not(.disabled) a\").filter(\":visible\");\n\n            if (!$items.length) {\n              return;\n            }\n\n            var index = $items.index($items.filter(':focus')); // Navigation up.\n\n            if (event.keyCode === 38 && index > 0) {\n              index--;\n            } // Navigate down.\n            else if (event.keyCode === 40 && index < $items.length - 1) {\n                index++;\n              } else if (!~index) {\n                index = 0;\n              }\n\n            var $current = $items.eq(index);\n            $current.focus();\n\n            if (event.keyCode === 32 || event.keyCode === 13) {\n              var $checkbox = $current.find('input');\n              $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\n              $checkbox.change();\n            }\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        }, this));\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          $(\"li.multiselect-group input\", this.$ul).on(\"change\", $.proxy(function (event) {\n            event.stopPropagation();\n            var $target = $(event.target);\n            var checked = $target.prop('checked') || false;\n            var $li = $(event.target).closest('li');\n            var $group = $li.nextUntil(\"li.multiselect-group\").not('.multiselect-filter-hidden').not('.disabled');\n            var $inputs = $group.find(\"input\");\n            var values = [];\n            var $options = [];\n\n            if (this.options.selectedClass) {\n              if (checked) {\n                $li.addClass(this.options.selectedClass);\n              } else {\n                $li.removeClass(this.options.selectedClass);\n              }\n            }\n\n            $.each($inputs, $.proxy(function (index, input) {\n              var value = $(input).val();\n              var $option = this.getOptionByValue(value);\n\n              if (checked) {\n                $(input).prop('checked', true);\n                $(input).closest('li').addClass(this.options.selectedClass);\n                $option.prop('selected', true);\n              } else {\n                $(input).prop('checked', false);\n                $(input).closest('li').removeClass(this.options.selectedClass);\n                $option.prop('selected', false);\n              }\n\n              $options.push(this.getOptionByValue(value));\n            }, this)); // Cannot use select or deselect here because it would call updateOptGroups again.\n\n            this.options.onChange($options, checked);\n            this.updateButtonText();\n            this.updateSelectAll();\n          }, this));\n        }\n\n        if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n          $(\"li.multiselect-group .caret-container\", this.$ul).on(\"click\", $.proxy(function (event) {\n            var $li = $(event.target).closest('li');\n            var $inputs = $li.nextUntil(\"li.multiselect-group\").not('.multiselect-filter-hidden');\n            var visible = true;\n            $inputs.each(function () {\n              visible = visible && $(this).is(':visible');\n            });\n\n            if (visible) {\n              $inputs.hide().addClass('multiselect-collapsible-hidden');\n            } else {\n              $inputs.show().removeClass('multiselect-collapsible-hidden');\n            }\n          }, this));\n          $(\"li.multiselect-all\", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');\n          $(\"li.multiselect-all > a > label.checkbox\", this.$ul).css('padding', '3px 20px 3px 35px');\n          $(\"li.multiselect-group > a > input\", this.$ul).css('margin', '4px 0px 5px -20px');\n        }\n      },\n\n      /**\n       * Create an option using the given select option.\n       *\n       * @param {jQuery} element\n       */\n      createOptionValue: function createOptionValue(element) {\n        var $element = $(element);\n\n        if ($element.is(':selected')) {\n          $element.prop('selected', true);\n        } // Support the label attribute on options.\n\n\n        var label = this.options.optionLabel(element);\n        var classes = this.options.optionClass(element);\n        var value = $element.val();\n        var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\n        var $li = $(this.options.templates.li);\n        var $label = $('label', $li);\n        $label.addClass(inputType);\n        $li.addClass(classes);\n\n        if (this.options.enableHTML) {\n          $label.html(\" \" + label);\n        } else {\n          $label.text(\" \" + label);\n        }\n\n        var $checkbox = $('<input/>').attr('type', inputType);\n        var name = this.options.checkboxName($element);\n\n        if (name) {\n          $checkbox.attr('name', name);\n        }\n\n        $label.prepend($checkbox);\n        var selected = $element.prop('selected') || false;\n        $checkbox.val(value);\n\n        if (value === this.options.selectAllValue) {\n          $li.addClass(\"multiselect-item multiselect-all\");\n          $checkbox.parent().parent().addClass('multiselect-all');\n        }\n\n        $label.attr('title', $element.attr('title'));\n        this.$ul.append($li);\n\n        if ($element.is(':disabled')) {\n          $checkbox.attr('disabled', 'disabled').prop('disabled', true).closest('a').attr(\"tabindex\", \"-1\").closest('li').addClass('disabled');\n        }\n\n        $checkbox.prop('checked', selected);\n\n        if (selected && this.options.selectedClass) {\n          $checkbox.closest('li').addClass(this.options.selectedClass);\n        }\n      },\n\n      /**\n       * Creates a divider using the given select option.\n       *\n       * @param {jQuery} element\n       */\n      createDivider: function createDivider(element) {\n        var $divider = $(this.options.templates.divider);\n        this.$ul.append($divider);\n      },\n\n      /**\n       * Creates an optgroup.\n       *\n       * @param {jQuery} group\n       */\n      createOptgroup: function createOptgroup(group) {\n        var label = $(group).attr(\"label\");\n        var value = $(group).attr(\"value\");\n        var $li = $('<li class=\"multiselect-item multiselect-group\"><a href=\"javascript:void(0);\"><label><b></b></label></a></li>');\n        var classes = this.options.optionClass(group);\n        $li.addClass(classes);\n\n        if (this.options.enableHTML) {\n          $('label b', $li).html(\" \" + label);\n        } else {\n          $('label b', $li).text(\" \" + label);\n        }\n\n        if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n          $('a', $li).append('<span class=\"caret-container\"><b class=\"caret\"></b></span>');\n        }\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          $('a label', $li).prepend('<input type=\"checkbox\" value=\"' + value + '\"/>');\n        }\n\n        if ($(group).is(':disabled')) {\n          $li.addClass('disabled');\n        }\n\n        this.$ul.append($li);\n        $(\"option\", group).each($.proxy(function ($, group) {\n          this.createOptionValue(group);\n        }, this));\n      },\n\n      /**\n       * Build the select all.\n       *\n       * Checks if a select all has already been created.\n       */\n      buildSelectAll: function buildSelectAll() {\n        if (typeof this.options.selectAllValue === 'number') {\n          this.options.selectAllValue = this.options.selectAllValue.toString();\n        }\n\n        var alreadyHasSelectAll = this.hasSelectAll();\n\n        if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\n          // Check whether to add a divider after the select all.\n          if (this.options.includeSelectAllDivider) {\n            this.$ul.prepend($(this.options.templates.divider));\n          }\n\n          var $li = $(this.options.templates.li);\n          $('label', $li).addClass(\"checkbox\");\n\n          if (this.options.enableHTML) {\n            $('label', $li).html(\" \" + this.options.selectAllText);\n          } else {\n            $('label', $li).text(\" \" + this.options.selectAllText);\n          }\n\n          if (this.options.selectAllName) {\n            $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\n          } else {\n            $('label', $li).prepend('<input type=\"checkbox\" />');\n          }\n\n          var $checkbox = $('input', $li);\n          $checkbox.val(this.options.selectAllValue);\n          $li.addClass(\"multiselect-item multiselect-all\");\n          $checkbox.parent().parent().addClass('multiselect-all');\n          this.$ul.prepend($li);\n          $checkbox.prop('checked', false);\n        }\n      },\n\n      /**\n       * Builds the filter.\n       */\n      buildFilter: function buildFilter() {\n        // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\n        if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\n          var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\n\n          if (this.$select.find('option').length >= enableFilterLength) {\n            this.$filter = $(this.options.templates.filter);\n            $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder); // Adds optional filter clear button\n\n            if (this.options.includeFilterClearBtn) {\n              var clearBtn = $(this.options.templates.filterClearBtn);\n              clearBtn.on('click', $.proxy(function (event) {\n                clearTimeout(this.searchTimeout);\n                this.$filter.find('.multiselect-search').val('');\n                $('li', this.$ul).show().removeClass('multiselect-filter-hidden');\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                  this.updateOptGroups();\n                }\n              }, this));\n              this.$filter.find('.input-group').append(clearBtn);\n            }\n\n            this.$ul.prepend(this.$filter);\n            this.$filter.val(this.query).on('click', function (event) {\n              event.stopPropagation();\n            }).on('input keydown', $.proxy(function (event) {\n              // Cancel enter key default behaviour\n              if (event.which === 13) {\n                event.preventDefault();\n              } // This is useful to catch \"keydown\" events after the browser has updated the control.\n\n\n              clearTimeout(this.searchTimeout);\n              this.searchTimeout = this.asyncFunction($.proxy(function () {\n                if (this.query !== event.target.value) {\n                  this.query = event.target.value;\n                  var currentGroup, currentGroupVisible;\n                  $.each($('li', this.$ul), $.proxy(function (index, element) {\n                    var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\n                    var text = $('label', element).text();\n                    var filterCandidate = '';\n\n                    if (this.options.filterBehavior === 'text') {\n                      filterCandidate = text;\n                    } else if (this.options.filterBehavior === 'value') {\n                      filterCandidate = value;\n                    } else if (this.options.filterBehavior === 'both') {\n                      filterCandidate = text + '\\n' + value;\n                    }\n\n                    if (value !== this.options.selectAllValue && text) {\n                      // By default lets assume that element is not\n                      // interesting for this search.\n                      var showElement = false;\n\n                      if (this.options.enableCaseInsensitiveFiltering) {\n                        filterCandidate = filterCandidate.toLowerCase();\n                        this.query = this.query.toLowerCase();\n                      }\n\n                      if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\n                        var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\n\n                        if (this.query.indexOf(valueToMatch) > -1) {\n                          showElement = true;\n                        }\n                      } else if (filterCandidate.indexOf(this.query) > -1) {\n                        showElement = true;\n                      } // Toggle current element (group or group item) according to showElement boolean.\n\n\n                      $(element).toggle(showElement).toggleClass('multiselect-filter-hidden', !showElement); // Differentiate groups and group items.\n\n                      if ($(element).hasClass('multiselect-group')) {\n                        // Remember group status.\n                        currentGroup = element;\n                        currentGroupVisible = showElement;\n                      } else {\n                        // Show group name when at least one of its items is visible.\n                        if (showElement) {\n                          $(currentGroup).show().removeClass('multiselect-filter-hidden');\n                        } // Show all group items when group name satisfies filter.\n\n\n                        if (!showElement && currentGroupVisible) {\n                          $(element).show().removeClass('multiselect-filter-hidden');\n                        }\n                      }\n                    }\n                  }, this));\n                }\n\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                  this.updateOptGroups();\n                }\n\n                this.options.onFiltering(event.target);\n              }, this), 300, this);\n            }, this));\n          }\n        }\n      },\n\n      /**\n       * Unbinds the whole plugin.\n       */\n      destroy: function destroy() {\n        this.$container.remove();\n        this.$select.show(); // reset original state\n\n        this.$select.prop('disabled', this.options.wasDisabled);\n        this.$select.data('multiselect', null);\n      },\n\n      /**\n       * Refreshs the multiselect based on the selected options of the select.\n       */\n      refresh: function refresh() {\n        var inputs = $.map($('li input', this.$ul), $);\n        $('option', this.$select).each($.proxy(function (index, element) {\n          var $elem = $(element);\n          var value = $elem.val();\n          var $input;\n\n          for (var i = inputs.length; 0 < i--;)\n          /**/\n          {\n            if (value !== ($input = inputs[i]).val()) continue; // wrong li\n\n            if ($elem.is(':selected')) {\n              $input.prop('checked', true);\n\n              if (this.options.selectedClass) {\n                $input.closest('li').addClass(this.options.selectedClass);\n              }\n            } else {\n              $input.prop('checked', false);\n\n              if (this.options.selectedClass) {\n                $input.closest('li').removeClass(this.options.selectedClass);\n              }\n            }\n\n            if ($elem.is(\":disabled\")) {\n              $input.attr('disabled', 'disabled').prop('disabled', true).closest('li').addClass('disabled');\n            } else {\n              $input.prop('disabled', false).closest('li').removeClass('disabled');\n            }\n\n            break; // assumes unique values\n          }\n        }, this));\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Select all options of the given values.\n       *\n       * If triggerOnChange is set to true, the on change event is triggered if\n       * and only if one value is passed.\n       *\n       * @param {Array} selectValues\n       * @param {Boolean} triggerOnChange\n       */\n      select: function select(selectValues, triggerOnChange) {\n        if (!$.isArray(selectValues)) {\n          selectValues = [selectValues];\n        }\n\n        for (var i = 0; i < selectValues.length; i++) {\n          var value = selectValues[i];\n\n          if (value === null || value === undefined) {\n            continue;\n          }\n\n          var $option = this.getOptionByValue(value);\n          var $checkbox = this.getInputByValue(value);\n\n          if ($option === undefined || $checkbox === undefined) {\n            continue;\n          }\n\n          if (!this.options.multiple) {\n            this.deselectAll(false);\n          }\n\n          if (this.options.selectedClass) {\n            $checkbox.closest('li').addClass(this.options.selectedClass);\n          }\n\n          $checkbox.prop('checked', true);\n          $option.prop('selected', true);\n\n          if (triggerOnChange) {\n            this.options.onChange($option, true);\n          }\n        }\n\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Clears all selected items.\n       */\n      clearSelection: function clearSelection() {\n        this.deselectAll(false);\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Deselects all options of the given values.\n       *\n       * If triggerOnChange is set to true, the on change event is triggered, if\n       * and only if one value is passed.\n       *\n       * @param {Array} deselectValues\n       * @param {Boolean} triggerOnChange\n       */\n      deselect: function deselect(deselectValues, triggerOnChange) {\n        if (!$.isArray(deselectValues)) {\n          deselectValues = [deselectValues];\n        }\n\n        for (var i = 0; i < deselectValues.length; i++) {\n          var value = deselectValues[i];\n\n          if (value === null || value === undefined) {\n            continue;\n          }\n\n          var $option = this.getOptionByValue(value);\n          var $checkbox = this.getInputByValue(value);\n\n          if ($option === undefined || $checkbox === undefined) {\n            continue;\n          }\n\n          if (this.options.selectedClass) {\n            $checkbox.closest('li').removeClass(this.options.selectedClass);\n          }\n\n          $checkbox.prop('checked', false);\n          $option.prop('selected', false);\n\n          if (triggerOnChange) {\n            this.options.onChange($option, false);\n          }\n        }\n\n        this.updateButtonText();\n        this.updateSelectAll();\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n      },\n\n      /**\n       * Selects all enabled & visible options.\n       *\n       * If justVisible is true or not specified, only visible options are selected.\n       *\n       * @param {Boolean} justVisible\n       * @param {Boolean} triggerOnSelectAll\n       */\n      selectAll: function selectAll(justVisible, triggerOnSelectAll) {\n        var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n        var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n        var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n\n        if (justVisible) {\n          $('input:enabled', visibleLis).prop('checked', true);\n          visibleLis.addClass(this.options.selectedClass);\n          $('input:enabled', visibleLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', true);\n          }, this));\n        } else {\n          $('input:enabled', allLis).prop('checked', true);\n          allLis.addClass(this.options.selectedClass);\n          $('input:enabled', allLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', true);\n          }, this));\n        }\n\n        $('li input[value=\"' + this.options.selectAllValue + '\"]', this.$ul).prop('checked', true);\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n\n        if (triggerOnSelectAll) {\n          this.options.onSelectAll();\n        }\n      },\n\n      /**\n       * Deselects all options.\n       *\n       * If justVisible is true or not specified, only visible options are deselected.\n       *\n       * @param {Boolean} justVisible\n       */\n      deselectAll: function deselectAll(justVisible, triggerOnDeselectAll) {\n        var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n        var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n        var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n\n        if (justVisible) {\n          $('input[type=\"checkbox\"]:enabled', visibleLis).prop('checked', false);\n          visibleLis.removeClass(this.options.selectedClass);\n          $('input[type=\"checkbox\"]:enabled', visibleLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', false);\n          }, this));\n        } else {\n          $('input[type=\"checkbox\"]:enabled', allLis).prop('checked', false);\n          allLis.removeClass(this.options.selectedClass);\n          $('input[type=\"checkbox\"]:enabled', allLis).each($.proxy(function (index, element) {\n            var value = $(element).val();\n            var option = this.getOptionByValue(value);\n            $(option).prop('selected', false);\n          }, this));\n        }\n\n        $('li input[value=\"' + this.options.selectAllValue + '\"]', this.$ul).prop('checked', false);\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n\n        if (triggerOnDeselectAll) {\n          this.options.onDeselectAll();\n        }\n      },\n\n      /**\n       * Rebuild the plugin.\n       *\n       * Rebuilds the dropdown, the filter and the select all option.\n       */\n      rebuild: function rebuild() {\n        this.$ul.html(''); // Important to distinguish between radios and checkboxes.\n\n        this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n        this.buildSelectAll();\n        this.buildDropdownOptions();\n        this.buildFilter();\n        this.updateButtonText();\n        this.updateSelectAll(true);\n\n        if (this.options.enableClickableOptGroups && this.options.multiple) {\n          this.updateOptGroups();\n        }\n\n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n          this.disable();\n        } else {\n          this.enable();\n        }\n\n        if (this.options.dropRight) {\n          this.$ul.addClass('pull-right');\n        }\n      },\n\n      /**\n       * The provided data will be used to build the dropdown.\n       */\n      dataprovider: function dataprovider(_dataprovider) {\n        var groupCounter = 0;\n        var $select = this.$select.empty();\n        $.each(_dataprovider, function (index, option) {\n          var $tag;\n\n          if ($.isArray(option.children)) {\n            // create optiongroup tag\n            groupCounter++;\n            $tag = $('<optgroup/>').attr({\n              label: option.label || 'Group ' + groupCounter,\n              disabled: !!option.disabled\n            });\n            forEach(option.children, function (subOption) {\n              // add children option tags\n              var attributes = {\n                value: subOption.value,\n                label: subOption.label || subOption.value,\n                title: subOption.title,\n                selected: !!subOption.selected,\n                disabled: !!subOption.disabled\n              }; //Loop through attributes object and add key-value for each attribute\n\n              for (var key in subOption.attributes) {\n                attributes['data-' + key] = subOption.attributes[key];\n              } //Append original attributes + new data attributes to option\n\n\n              $tag.append($('<option/>').attr(attributes));\n            });\n          } else {\n            var attributes = {\n              'value': option.value,\n              'label': option.label || option.value,\n              'title': option.title,\n              'class': option.class,\n              'selected': !!option.selected,\n              'disabled': !!option.disabled\n            }; //Loop through attributes object and add key-value for each attribute\n\n            for (var key in option.attributes) {\n              attributes['data-' + key] = option.attributes[key];\n            } //Append original attributes + new data attributes to option\n\n\n            $tag = $('<option/>').attr(attributes);\n            $tag.text(option.label || option.value);\n          }\n\n          $select.append($tag);\n        });\n        this.rebuild();\n      },\n\n      /**\n       * Enable the multiselect.\n       */\n      enable: function enable() {\n        this.$select.prop('disabled', false);\n        this.$button.prop('disabled', false).removeClass('disabled');\n      },\n\n      /**\n       * Disable the multiselect.\n       */\n      disable: function disable() {\n        this.$select.prop('disabled', true);\n        this.$button.prop('disabled', true).addClass('disabled');\n      },\n\n      /**\n       * Set the options.\n       *\n       * @param {Array} options\n       */\n      setOptions: function setOptions(options) {\n        this.options = this.mergeOptions(options);\n      },\n\n      /**\n       * Merges the given options with the default options.\n       *\n       * @param {Array} options\n       * @returns {Array}\n       */\n      mergeOptions: function mergeOptions(options) {\n        return $.extend(true, {}, this.defaults, this.options, options);\n      },\n\n      /**\n       * Checks whether a select all checkbox is present.\n       *\n       * @returns {Boolean}\n       */\n      hasSelectAll: function hasSelectAll() {\n        return $('li.multiselect-all', this.$ul).length > 0;\n      },\n\n      /**\n       * Update opt groups.\n       */\n      updateOptGroups: function updateOptGroups() {\n        var $groups = $('li.multiselect-group', this.$ul);\n        var selectedClass = this.options.selectedClass;\n        $groups.each(function () {\n          var $options = $(this).nextUntil('li.multiselect-group').not('.multiselect-filter-hidden').not('.disabled');\n          var checked = true;\n          $options.each(function () {\n            var $input = $('input', this);\n\n            if (!$input.prop('checked')) {\n              checked = false;\n            }\n          });\n\n          if (selectedClass) {\n            if (checked) {\n              $(this).addClass(selectedClass);\n            } else {\n              $(this).removeClass(selectedClass);\n            }\n          }\n\n          $('input', this).prop('checked', checked);\n        });\n      },\n\n      /**\n       * Updates the select all checkbox based on the currently displayed and selected checkboxes.\n       */\n      updateSelectAll: function updateSelectAll(notTriggerOnSelectAll) {\n        if (this.hasSelectAll()) {\n          var allBoxes = $(\"li:not(.multiselect-item):not(.multiselect-filter-hidden):not(.multiselect-group):not(.disabled) input:enabled\", this.$ul);\n          var allBoxesLength = allBoxes.length;\n          var checkedBoxesLength = allBoxes.filter(\":checked\").length;\n          var selectAllLi = $(\"li.multiselect-all\", this.$ul);\n          var selectAllInput = selectAllLi.find(\"input\");\n\n          if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\n            selectAllInput.prop(\"checked\", true);\n            selectAllLi.addClass(this.options.selectedClass);\n          } else {\n            selectAllInput.prop(\"checked\", false);\n            selectAllLi.removeClass(this.options.selectedClass);\n          }\n        }\n      },\n\n      /**\n       * Update the button text and its title based on the currently selected options.\n       */\n      updateButtonText: function updateButtonText() {\n        var options = this.getSelected(); // First update the displayed button text.\n\n        if (this.options.enableHTML) {\n          $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\n        } else {\n          $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\n        } // Now update the title attribute of the button.\n\n\n        $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\n      },\n\n      /**\n       * Get all selected options.\n       *\n       * @returns {jQUery}\n       */\n      getSelected: function getSelected() {\n        return $('option', this.$select).filter(\":selected\");\n      },\n\n      /**\n       * Gets a select option by its value.\n       *\n       * @param {String} value\n       * @returns {jQuery}\n       */\n      getOptionByValue: function getOptionByValue(value) {\n        var options = $('option', this.$select);\n        var valueToCompare = value.toString();\n\n        for (var i = 0; i < options.length; i = i + 1) {\n          var option = options[i];\n\n          if (option.value === valueToCompare) {\n            return $(option);\n          }\n        }\n      },\n\n      /**\n       * Get the input (radio/checkbox) by its value.\n       *\n       * @param {String} value\n       * @returns {jQuery}\n       */\n      getInputByValue: function getInputByValue(value) {\n        var checkboxes = $('li input:not(.multiselect-search)', this.$ul);\n        var valueToCompare = value.toString();\n\n        for (var i = 0; i < checkboxes.length; i = i + 1) {\n          var checkbox = checkboxes[i];\n\n          if (checkbox.value === valueToCompare) {\n            return $(checkbox);\n          }\n        }\n      },\n\n      /**\n       * Used for knockout integration.\n       */\n      updateOriginalOptions: function updateOriginalOptions() {\n        this.originalOptions = this.$select.clone()[0].options;\n      },\n      asyncFunction: function asyncFunction(callback, timeout, self) {\n        var args = Array.prototype.slice.call(arguments, 3);\n        return setTimeout(function () {\n          callback.apply(self || window, args);\n        }, timeout);\n      },\n      setAllSelectedText: function setAllSelectedText(allSelectedText) {\n        this.options.allSelectedText = allSelectedText;\n        this.updateButtonText();\n      }\n    };\n\n    $.fn.multiselect = function (option, parameter, extraOptions) {\n      return this.each(function () {\n        var data = $(this).data('multiselect');\n        var options = (typeof option === \"undefined\" ? \"undefined\" : _typeof(option)) === 'object' && option; // Initialize the multiselect.\n\n        if (!data) {\n          data = new Multiselect(this, options);\n          $(this).data('multiselect', data);\n        } // Call multiselect method.\n\n\n        if (typeof option === 'string') {\n          data[option](parameter, extraOptions);\n\n          if (option === 'destroy') {\n            $(this).data('multiselect', false);\n          }\n        }\n      });\n    };\n\n    $.fn.multiselect.Constructor = Multiselect;\n    $(function () {\n      $(\"select[data-role=multiselect]\").multiselect();\n    });\n  }(jQuery);\n  return jQuery;\n};","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/node_modules/react-bootstrap-multiselect/dist/bootstrap-multiselect.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","exports","init","jQuery","fn","multiselect","$","ko","bindingHandlers","after","element","valueAccessor","allBindings","viewModel","bindingContext","$element","config","toJS","has","options","get","isObservable","computed","read","setTimeout","ms","data","updateOriginalOptions","disposeWhenNodeIsRemoved","value","extend","rateLimit","notifyWhenChangesStop","selectedOptions","setEnabled","enable","disable","utils","domNodeDisposal","addDisposeCallback","update","forEach","array","callback","index","length","Multiselect","select","$select","mergeOptions","attr","nonSelectedText","originalOptions","clone","query","searchTimeout","lastToggledInput","multiple","onChange","proxy","onSelectAll","onDeselectAll","onDropdownShow","onDropdownHide","onDropdownShown","onDropdownHidden","onInitialized","onFiltering","buildContainer","buildButton","buildDropdown","buildSelectAll","buildDropdownOptions","buildFilter","updateButtonText","updateSelectAll","enableClickableOptGroups","updateOptGroups","wasDisabled","prop","disableIfEmpty","wrap","$container","defaults","buttonText","disabledText","allSelectedText","selectAllNumber","numberDisplayed","nSelectedText","selected","delimiter","delimiterText","each","label","undefined","text","substr","buttonTitle","checkboxName","option","optionLabel","optionClass","checked","event","$filter","enableHTML","buttonClass","inheritClass","buttonWidth","buttonContainer","dropRight","dropUp","selectedClass","maxHeight","includeSelectAllOption","includeSelectAllIfMoreThan","selectAllText","selectAllValue","selectAllName","selectAllJustVisible","enableFiltering","enableCaseInsensitiveFiltering","enableFullValueFiltering","enableCollapsibleOptGroups","filterPlaceholder","filterBehavior","includeFilterClearBtn","preventInputChangeEvent","templates","button","ul","filter","filterClearBtn","li","divider","liGroup","on","$button","addClass","css","tabindex","prepend","$ul","height","Math","min","moveCalc","append","children","tag","toLowerCase","createOptgroup","createDivider","createOptionValue","$target","target","isSelectAllOption","val","closest","removeClass","$option","getOptionByValue","$optionsNotThis","not","$checkboxesNotThis","selectAll","deselectAll","click","change","e","shiftKey","stopPropagation","is","preventDefault","find","from","to","tmp","range","slice","toggleClass","i","j","$checkbox","trigger","blur","off","keyCode","hasClass","$items","$current","eq","focus","$li","$group","nextUntil","$inputs","values","$options","input","push","visible","hide","show","classes","inputType","$label","html","name","parent","$divider","group","toString","alreadyHasSelectAll","hasSelectAll","includeSelectAllDivider","enableFilterLength","max","clearBtn","clearTimeout","which","asyncFunction","currentGroup","currentGroupVisible","filterCandidate","showElement","valueToMatch","trim","substring","indexOf","toggle","destroy","remove","refresh","inputs","map","$elem","$input","selectValues","triggerOnChange","isArray","getInputByValue","clearSelection","deselect","deselectValues","justVisible","triggerOnSelectAll","allLis","visibleLis","triggerOnDeselectAll","rebuild","dataprovider","_dataprovider","groupCounter","empty","$tag","disabled","subOption","attributes","title","key","class","setOptions","$groups","notTriggerOnSelectAll","allBoxes","allBoxesLength","checkedBoxesLength","selectAllLi","selectAllInput","getSelected","valueToCompare","checkboxes","checkbox","timeout","self","args","Array","call","arguments","apply","window","setAllSelectedText","parameter","extraOptions","Constructor"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.init = function (jQuery) {\n    if (typeof jQuery.fn.multiselect !== \"undefined\") return jQuery;\n    /**\n     * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\n     *\n     * Apache License, Version 2.0:\n     * Copyright (c) 2012 - 2015 David Stutz\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n     * use this file except in compliance with the License. You may obtain a\n     * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n     * License for the specific language governing permissions and limitations\n     * under the License.\n     *\n     * BSD 3-Clause License:\n     * Copyright (c) 2012 - 2015 David Stutz\n     * All rights reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are met:\n     *    - Redistributions of source code must retain the above copyright notice,\n     *      this list of conditions and the following disclaimer.\n     *    - Redistributions in binary form must reproduce the above copyright notice,\n     *      this list of conditions and the following disclaimer in the documentation\n     *      and/or other materials provided with the distribution.\n     *    - Neither the name of David Stutz nor the names of its contributors may be\n     *      used to endorse or promote products derived from this software without\n     *      specific prior written permission.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n     * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n     * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n     * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n     * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n     * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     */\n    !function ($) {\n        \"use strict\"; // jshint ;_;\n\n        if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\n            ko.bindingHandlers.multiselect = {\n                after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\n\n                init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                    var $element = $(element);\n                    var config = ko.toJS(valueAccessor());\n\n                    $element.multiselect(config);\n\n                    if (allBindings.has('options')) {\n                        var options = allBindings.get('options');\n                        if (ko.isObservable(options)) {\n                            ko.computed({\n                                read: function read() {\n                                    options();\n                                    setTimeout(function () {\n                                        var ms = $element.data('multiselect');\n                                        if (ms) ms.updateOriginalOptions(); //Not sure how beneficial this is.\n                                        $element.multiselect('rebuild');\n                                    }, 1);\n                                },\n                                disposeWhenNodeIsRemoved: element\n                            });\n                        }\n                    }\n\n                    //value and selectedOptions are two-way, so these will be triggered even by our own actions.\n                    //It needs some way to tell if they are triggered because of us or because of outside change.\n                    //It doesn't loop but it's a waste of processing.\n                    if (allBindings.has('value')) {\n                        var value = allBindings.get('value');\n                        if (ko.isObservable(value)) {\n                            ko.computed({\n                                read: function read() {\n                                    value();\n                                    setTimeout(function () {\n                                        $element.multiselect('refresh');\n                                    }, 1);\n                                },\n                                disposeWhenNodeIsRemoved: element\n                            }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                        }\n                    }\n\n                    //Switched from arrayChange subscription to general subscription using 'refresh'.\n                    //Not sure performance is any better using 'select' and 'deselect'.\n                    if (allBindings.has('selectedOptions')) {\n                        var selectedOptions = allBindings.get('selectedOptions');\n                        if (ko.isObservable(selectedOptions)) {\n                            ko.computed({\n                                read: function read() {\n                                    selectedOptions();\n                                    setTimeout(function () {\n                                        $element.multiselect('refresh');\n                                    }, 1);\n                                },\n                                disposeWhenNodeIsRemoved: element\n                            }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                        }\n                    }\n\n                    var setEnabled = function setEnabled(enable) {\n                        setTimeout(function () {\n                            if (enable) $element.multiselect('enable');else $element.multiselect('disable');\n                        });\n                    };\n\n                    if (allBindings.has('enable')) {\n                        var enable = allBindings.get('enable');\n                        if (ko.isObservable(enable)) {\n                            ko.computed({\n                                read: function read() {\n                                    setEnabled(enable());\n                                },\n                                disposeWhenNodeIsRemoved: element\n                            }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                        } else {\n                            setEnabled(enable);\n                        }\n                    }\n\n                    if (allBindings.has('disable')) {\n                        var disable = allBindings.get('disable');\n                        if (ko.isObservable(disable)) {\n                            ko.computed({\n                                read: function read() {\n                                    setEnabled(!disable());\n                                },\n                                disposeWhenNodeIsRemoved: element\n                            }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                        } else {\n                            setEnabled(!disable);\n                        }\n                    }\n\n                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n                        $element.multiselect('destroy');\n                    });\n                },\n\n                update: function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                    var $element = $(element);\n                    var config = ko.toJS(valueAccessor());\n\n                    $element.multiselect('setOptions', config);\n                    $element.multiselect('rebuild');\n                }\n            };\n        }\n\n        function forEach(array, callback) {\n            for (var index = 0; index < array.length; ++index) {\n                callback(array[index], index);\n            }\n        }\n\n        /**\n         * Constructor to create a new multiselect using the given select.\n         *\n         * @param {jQuery} select\n         * @param {Object} options\n         * @returns {Multiselect}\n         */\n        function Multiselect(select, options) {\n\n            this.$select = $(select);\n            this.options = this.mergeOptions($.extend({}, options, this.$select.data()));\n\n            // Placeholder via data attributes\n            if (this.$select.attr(\"data-placeholder\")) {\n                this.options.nonSelectedText = this.$select.data(\"placeholder\");\n            }\n\n            // Initialization.\n            // We have to clone to create a new reference.\n            this.originalOptions = this.$select.clone()[0].options;\n            this.query = '';\n            this.searchTimeout = null;\n            this.lastToggledInput = null;\n\n            this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n            this.options.onChange = $.proxy(this.options.onChange, this);\n            this.options.onSelectAll = $.proxy(this.options.onSelectAll, this);\n            this.options.onDeselectAll = $.proxy(this.options.onDeselectAll, this);\n            this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\n            this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\n            this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\n            this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\n            this.options.onInitialized = $.proxy(this.options.onInitialized, this);\n            this.options.onFiltering = $.proxy(this.options.onFiltering, this);\n\n            // Build select all if enabled.\n            this.buildContainer();\n            this.buildButton();\n            this.buildDropdown();\n            this.buildSelectAll();\n            this.buildDropdownOptions();\n            this.buildFilter();\n\n            this.updateButtonText();\n            this.updateSelectAll(true);\n\n            if (this.options.enableClickableOptGroups && this.options.multiple) {\n                this.updateOptGroups();\n            }\n\n            this.options.wasDisabled = this.$select.prop('disabled');\n            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n                this.disable();\n            }\n\n            this.$select.wrap('<span class=\"multiselect-native-select\" />').after(this.$container);\n            this.options.onInitialized(this.$select, this.$container);\n        }\n\n        Multiselect.prototype = {\n\n            defaults: {\n                /**\n                 * Default text function will either print 'None selected' in case no\n                 * option is selected or a list of the selected options up to a length\n                 * of 3 selected options.\n                 *\n                 * @param {jQuery} options\n                 * @param {jQuery} select\n                 * @returns {String}\n                 */\n                buttonText: function buttonText(options, select) {\n                    if (this.disabledText.length > 0 && (select.prop('disabled') || options.length == 0 && this.disableIfEmpty)) {\n\n                        return this.disabledText;\n                    } else if (options.length === 0) {\n                        return this.nonSelectedText;\n                    } else if (this.allSelectedText && options.length === $('option', $(select)).length && $('option', $(select)).length !== 1 && this.multiple) {\n\n                        if (this.selectAllNumber) {\n                            return this.allSelectedText + ' (' + options.length + ')';\n                        } else {\n                            return this.allSelectedText;\n                        }\n                    } else if (options.length > this.numberDisplayed) {\n                        return options.length + ' ' + this.nSelectedText;\n                    } else {\n                        var selected = '';\n                        var delimiter = this.delimiterText;\n\n                        options.each(function () {\n                            var label = $(this).attr('label') !== undefined ? $(this).attr('label') : $(this).text();\n                            selected += label + delimiter;\n                        });\n\n                        return selected.substr(0, selected.length - this.delimiterText.length);\n                    }\n                },\n                /**\n                 * Updates the title of the button similar to the buttonText function.\n                 *\n                 * @param {jQuery} options\n                 * @param {jQuery} select\n                 * @returns {@exp;selected@call;substr}\n                 */\n                buttonTitle: function buttonTitle(options, select) {\n                    if (options.length === 0) {\n                        return this.nonSelectedText;\n                    } else {\n                        var selected = '';\n                        var delimiter = this.delimiterText;\n\n                        options.each(function () {\n                            var label = $(this).attr('label') !== undefined ? $(this).attr('label') : $(this).text();\n                            selected += label + delimiter;\n                        });\n                        return selected.substr(0, selected.length - this.delimiterText.length);\n                    }\n                },\n                checkboxName: function checkboxName(option) {\n                    return false; // no checkbox name\n                },\n                /**\n                 * Create a label.\n                 *\n                 * @param {jQuery} element\n                 * @returns {String}\n                 */\n                optionLabel: function optionLabel(element) {\n                    return $(element).attr('label') || $(element).text();\n                },\n                /**\n                 * Create a class.\n                 *\n                 * @param {jQuery} element\n                 * @returns {String}\n                 */\n                optionClass: function optionClass(element) {\n                    return $(element).attr('class') || '';\n                },\n                /**\n                 * Triggered on change of the multiselect.\n                 *\n                 * Not triggered when selecting/deselecting options manually.\n                 *\n                 * @param {jQuery} option\n                 * @param {Boolean} checked\n                 */\n                onChange: function onChange(option, checked) {},\n                /**\n                 * Triggered when the dropdown is shown.\n                 *\n                 * @param {jQuery} event\n                 */\n                onDropdownShow: function onDropdownShow(event) {},\n                /**\n                 * Triggered when the dropdown is hidden.\n                 *\n                 * @param {jQuery} event\n                 */\n                onDropdownHide: function onDropdownHide(event) {},\n                /**\n                 * Triggered after the dropdown is shown.\n                 *\n                 * @param {jQuery} event\n                 */\n                onDropdownShown: function onDropdownShown(event) {},\n                /**\n                 * Triggered after the dropdown is hidden.\n                 *\n                 * @param {jQuery} event\n                 */\n                onDropdownHidden: function onDropdownHidden(event) {},\n                /**\n                 * Triggered on select all.\n                 */\n                onSelectAll: function onSelectAll() {},\n                /**\n                 * Triggered on deselect all.\n                 */\n                onDeselectAll: function onDeselectAll() {},\n                /**\n                 * Triggered after initializing.\n                 *\n                 * @param {jQuery} $select\n                 * @param {jQuery} $container\n                 */\n                onInitialized: function onInitialized($select, $container) {},\n                /**\n                 * Triggered on filtering.\n                 *\n                 * @param {jQuery} $filter\n                 */\n                onFiltering: function onFiltering($filter) {},\n                enableHTML: false,\n                buttonClass: 'btn btn-default',\n                inheritClass: false,\n                buttonWidth: 'auto',\n                buttonContainer: '<div class=\"btn-group\" />',\n                dropRight: false,\n                dropUp: false,\n                selectedClass: 'active',\n                // Maximum height of the dropdown menu.\n                // If maximum height is exceeded a scrollbar will be displayed.\n                maxHeight: false,\n                includeSelectAllOption: false,\n                includeSelectAllIfMoreThan: 0,\n                selectAllText: ' Select all',\n                selectAllValue: 'multiselect-all',\n                selectAllName: false,\n                selectAllNumber: true,\n                selectAllJustVisible: true,\n                enableFiltering: false,\n                enableCaseInsensitiveFiltering: false,\n                enableFullValueFiltering: false,\n                enableClickableOptGroups: false,\n                enableCollapsibleOptGroups: false,\n                filterPlaceholder: 'Search',\n                // possible options: 'text', 'value', 'both'\n                filterBehavior: 'text',\n                includeFilterClearBtn: true,\n                preventInputChangeEvent: false,\n                nonSelectedText: 'None selected',\n                nSelectedText: 'selected',\n                allSelectedText: 'All selected',\n                numberDisplayed: 3,\n                disableIfEmpty: false,\n                disabledText: '',\n                delimiterText: ', ',\n                templates: {\n                    button: '<button type=\"button\" class=\"multiselect dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span> <b class=\"caret\"></b></button>',\n                    ul: '<ul class=\"multiselect-container dropdown-menu\"></ul>',\n                    filter: '<li class=\"multiselect-item multiselect-filter\"><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\n                    filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"glyphicon glyphicon-remove-circle\"></i></button></span>',\n                    li: '<li><a tabindex=\"0\"><label></label></a></li>',\n                    divider: '<li class=\"multiselect-item divider\"></li>',\n                    liGroup: '<li class=\"multiselect-item multiselect-group\"><label></label></li>'\n                }\n            },\n\n            constructor: Multiselect,\n\n            /**\n             * Builds the container of the multiselect.\n             */\n            buildContainer: function buildContainer() {\n                this.$container = $(this.options.buttonContainer);\n                this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\n                this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\n                this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\n                this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\n            },\n\n            /**\n             * Builds the button of the multiselect.\n             */\n            buildButton: function buildButton() {\n                this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\n                if (this.$select.attr('class') && this.options.inheritClass) {\n                    this.$button.addClass(this.$select.attr('class'));\n                }\n                // Adopt active state.\n                if (this.$select.prop('disabled')) {\n                    this.disable();\n                } else {\n                    this.enable();\n                }\n\n                // Manually add button width if set.\n                if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\n                    this.$button.css({\n                        'width': '100%', //this.options.buttonWidth,\n                        'overflow': 'hidden',\n                        'text-overflow': 'ellipsis'\n                    });\n                    this.$container.css({\n                        'width': this.options.buttonWidth\n                    });\n                }\n\n                // Keep the tab index from the select.\n                var tabindex = this.$select.attr('tabindex');\n                if (tabindex) {\n                    this.$button.attr('tabindex', tabindex);\n                }\n\n                this.$container.prepend(this.$button);\n            },\n\n            /**\n             * Builds the ul representing the dropdown menu.\n             */\n            buildDropdown: function buildDropdown() {\n\n                // Build ul.\n                this.$ul = $(this.options.templates.ul);\n\n                if (this.options.dropRight) {\n                    this.$ul.addClass('pull-right');\n                }\n\n                // Set max height of dropdown menu to activate auto scrollbar.\n                if (this.options.maxHeight) {\n                    // TODO: Add a class for this option to move the css declarations.\n                    this.$ul.css({\n                        'max-height': this.options.maxHeight + 'px',\n                        'overflow-y': 'auto',\n                        'overflow-x': 'hidden'\n                    });\n                }\n\n                if (this.options.dropUp) {\n\n                    var height = Math.min(this.options.maxHeight, $('option[data-role!=\"divider\"]', this.$select).length * 26 + $('option[data-role=\"divider\"]', this.$select).length * 19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));\n                    var moveCalc = height + 34;\n\n                    this.$ul.css({\n                        'max-height': height + 'px',\n                        'overflow-y': 'auto',\n                        'overflow-x': 'hidden',\n                        'margin-top': \"-\" + moveCalc + 'px'\n                    });\n                }\n\n                this.$container.append(this.$ul);\n            },\n\n            /**\n             * Build the dropdown options and binds all necessary events.\n             *\n             * Uses createDivider and createOptionValue to create the necessary options.\n             */\n            buildDropdownOptions: function buildDropdownOptions() {\n\n                this.$select.children().each($.proxy(function (index, element) {\n\n                    var $element = $(element);\n                    // Support optgroups and options without a group simultaneously.\n                    var tag = $element.prop('tagName').toLowerCase();\n\n                    if ($element.prop('value') === this.options.selectAllValue) {\n                        return;\n                    }\n\n                    if (tag === 'optgroup') {\n                        this.createOptgroup(element);\n                    } else if (tag === 'option') {\n\n                        if ($element.data('role') === 'divider') {\n                            this.createDivider();\n                        } else {\n                            this.createOptionValue(element);\n                        }\n                    }\n\n                    // Other illegal tags will be ignored.\n                }, this));\n\n                // Bind the change event on the dropdown elements.\n                $('li:not(.multiselect-group) input', this.$ul).on('change', $.proxy(function (event) {\n                    var $target = $(event.target);\n\n                    var checked = $target.prop('checked') || false;\n                    var isSelectAllOption = $target.val() === this.options.selectAllValue;\n\n                    // Apply or unapply the configured selected class.\n                    if (this.options.selectedClass) {\n                        if (checked) {\n                            $target.closest('li').addClass(this.options.selectedClass);\n                        } else {\n                            $target.closest('li').removeClass(this.options.selectedClass);\n                        }\n                    }\n\n                    // Get the corresponding option.\n                    var value = $target.val();\n                    var $option = this.getOptionByValue(value);\n\n                    var $optionsNotThis = $('option', this.$select).not($option);\n                    var $checkboxesNotThis = $('input', this.$container).not($target);\n\n                    if (isSelectAllOption) {\n\n                        if (checked) {\n                            this.selectAll(this.options.selectAllJustVisible, true);\n                        } else {\n                            this.deselectAll(this.options.selectAllJustVisible, true);\n                        }\n                    } else {\n                        if (checked) {\n                            $option.prop('selected', true);\n\n                            if (this.options.multiple) {\n                                // Simply select additional option.\n                                $option.prop('selected', true);\n                            } else {\n                                // Unselect all other options and corresponding checkboxes.\n                                if (this.options.selectedClass) {\n                                    $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\n                                }\n\n                                $($checkboxesNotThis).prop('checked', false);\n                                $optionsNotThis.prop('selected', false);\n\n                                // It's a single selection, so close.\n                                this.$button.click();\n                            }\n\n                            if (this.options.selectedClass === \"active\") {\n                                $optionsNotThis.closest(\"a\").css(\"outline\", \"\");\n                            }\n                        } else {\n                            // Unselect option.\n                            $option.prop('selected', false);\n                        }\n\n                        // To prevent select all from firing onChange: #575\n                        this.options.onChange($option, checked);\n\n                        // Do not update select all or optgroups on select all change!\n                        this.updateSelectAll();\n\n                        if (this.options.enableClickableOptGroups && this.options.multiple) {\n                            this.updateOptGroups();\n                        }\n                    }\n\n                    this.$select.change();\n                    this.updateButtonText();\n\n                    if (this.options.preventInputChangeEvent) {\n                        return false;\n                    }\n                }, this));\n\n                $('li a', this.$ul).on('mousedown', function (e) {\n                    if (e.shiftKey) {\n                        // Prevent selecting text by Shift+click\n                        return false;\n                    }\n                });\n\n                $('li a', this.$ul).on('touchstart click', $.proxy(function (event) {\n                    event.stopPropagation();\n\n                    var $target = $(event.target);\n\n                    if (event.shiftKey && this.options.multiple) {\n                        if ($target.is(\"label\")) {\n                            // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\n                            event.preventDefault();\n                            $target = $target.find(\"input\");\n                            $target.prop(\"checked\", !$target.prop(\"checked\"));\n                        }\n                        var checked = $target.prop('checked') || false;\n\n                        if (this.lastToggledInput !== null && this.lastToggledInput !== $target) {\n                            // Make sure we actually have a range\n                            var from = $target.closest(\"li\").index();\n                            var to = this.lastToggledInput.closest(\"li\").index();\n\n                            if (from > to) {\n                                // Swap the indices\n                                var tmp = to;\n                                to = from;\n                                from = tmp;\n                            }\n\n                            // Make sure we grab all elements since slice excludes the last index\n                            ++to;\n\n                            // Change the checkboxes and underlying options\n                            var range = this.$ul.find(\"li\").slice(from, to).find(\"input\");\n\n                            range.prop('checked', checked);\n\n                            if (this.options.selectedClass) {\n                                range.closest('li').toggleClass(this.options.selectedClass, checked);\n                            }\n\n                            for (var i = 0, j = range.length; i < j; i++) {\n                                var $checkbox = $(range[i]);\n\n                                var $option = this.getOptionByValue($checkbox.val());\n\n                                $option.prop('selected', checked);\n                            }\n                        }\n\n                        // Trigger the select \"change\" event\n                        $target.trigger(\"change\");\n                    }\n\n                    // Remembers last clicked option\n                    if ($target.is(\"input\") && !$target.closest(\"li\").is(\".multiselect-item\")) {\n                        this.lastToggledInput = $target;\n                    }\n\n                    $target.blur();\n                }, this));\n\n                // Keyboard support.\n                this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function (event) {\n                    if ($('input[type=\"text\"]', this.$container).is(':focus')) {\n                        return;\n                    }\n\n                    if (event.keyCode === 9 && this.$container.hasClass('open')) {\n                        this.$button.click();\n                    } else {\n                        var $items = $(this.$container).find(\"li:not(.divider):not(.disabled) a\").filter(\":visible\");\n\n                        if (!$items.length) {\n                            return;\n                        }\n\n                        var index = $items.index($items.filter(':focus'));\n\n                        // Navigation up.\n                        if (event.keyCode === 38 && index > 0) {\n                            index--;\n                        }\n                        // Navigate down.\n                        else if (event.keyCode === 40 && index < $items.length - 1) {\n                                index++;\n                            } else if (!~index) {\n                                index = 0;\n                            }\n\n                        var $current = $items.eq(index);\n                        $current.focus();\n\n                        if (event.keyCode === 32 || event.keyCode === 13) {\n                            var $checkbox = $current.find('input');\n\n                            $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\n                            $checkbox.change();\n                        }\n\n                        event.stopPropagation();\n                        event.preventDefault();\n                    }\n                }, this));\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    $(\"li.multiselect-group input\", this.$ul).on(\"change\", $.proxy(function (event) {\n                        event.stopPropagation();\n\n                        var $target = $(event.target);\n                        var checked = $target.prop('checked') || false;\n\n                        var $li = $(event.target).closest('li');\n                        var $group = $li.nextUntil(\"li.multiselect-group\").not('.multiselect-filter-hidden').not('.disabled');\n\n                        var $inputs = $group.find(\"input\");\n\n                        var values = [];\n                        var $options = [];\n\n                        if (this.options.selectedClass) {\n                            if (checked) {\n                                $li.addClass(this.options.selectedClass);\n                            } else {\n                                $li.removeClass(this.options.selectedClass);\n                            }\n                        }\n\n                        $.each($inputs, $.proxy(function (index, input) {\n                            var value = $(input).val();\n                            var $option = this.getOptionByValue(value);\n\n                            if (checked) {\n                                $(input).prop('checked', true);\n                                $(input).closest('li').addClass(this.options.selectedClass);\n\n                                $option.prop('selected', true);\n                            } else {\n                                $(input).prop('checked', false);\n                                $(input).closest('li').removeClass(this.options.selectedClass);\n\n                                $option.prop('selected', false);\n                            }\n\n                            $options.push(this.getOptionByValue(value));\n                        }, this));\n\n                        // Cannot use select or deselect here because it would call updateOptGroups again.\n\n                        this.options.onChange($options, checked);\n\n                        this.updateButtonText();\n                        this.updateSelectAll();\n                    }, this));\n                }\n\n                if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n                    $(\"li.multiselect-group .caret-container\", this.$ul).on(\"click\", $.proxy(function (event) {\n                        var $li = $(event.target).closest('li');\n                        var $inputs = $li.nextUntil(\"li.multiselect-group\").not('.multiselect-filter-hidden');\n\n                        var visible = true;\n                        $inputs.each(function () {\n                            visible = visible && $(this).is(':visible');\n                        });\n\n                        if (visible) {\n                            $inputs.hide().addClass('multiselect-collapsible-hidden');\n                        } else {\n                            $inputs.show().removeClass('multiselect-collapsible-hidden');\n                        }\n                    }, this));\n\n                    $(\"li.multiselect-all\", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');\n                    $(\"li.multiselect-all > a > label.checkbox\", this.$ul).css('padding', '3px 20px 3px 35px');\n                    $(\"li.multiselect-group > a > input\", this.$ul).css('margin', '4px 0px 5px -20px');\n                }\n            },\n\n            /**\n             * Create an option using the given select option.\n             *\n             * @param {jQuery} element\n             */\n            createOptionValue: function createOptionValue(element) {\n                var $element = $(element);\n                if ($element.is(':selected')) {\n                    $element.prop('selected', true);\n                }\n\n                // Support the label attribute on options.\n                var label = this.options.optionLabel(element);\n                var classes = this.options.optionClass(element);\n                var value = $element.val();\n                var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\n\n                var $li = $(this.options.templates.li);\n                var $label = $('label', $li);\n                $label.addClass(inputType);\n                $li.addClass(classes);\n\n                if (this.options.enableHTML) {\n                    $label.html(\" \" + label);\n                } else {\n                    $label.text(\" \" + label);\n                }\n\n                var $checkbox = $('<input/>').attr('type', inputType);\n\n                var name = this.options.checkboxName($element);\n                if (name) {\n                    $checkbox.attr('name', name);\n                }\n\n                $label.prepend($checkbox);\n\n                var selected = $element.prop('selected') || false;\n                $checkbox.val(value);\n\n                if (value === this.options.selectAllValue) {\n                    $li.addClass(\"multiselect-item multiselect-all\");\n                    $checkbox.parent().parent().addClass('multiselect-all');\n                }\n\n                $label.attr('title', $element.attr('title'));\n\n                this.$ul.append($li);\n\n                if ($element.is(':disabled')) {\n                    $checkbox.attr('disabled', 'disabled').prop('disabled', true).closest('a').attr(\"tabindex\", \"-1\").closest('li').addClass('disabled');\n                }\n\n                $checkbox.prop('checked', selected);\n\n                if (selected && this.options.selectedClass) {\n                    $checkbox.closest('li').addClass(this.options.selectedClass);\n                }\n            },\n\n            /**\n             * Creates a divider using the given select option.\n             *\n             * @param {jQuery} element\n             */\n            createDivider: function createDivider(element) {\n                var $divider = $(this.options.templates.divider);\n                this.$ul.append($divider);\n            },\n\n            /**\n             * Creates an optgroup.\n             *\n             * @param {jQuery} group\n             */\n            createOptgroup: function createOptgroup(group) {\n                var label = $(group).attr(\"label\");\n                var value = $(group).attr(\"value\");\n                var $li = $('<li class=\"multiselect-item multiselect-group\"><a href=\"javascript:void(0);\"><label><b></b></label></a></li>');\n\n                var classes = this.options.optionClass(group);\n                $li.addClass(classes);\n\n                if (this.options.enableHTML) {\n                    $('label b', $li).html(\" \" + label);\n                } else {\n                    $('label b', $li).text(\" \" + label);\n                }\n\n                if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n                    $('a', $li).append('<span class=\"caret-container\"><b class=\"caret\"></b></span>');\n                }\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    $('a label', $li).prepend('<input type=\"checkbox\" value=\"' + value + '\"/>');\n                }\n\n                if ($(group).is(':disabled')) {\n                    $li.addClass('disabled');\n                }\n\n                this.$ul.append($li);\n\n                $(\"option\", group).each($.proxy(function ($, group) {\n                    this.createOptionValue(group);\n                }, this));\n            },\n\n            /**\n             * Build the select all.\n             *\n             * Checks if a select all has already been created.\n             */\n            buildSelectAll: function buildSelectAll() {\n                if (typeof this.options.selectAllValue === 'number') {\n                    this.options.selectAllValue = this.options.selectAllValue.toString();\n                }\n\n                var alreadyHasSelectAll = this.hasSelectAll();\n\n                if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\n\n                    // Check whether to add a divider after the select all.\n                    if (this.options.includeSelectAllDivider) {\n                        this.$ul.prepend($(this.options.templates.divider));\n                    }\n\n                    var $li = $(this.options.templates.li);\n                    $('label', $li).addClass(\"checkbox\");\n\n                    if (this.options.enableHTML) {\n                        $('label', $li).html(\" \" + this.options.selectAllText);\n                    } else {\n                        $('label', $li).text(\" \" + this.options.selectAllText);\n                    }\n\n                    if (this.options.selectAllName) {\n                        $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\n                    } else {\n                        $('label', $li).prepend('<input type=\"checkbox\" />');\n                    }\n\n                    var $checkbox = $('input', $li);\n                    $checkbox.val(this.options.selectAllValue);\n\n                    $li.addClass(\"multiselect-item multiselect-all\");\n                    $checkbox.parent().parent().addClass('multiselect-all');\n\n                    this.$ul.prepend($li);\n\n                    $checkbox.prop('checked', false);\n                }\n            },\n\n            /**\n             * Builds the filter.\n             */\n            buildFilter: function buildFilter() {\n\n                // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\n                if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\n                    var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\n\n                    if (this.$select.find('option').length >= enableFilterLength) {\n\n                        this.$filter = $(this.options.templates.filter);\n                        $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);\n\n                        // Adds optional filter clear button\n                        if (this.options.includeFilterClearBtn) {\n                            var clearBtn = $(this.options.templates.filterClearBtn);\n                            clearBtn.on('click', $.proxy(function (event) {\n                                clearTimeout(this.searchTimeout);\n\n                                this.$filter.find('.multiselect-search').val('');\n                                $('li', this.$ul).show().removeClass('multiselect-filter-hidden');\n\n                                this.updateSelectAll();\n\n                                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                                    this.updateOptGroups();\n                                }\n                            }, this));\n                            this.$filter.find('.input-group').append(clearBtn);\n                        }\n\n                        this.$ul.prepend(this.$filter);\n\n                        this.$filter.val(this.query).on('click', function (event) {\n                            event.stopPropagation();\n                        }).on('input keydown', $.proxy(function (event) {\n                            // Cancel enter key default behaviour\n                            if (event.which === 13) {\n                                event.preventDefault();\n                            }\n\n                            // This is useful to catch \"keydown\" events after the browser has updated the control.\n                            clearTimeout(this.searchTimeout);\n\n                            this.searchTimeout = this.asyncFunction($.proxy(function () {\n\n                                if (this.query !== event.target.value) {\n                                    this.query = event.target.value;\n\n                                    var currentGroup, currentGroupVisible;\n                                    $.each($('li', this.$ul), $.proxy(function (index, element) {\n                                        var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\n                                        var text = $('label', element).text();\n\n                                        var filterCandidate = '';\n                                        if (this.options.filterBehavior === 'text') {\n                                            filterCandidate = text;\n                                        } else if (this.options.filterBehavior === 'value') {\n                                            filterCandidate = value;\n                                        } else if (this.options.filterBehavior === 'both') {\n                                            filterCandidate = text + '\\n' + value;\n                                        }\n\n                                        if (value !== this.options.selectAllValue && text) {\n\n                                            // By default lets assume that element is not\n                                            // interesting for this search.\n                                            var showElement = false;\n\n                                            if (this.options.enableCaseInsensitiveFiltering) {\n                                                filterCandidate = filterCandidate.toLowerCase();\n                                                this.query = this.query.toLowerCase();\n                                            }\n\n                                            if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\n                                                var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\n                                                if (this.query.indexOf(valueToMatch) > -1) {\n                                                    showElement = true;\n                                                }\n                                            } else if (filterCandidate.indexOf(this.query) > -1) {\n                                                showElement = true;\n                                            }\n\n                                            // Toggle current element (group or group item) according to showElement boolean.\n                                            $(element).toggle(showElement).toggleClass('multiselect-filter-hidden', !showElement);\n\n                                            // Differentiate groups and group items.\n                                            if ($(element).hasClass('multiselect-group')) {\n                                                // Remember group status.\n                                                currentGroup = element;\n                                                currentGroupVisible = showElement;\n                                            } else {\n                                                // Show group name when at least one of its items is visible.\n                                                if (showElement) {\n                                                    $(currentGroup).show().removeClass('multiselect-filter-hidden');\n                                                }\n\n                                                // Show all group items when group name satisfies filter.\n                                                if (!showElement && currentGroupVisible) {\n                                                    $(element).show().removeClass('multiselect-filter-hidden');\n                                                }\n                                            }\n                                        }\n                                    }, this));\n                                }\n\n                                this.updateSelectAll();\n\n                                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                                    this.updateOptGroups();\n                                }\n\n                                this.options.onFiltering(event.target);\n                            }, this), 300, this);\n                        }, this));\n                    }\n                }\n            },\n\n            /**\n             * Unbinds the whole plugin.\n             */\n            destroy: function destroy() {\n                this.$container.remove();\n                this.$select.show();\n\n                // reset original state\n                this.$select.prop('disabled', this.options.wasDisabled);\n\n                this.$select.data('multiselect', null);\n            },\n\n            /**\n             * Refreshs the multiselect based on the selected options of the select.\n             */\n            refresh: function refresh() {\n                var inputs = $.map($('li input', this.$ul), $);\n\n                $('option', this.$select).each($.proxy(function (index, element) {\n                    var $elem = $(element);\n                    var value = $elem.val();\n                    var $input;\n                    for (var i = inputs.length; 0 < i--;) /**/{\n                        if (value !== ($input = inputs[i]).val()) continue; // wrong li\n\n                        if ($elem.is(':selected')) {\n                            $input.prop('checked', true);\n\n                            if (this.options.selectedClass) {\n                                $input.closest('li').addClass(this.options.selectedClass);\n                            }\n                        } else {\n                            $input.prop('checked', false);\n\n                            if (this.options.selectedClass) {\n                                $input.closest('li').removeClass(this.options.selectedClass);\n                            }\n                        }\n\n                        if ($elem.is(\":disabled\")) {\n                            $input.attr('disabled', 'disabled').prop('disabled', true).closest('li').addClass('disabled');\n                        } else {\n                            $input.prop('disabled', false).closest('li').removeClass('disabled');\n                        }\n                        break; // assumes unique values\n                    }\n                }, this));\n\n                this.updateButtonText();\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    this.updateOptGroups();\n                }\n            },\n\n            /**\n             * Select all options of the given values.\n             *\n             * If triggerOnChange is set to true, the on change event is triggered if\n             * and only if one value is passed.\n             *\n             * @param {Array} selectValues\n             * @param {Boolean} triggerOnChange\n             */\n            select: function select(selectValues, triggerOnChange) {\n                if (!$.isArray(selectValues)) {\n                    selectValues = [selectValues];\n                }\n\n                for (var i = 0; i < selectValues.length; i++) {\n                    var value = selectValues[i];\n\n                    if (value === null || value === undefined) {\n                        continue;\n                    }\n\n                    var $option = this.getOptionByValue(value);\n                    var $checkbox = this.getInputByValue(value);\n\n                    if ($option === undefined || $checkbox === undefined) {\n                        continue;\n                    }\n\n                    if (!this.options.multiple) {\n                        this.deselectAll(false);\n                    }\n\n                    if (this.options.selectedClass) {\n                        $checkbox.closest('li').addClass(this.options.selectedClass);\n                    }\n\n                    $checkbox.prop('checked', true);\n                    $option.prop('selected', true);\n\n                    if (triggerOnChange) {\n                        this.options.onChange($option, true);\n                    }\n                }\n\n                this.updateButtonText();\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    this.updateOptGroups();\n                }\n            },\n\n            /**\n             * Clears all selected items.\n             */\n            clearSelection: function clearSelection() {\n                this.deselectAll(false);\n                this.updateButtonText();\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    this.updateOptGroups();\n                }\n            },\n\n            /**\n             * Deselects all options of the given values.\n             *\n             * If triggerOnChange is set to true, the on change event is triggered, if\n             * and only if one value is passed.\n             *\n             * @param {Array} deselectValues\n             * @param {Boolean} triggerOnChange\n             */\n            deselect: function deselect(deselectValues, triggerOnChange) {\n                if (!$.isArray(deselectValues)) {\n                    deselectValues = [deselectValues];\n                }\n\n                for (var i = 0; i < deselectValues.length; i++) {\n                    var value = deselectValues[i];\n\n                    if (value === null || value === undefined) {\n                        continue;\n                    }\n\n                    var $option = this.getOptionByValue(value);\n                    var $checkbox = this.getInputByValue(value);\n\n                    if ($option === undefined || $checkbox === undefined) {\n                        continue;\n                    }\n\n                    if (this.options.selectedClass) {\n                        $checkbox.closest('li').removeClass(this.options.selectedClass);\n                    }\n\n                    $checkbox.prop('checked', false);\n                    $option.prop('selected', false);\n\n                    if (triggerOnChange) {\n                        this.options.onChange($option, false);\n                    }\n                }\n\n                this.updateButtonText();\n                this.updateSelectAll();\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    this.updateOptGroups();\n                }\n            },\n\n            /**\n             * Selects all enabled & visible options.\n             *\n             * If justVisible is true or not specified, only visible options are selected.\n             *\n             * @param {Boolean} justVisible\n             * @param {Boolean} triggerOnSelectAll\n             */\n            selectAll: function selectAll(justVisible, triggerOnSelectAll) {\n\n                var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n                var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n                var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n\n                if (justVisible) {\n                    $('input:enabled', visibleLis).prop('checked', true);\n                    visibleLis.addClass(this.options.selectedClass);\n\n                    $('input:enabled', visibleLis).each($.proxy(function (index, element) {\n                        var value = $(element).val();\n                        var option = this.getOptionByValue(value);\n                        $(option).prop('selected', true);\n                    }, this));\n                } else {\n                    $('input:enabled', allLis).prop('checked', true);\n                    allLis.addClass(this.options.selectedClass);\n\n                    $('input:enabled', allLis).each($.proxy(function (index, element) {\n                        var value = $(element).val();\n                        var option = this.getOptionByValue(value);\n                        $(option).prop('selected', true);\n                    }, this));\n                }\n\n                $('li input[value=\"' + this.options.selectAllValue + '\"]', this.$ul).prop('checked', true);\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    this.updateOptGroups();\n                }\n\n                if (triggerOnSelectAll) {\n                    this.options.onSelectAll();\n                }\n            },\n\n            /**\n             * Deselects all options.\n             *\n             * If justVisible is true or not specified, only visible options are deselected.\n             *\n             * @param {Boolean} justVisible\n             */\n            deselectAll: function deselectAll(justVisible, triggerOnDeselectAll) {\n\n                var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n                var allLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group)\", this.$ul);\n                var visibleLis = $(\"li:not(.divider):not(.disabled):not(.multiselect-group):not(.multiselect-filter-hidden):not(.multiselect-collapisble-hidden)\", this.$ul).filter(':visible');\n\n                if (justVisible) {\n                    $('input[type=\"checkbox\"]:enabled', visibleLis).prop('checked', false);\n                    visibleLis.removeClass(this.options.selectedClass);\n\n                    $('input[type=\"checkbox\"]:enabled', visibleLis).each($.proxy(function (index, element) {\n                        var value = $(element).val();\n                        var option = this.getOptionByValue(value);\n                        $(option).prop('selected', false);\n                    }, this));\n                } else {\n                    $('input[type=\"checkbox\"]:enabled', allLis).prop('checked', false);\n                    allLis.removeClass(this.options.selectedClass);\n\n                    $('input[type=\"checkbox\"]:enabled', allLis).each($.proxy(function (index, element) {\n                        var value = $(element).val();\n                        var option = this.getOptionByValue(value);\n                        $(option).prop('selected', false);\n                    }, this));\n                }\n\n                $('li input[value=\"' + this.options.selectAllValue + '\"]', this.$ul).prop('checked', false);\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    this.updateOptGroups();\n                }\n\n                if (triggerOnDeselectAll) {\n                    this.options.onDeselectAll();\n                }\n            },\n\n            /**\n             * Rebuild the plugin.\n             *\n             * Rebuilds the dropdown, the filter and the select all option.\n             */\n            rebuild: function rebuild() {\n                this.$ul.html('');\n\n                // Important to distinguish between radios and checkboxes.\n                this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n\n                this.buildSelectAll();\n                this.buildDropdownOptions();\n                this.buildFilter();\n\n                this.updateButtonText();\n                this.updateSelectAll(true);\n\n                if (this.options.enableClickableOptGroups && this.options.multiple) {\n                    this.updateOptGroups();\n                }\n\n                if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n                    this.disable();\n                } else {\n                    this.enable();\n                }\n\n                if (this.options.dropRight) {\n                    this.$ul.addClass('pull-right');\n                }\n            },\n\n            /**\n             * The provided data will be used to build the dropdown.\n             */\n            dataprovider: function dataprovider(_dataprovider) {\n\n                var groupCounter = 0;\n                var $select = this.$select.empty();\n\n                $.each(_dataprovider, function (index, option) {\n                    var $tag;\n\n                    if ($.isArray(option.children)) {\n                        // create optiongroup tag\n                        groupCounter++;\n\n                        $tag = $('<optgroup/>').attr({\n                            label: option.label || 'Group ' + groupCounter,\n                            disabled: !!option.disabled\n                        });\n\n                        forEach(option.children, function (subOption) {\n                            // add children option tags\n                            var attributes = {\n                                value: subOption.value,\n                                label: subOption.label || subOption.value,\n                                title: subOption.title,\n                                selected: !!subOption.selected,\n                                disabled: !!subOption.disabled\n                            };\n\n                            //Loop through attributes object and add key-value for each attribute\n                            for (var key in subOption.attributes) {\n                                attributes['data-' + key] = subOption.attributes[key];\n                            }\n                            //Append original attributes + new data attributes to option\n                            $tag.append($('<option/>').attr(attributes));\n                        });\n                    } else {\n\n                        var attributes = {\n                            'value': option.value,\n                            'label': option.label || option.value,\n                            'title': option.title,\n                            'class': option.class,\n                            'selected': !!option.selected,\n                            'disabled': !!option.disabled\n                        };\n                        //Loop through attributes object and add key-value for each attribute\n                        for (var key in option.attributes) {\n                            attributes['data-' + key] = option.attributes[key];\n                        }\n                        //Append original attributes + new data attributes to option\n                        $tag = $('<option/>').attr(attributes);\n\n                        $tag.text(option.label || option.value);\n                    }\n\n                    $select.append($tag);\n                });\n\n                this.rebuild();\n            },\n\n            /**\n             * Enable the multiselect.\n             */\n            enable: function enable() {\n                this.$select.prop('disabled', false);\n                this.$button.prop('disabled', false).removeClass('disabled');\n            },\n\n            /**\n             * Disable the multiselect.\n             */\n            disable: function disable() {\n                this.$select.prop('disabled', true);\n                this.$button.prop('disabled', true).addClass('disabled');\n            },\n\n            /**\n             * Set the options.\n             *\n             * @param {Array} options\n             */\n            setOptions: function setOptions(options) {\n                this.options = this.mergeOptions(options);\n            },\n\n            /**\n             * Merges the given options with the default options.\n             *\n             * @param {Array} options\n             * @returns {Array}\n             */\n            mergeOptions: function mergeOptions(options) {\n                return $.extend(true, {}, this.defaults, this.options, options);\n            },\n\n            /**\n             * Checks whether a select all checkbox is present.\n             *\n             * @returns {Boolean}\n             */\n            hasSelectAll: function hasSelectAll() {\n                return $('li.multiselect-all', this.$ul).length > 0;\n            },\n\n            /**\n             * Update opt groups.\n             */\n            updateOptGroups: function updateOptGroups() {\n                var $groups = $('li.multiselect-group', this.$ul);\n                var selectedClass = this.options.selectedClass;\n\n                $groups.each(function () {\n                    var $options = $(this).nextUntil('li.multiselect-group').not('.multiselect-filter-hidden').not('.disabled');\n\n                    var checked = true;\n                    $options.each(function () {\n                        var $input = $('input', this);\n\n                        if (!$input.prop('checked')) {\n                            checked = false;\n                        }\n                    });\n\n                    if (selectedClass) {\n                        if (checked) {\n                            $(this).addClass(selectedClass);\n                        } else {\n                            $(this).removeClass(selectedClass);\n                        }\n                    }\n\n                    $('input', this).prop('checked', checked);\n                });\n            },\n\n            /**\n             * Updates the select all checkbox based on the currently displayed and selected checkboxes.\n             */\n            updateSelectAll: function updateSelectAll(notTriggerOnSelectAll) {\n                if (this.hasSelectAll()) {\n                    var allBoxes = $(\"li:not(.multiselect-item):not(.multiselect-filter-hidden):not(.multiselect-group):not(.disabled) input:enabled\", this.$ul);\n                    var allBoxesLength = allBoxes.length;\n                    var checkedBoxesLength = allBoxes.filter(\":checked\").length;\n                    var selectAllLi = $(\"li.multiselect-all\", this.$ul);\n                    var selectAllInput = selectAllLi.find(\"input\");\n\n                    if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\n                        selectAllInput.prop(\"checked\", true);\n                        selectAllLi.addClass(this.options.selectedClass);\n                    } else {\n                        selectAllInput.prop(\"checked\", false);\n                        selectAllLi.removeClass(this.options.selectedClass);\n                    }\n                }\n            },\n\n            /**\n             * Update the button text and its title based on the currently selected options.\n             */\n            updateButtonText: function updateButtonText() {\n                var options = this.getSelected();\n\n                // First update the displayed button text.\n                if (this.options.enableHTML) {\n                    $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\n                } else {\n                    $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\n                }\n\n                // Now update the title attribute of the button.\n                $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\n            },\n\n            /**\n             * Get all selected options.\n             *\n             * @returns {jQUery}\n             */\n            getSelected: function getSelected() {\n                return $('option', this.$select).filter(\":selected\");\n            },\n\n            /**\n             * Gets a select option by its value.\n             *\n             * @param {String} value\n             * @returns {jQuery}\n             */\n            getOptionByValue: function getOptionByValue(value) {\n\n                var options = $('option', this.$select);\n                var valueToCompare = value.toString();\n\n                for (var i = 0; i < options.length; i = i + 1) {\n                    var option = options[i];\n                    if (option.value === valueToCompare) {\n                        return $(option);\n                    }\n                }\n            },\n\n            /**\n             * Get the input (radio/checkbox) by its value.\n             *\n             * @param {String} value\n             * @returns {jQuery}\n             */\n            getInputByValue: function getInputByValue(value) {\n\n                var checkboxes = $('li input:not(.multiselect-search)', this.$ul);\n                var valueToCompare = value.toString();\n\n                for (var i = 0; i < checkboxes.length; i = i + 1) {\n                    var checkbox = checkboxes[i];\n                    if (checkbox.value === valueToCompare) {\n                        return $(checkbox);\n                    }\n                }\n            },\n\n            /**\n             * Used for knockout integration.\n             */\n            updateOriginalOptions: function updateOriginalOptions() {\n                this.originalOptions = this.$select.clone()[0].options;\n            },\n\n            asyncFunction: function asyncFunction(callback, timeout, self) {\n                var args = Array.prototype.slice.call(arguments, 3);\n                return setTimeout(function () {\n                    callback.apply(self || window, args);\n                }, timeout);\n            },\n\n            setAllSelectedText: function setAllSelectedText(allSelectedText) {\n                this.options.allSelectedText = allSelectedText;\n                this.updateButtonText();\n            }\n        };\n\n        $.fn.multiselect = function (option, parameter, extraOptions) {\n            return this.each(function () {\n                var data = $(this).data('multiselect');\n                var options = (typeof option === \"undefined\" ? \"undefined\" : _typeof(option)) === 'object' && option;\n\n                // Initialize the multiselect.\n                if (!data) {\n                    data = new Multiselect(this, options);\n                    $(this).data('multiselect', data);\n                }\n\n                // Call multiselect method.\n                if (typeof option === 'string') {\n                    data[option](parameter, extraOptions);\n\n                    if (option === 'destroy') {\n                        $(this).data('multiselect', false);\n                    }\n                }\n            });\n        };\n\n        $.fn.multiselect.Constructor = Multiselect;\n\n        $(function () {\n            $(\"select[data-role=multiselect]\").multiselect();\n        });\n    }(jQuery);\n\n    return jQuery;\n};"]},"metadata":{},"sourceType":"script"}