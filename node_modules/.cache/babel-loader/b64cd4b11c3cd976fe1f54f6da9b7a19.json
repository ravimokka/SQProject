{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Management/OperationalCharts/GroupBarChart.js\";\nimport { Chart, Tooltip, Axis, Legend, Pie, Coord, Line, Bar, Point } from 'viser-react';\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress, Form, Modal, Table } from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport { CSVLink } from \"react-csv\";\n\nconst DataSet = require('@antv/data-set');\n\nclass GroupBarChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      this.setState({\n        value_x: e.target.value\n      });\n    };\n\n    this.handleSubmit1 = e => {\n      this.setState({\n        value_y: e.target.value\n      });\n    };\n\n    this.handleSubmit12 = e => {\n      e.preventDefault();\n      this.loadGroupBarData({\n        A: this.state.value_x,\n        B: this.state.value_y\n      });\n    };\n\n    this.state = {\n      group_bar_options: {\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            dataLabels: {\n              position: 'top'\n            }\n          }\n        },\n        dataLabels: {\n          enabled: false,\n          offsetX: -6,\n          style: {\n            fontSize: '12px',\n            colors: ['#fff']\n          }\n        },\n        stroke: {\n          show: true,\n          width: 1,\n          colors: ['#fff']\n        },\n        xaxis: {\n          categories: [\"\"],\n          labels: {\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          }\n        },\n        yaxis: {\n          categories: [2001, 2002, 2003, 2004, 2005, 2006, 2007],\n          labels: {\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          }\n        }\n      },\n      books: [],\n      intHeader: [],\n      filter: [],\n      select_group: \"Group\",\n      select_amount: \"Amount\",\n      chart_data: [],\n      donut_data: [],\n      pie_data: [],\n      bar_data: [],\n      ve_bar_data: [],\n      line_data: [{\n        name: \"\",\n        'A': 1,\n        'B': 12\n      }],\n      field_list: [\"A\", \"B\"],\n      chartData: [],\n      sourceData: [],\n      line_chart_source_data: [{\n        name: 'A',\n        value: 13000000\n      }],\n      sourceData_donut: [],\n      value_xl: \"Status\",\n      value_yl: \"Amount_USD\",\n      table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      Gbar_table_columns: [{\n        title: 'Order Number',\n        dataIndex: 'oNumber',\n        key: 'oNumber'\n      }],\n      Gbar_table_data: [{\n        key: '1',\n        oNumber: 'DVO524'\n      }],\n      download_group_barChart_table: [{\n        firstname: \"Ravi\",\n        lastname: \"Tomi\",\n        email: \"ah@smthing.co.com\"\n      }]\n    };\n  } // ============================= Loading all charts ====================================================================\n\n\n  componentWillMount() {\n    this.loadAnalytical();\n    this.loadIntHeaders();\n    this.loadAllChartData({\n      A: \"Group\",\n      B: \"Amount\"\n    });\n  }\n\n  async loadAnalytical() {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_header_api\", {\n      firstName: 'Mokka Ravi',\n      lastName: 'Flintstone'\n    });\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({\n        books: data\n      });\n    }\n  }\n\n  async loadIntHeaders() {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_int_header_api\", {\n      firstName: 'Mokka Ravi',\n      lastName: 'Flintstone'\n    });\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({\n        intHeader: data\n      });\n      const d = [{\n        'name': 'Actual',\n        'data': []\n      }, {\n        'name': 'Budget',\n        'data': []\n      }];\n      const dou = [1, 3, 4];\n      this.setState({\n        donut_data: dou\n      });\n      this.setState({\n        chart_data: d\n      });\n      console.log(this.state.chart_data);\n    }\n  }\n\n  async loadAllChartData(data) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    };\n    this.setState({\n      load_table_columns: []\n    });\n    this.setState({\n      load_table_data: []\n    });\n    this.setState({\n      line_data: []\n    });\n    this.setState({\n      field_list: []\n    });\n    this.setState({\n      line_chart_source_data: []\n    });\n    this.setState({\n      chart_data: []\n    });\n    this.setState({\n      area_chart_series: []\n    });\n    this.setState({\n      download_lineChart_table: []\n    });\n    this.setState({\n      download_group_barChart_table: []\n    });\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_all_data_api\", options);\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      var l_data = [data];\n      var table_dict = [data];\n      this.setState(data);\n      var i;\n      var keys_list = [];\n      var line_value_list = [];\n      var line_chart_list = [];\n      var load_bar_chart_list = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {};\n      var area_list = [];\n      var area_chart_data = [];\n\n      for (i = 0; i < Object.keys(data).length; i++) {\n        console.log(data[i]);\n        var key = Object.keys(data)[i];\n        keys_list.push(key);\n        var value = data[key];\n        line_value_list.push(value);\n        var data_dict = {};\n        data_dict['name'] = key;\n        data_dict['value'] = value;\n        line_chart_list.push(data_dict);\n        var load_data_dict = {};\n        load_data_dict['name'] = key;\n        load_data_dict['data'] = [value];\n        load_bar_chart_list.push(load_data_dict);\n        var column_dict = {};\n        column_dict['title'] = key;\n        column_dict['dataIndex'] = key;\n        column_dict['key'] = key;\n        table_data_dict[key] = value;\n        table_column_list.push(column_dict);\n        var area_dict = {};\n        area_list.push(value);\n        area_dict['name'] = key;\n        area_dict['data'] = area_list;\n        area_chart_data.push(area_dict);\n      }\n\n      table_data_list.push(table_data_dict);\n      this.setState({\n        line_chart_source_data: line_chart_list\n      });\n      this.setState({\n        field_list: keys_list\n      });\n      this.setState({\n        chart_data: load_bar_chart_list\n      });\n      this.setState({\n        area_chart_series: area_chart_data\n      });\n      this.setState({\n        line_table_columns: table_column_list\n      });\n      this.setState({\n        line_table_data: table_data_list\n      });\n      this.setState({\n        Gbar_table_columns: table_column_list\n      });\n      this.setState({\n        Gbar_table_data: table_data_list\n      });\n      this.setState({\n        mix_table_columns: table_column_list\n      });\n      this.setState({\n        mix_table_data: table_data_list\n      });\n      this.setState({\n        area_table_columns: table_column_list\n      });\n      this.setState({\n        area_table_data: table_data_list\n      });\n      this.setState({\n        download_lineChart_table: table_dict\n      });\n      this.setState({\n        download_group_barChart_table: table_dict\n      });\n      this.setState({\n        download_areaChart_table: table_dict\n      });\n    }\n  } //================================================ Group Bar Chart ====================================================================\n\n\n  async loadGroupBarData(data) {\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(data)\n    };\n    this.setState({\n      chart_data: []\n    });\n    this.setState({\n      Gbar_table_columns: []\n    });\n    this.setState({\n      Gbar_table_data: []\n    });\n    this.setState({\n      download_group_barChart_table: []\n    });\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_all_data_api\", options);\n    const status = promise.status;\n\n    if (status === 200) {\n      const data = promise.data.data;\n      var table_dict = data;\n      this.setState(data);\n      var i;\n      var keys_list = [];\n      var value_list = [];\n      var chart_list = [];\n      var table_column_list = [];\n      var table_data_list = [];\n      var table_data_dict = {};\n\n      for (i = 0; i < Object.keys(data).length; i++) {\n        console.log(data[i]);\n        var key = Object.keys(data)[i]; //            keys_list.push(key)\n\n        var value = data[key]; //            value_list.push(value)\n\n        var data_dict = {};\n        data_dict['name'] = key;\n        data_dict['data'] = [value];\n        chart_list.push(data_dict);\n        var column_dict = {};\n        column_dict['title'] = key;\n        column_dict['dataIndex'] = key;\n        column_dict['key'] = key;\n        table_data_dict[key] = value;\n        table_column_list.push(column_dict);\n      }\n\n      table_data_list.push(table_data_dict);\n      const g_data = [this.state.Actual, this.state.Budget];\n      this.setState({\n        g: g_data\n      });\n      this.setState({\n        chart_data: chart_list\n      });\n      this.setState({\n        Gbar_table_columns: table_column_list\n      });\n      this.setState({\n        Gbar_table_data: table_data_list\n      });\n      this.setState({\n        download_group_barChart_table: [table_dict]\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      class: \"custom-select\",\n      value: this.state.value_x,\n      onChange: this.handleSubmit,\n      style: {\n        width: \"110px\",\n        marginLeft: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, this.state.select_group), this.state.books.map((value, index) => {\n      return React.createElement(\"option\", {\n        class: \"btn btn-custom btn-block btn-detail\",\n        style: {\n          cursor: \"pointer;\",\n          fontSize: \"14px\"\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, \" \", value, \" \");\n    })), React.createElement(\"select\", {\n      class: \"custom-select\",\n      value: this.state.value_y,\n      onChange: this.handleSubmit1,\n      style: {\n        width: \"110px\",\n        marginLeft: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, this.state.select_amount), this.state.intHeader.map((value, index) => {\n      return React.createElement(\"option\", {\n        class: \"btn btn-custom btn-block btn-detail\",\n        style: {\n          cursor: \"pointer;\",\n          fontSize: \"14px\"\n        },\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, \" \", value, \" \");\n    })), React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleSubmit12,\n      className: \"btn btn-info\",\n      style: {\n        marginLeft: \"10px\"\n      },\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"OK\")), React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      \"data-toggle\": \"modal\",\n      \"data-target\": \"#myModal_GroupBar\",\n      style: {\n        marginLeft: \"3px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Table View\"), React.createElement(\"div\", {\n      class: \"modal fade\",\n      id: \"myModal_GroupBar\",\n      role: \"dialog\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"modal-dialog\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"modal-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"modal-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      class: \"modal-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"Group Bar TableData\")), React.createElement(\"div\", {\n      class: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(Table, {\n      columns: this.state.Gbar_table_columns,\n      dataSource: this.state.Gbar_table_data,\n      style: {\n        overflowY: \"scroll\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      class: \"modal-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-info\",\n      \"data-dismiss\": \"modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"Close\"), React.createElement(CSVLink, {\n      data: this.state.download_group_barChart_table,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \" Download \")), \";\")))), React.createElement(ReactApexChart, {\n      options: this.state.group_bar_options,\n      series: this.state.chart_data,\n      type: \"bar\",\n      width: \"420\",\n      height: \"350\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GroupBarChart;","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Management/OperationalCharts/GroupBarChart.js"],"names":["Chart","Tooltip","Axis","Legend","Pie","Coord","Line","Bar","Point","React","Row","Col","Card","Button","Icon","Progress","Form","Modal","Table","axios","ReactApexChart","$","Popper","CSVLink","DataSet","require","GroupBarChart","Component","constructor","props","handleSubmit","e","setState","value_x","target","value","handleSubmit1","value_y","handleSubmit12","preventDefault","loadGroupBarData","A","state","B","group_bar_options","plotOptions","bar","horizontal","dataLabels","position","enabled","offsetX","style","fontSize","colors","stroke","show","width","xaxis","categories","labels","formatter","val","Math","round","yaxis","books","intHeader","filter","select_group","select_amount","chart_data","donut_data","pie_data","bar_data","ve_bar_data","line_data","name","field_list","chartData","sourceData","line_chart_source_data","sourceData_donut","value_xl","value_yl","table_columns","title","dataIndex","key","table_data","oNumber","Gbar_table_columns","Gbar_table_data","download_group_barChart_table","firstname","lastname","email","componentWillMount","loadAnalytical","loadIntHeaders","loadAllChartData","promise","post","firstName","lastName","status","data","console","log","d","dou","headers","Headers","append","options","method","body","JSON","stringify","load_table_columns","load_table_data","area_chart_series","download_lineChart_table","l_data","table_dict","i","keys_list","line_value_list","line_chart_list","load_bar_chart_list","table_column_list","table_data_list","table_data_dict","area_list","area_chart_data","Object","keys","length","push","data_dict","load_data_dict","column_dict","area_dict","line_table_columns","line_table_data","mix_table_columns","mix_table_data","area_table_columns","area_table_data","download_areaChart_table","value_list","chart_list","g_data","Actual","Budget","g","render","marginLeft","map","index","cursor","overflowY"],"mappings":"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","sourcesContent":["import { Chart, Tooltip, Axis, Legend, Pie, Coord, Line, Bar, Point} from 'viser-react';\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress, Form , Modal, Table} from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport { CSVLink } from \"react-csv\";\n\nconst DataSet = require('@antv/data-set');\n\nclass GroupBarChart extends React.Component {\n\n constructor(props) {\n    super(props);\n   this.state = {\n\n        group_bar_options: {\n                    plotOptions: {\n                      bar: {\n                        horizontal: true,\n                        dataLabels: {\n                          position: 'top',\n                        },\n                      }\n                    },\n                    dataLabels: {\n                      enabled: false,\n                      offsetX: -6,\n                      style: {\n                        fontSize: '12px',\n                        colors: ['#fff']\n                      }\n                    },\n                    stroke: {\n                      show: true,\n                      width: 1,\n                      colors: ['#fff']\n                    },\n\n                    xaxis: {\n                      categories: [\"\"],\n                      labels: {\n                            formatter: function(val) {\n                               if (val < 100000) {\n                                            return Math.round((val/1000) * 10)/10+'k';\n                                        }\n                                else if (val >= 1000000){\n\n                                return val=(val/1000000)+\"M\";\n\n                                }\n                                 else {\n                                            return val;\n                                        }\n\n                            }\n                        }\n                    },\n                    yaxis: {\n                      categories: [2001, 2002, 2003, 2004, 2005, 2006, 2007],\n                      labels: {\n                            formatter: function(val) {\n                               if (val < 100000) {\n                                            return Math.round((val/1000) * 10)/10+'k';\n                                        }\n                                else if (val >= 1000000){\n\n                                return val=(val/1000000)+\"M\";\n\n                                }\n                                 else {\n                                            return val;\n                                        }\n\n                            }\n                        }\n                    }\n                  },\n\n      books:[],\n     intHeader:[],\n     filter:[],\n     select_group:\"Group\",\n     select_amount:\"Amount\",\n     chart_data:[],\n     donut_data:[],\n     pie_data:[],\n     bar_data:[],\n     ve_bar_data:[],\n     line_data:[{name:\"\", 'A':1, 'B':12}],\n     field_list:[\"A\",\"B\"],\n     chartData: [],\n     sourceData :[],\n     line_chart_source_data:[{name: 'A', value: 13000000}],\n     sourceData_donut:[],\n     value_xl : \"Status\",\n     value_yl : \"Amount_USD\",\n\n     table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     table_data : [{ key: '1', oNumber: 'DVO524',}],\n\n     Gbar_table_columns : [{ title: 'Order Number',dataIndex: 'oNumber', key: 'oNumber',}],\n     Gbar_table_data : [{ key: '1', oNumber: 'DVO524',}],\n     download_group_barChart_table :[{ firstname: \"Ravi\", lastname: \"Tomi\", email: \"ah@smthing.co.com\" }],\n     \n\n   }\n }\n\n// ============================= Loading all charts ====================================================================\n\ncomponentWillMount() {\n    this.loadAnalytical();\n     this.loadIntHeaders();\n     this.loadAllChartData({A:\"Group\", B:\"Amount\"});\n\n  }\n\n async loadAnalytical()\n  {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_header_api\", { firstName: 'Mokka Ravi', lastName: 'Flintstone' });\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({books:data});\n    }\n  }\n\nasync loadIntHeaders()\n  {\n    const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_int_header_api\", { firstName: 'Mokka Ravi', lastName: 'Flintstone' });\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.data;\n      console.log(data);\n      this.setState({intHeader:data});\n      const d = [{'name': 'Actual','data': []}, {'name': 'Budget','data': []}]\n      const dou = [1,3,4]\n      this.setState({donut_data:dou})\n      this.setState({chart_data:d})\n       console.log(this.state.chart_data);\n\n    }\n  }\n\nasync loadAllChartData(data){\n\n    const headers  = new Headers()\n    headers.append('Content-Type', 'application/json');\n    const options = {\n    method : 'POST',\n    headers,\n    body:JSON.stringify(data),\n    }\n    this.setState({load_table_columns : []})\n    this.setState({load_table_data : []})\n    this.setState({line_data : []})\n    this.setState({field_list : []})\n    this.setState({line_chart_source_data : []})\n    this.setState({chart_data:[]})\n    this.setState({area_chart_series:[]})\n\n     this.setState({download_lineChart_table:[]})\n     this.setState({download_group_barChart_table:[]})\n const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_all_data_api\", options);\n    const status = promise.status;\n\n    if(status===200)\n    {\n      const data = promise.data.data;\n      var l_data = [data];\n      var table_dict = [data]\n      this.setState(data);\n      var i;\n      var keys_list =[];\n      var line_value_list =[];\n      var line_chart_list = [];\n      var load_bar_chart_list = [];\n       var table_column_list = [];\n       var table_data_list = [];\n       var table_data_dict = {}\n       var area_list = [];\n       var area_chart_data = [];\n      for (i = 0; i < Object.keys(data).length; i++) {\n            console.log(data[i])\n            var key = Object.keys(data)[i]\n            keys_list.push(key)\n            var value = data[key]\n            line_value_list.push(value)\n            var data_dict = {};\n            data_dict['name']=key;\n            data_dict['value']=value;\n            line_chart_list.push(data_dict)\n            var load_data_dict = {};\n            load_data_dict['name']=key;\n            load_data_dict['data']=[value];\n            load_bar_chart_list.push(load_data_dict)\n            var column_dict = {}\n            column_dict['title'] =key;\n            column_dict['dataIndex'] =key;\n            column_dict['key'] =key;\n            table_data_dict[key] = value;\n            table_column_list.push(column_dict)\n\n            var area_dict = {}\n            area_list.push(value);\n            area_dict['name']=key;\n            area_dict['data'] = area_list;\n            area_chart_data.push(area_dict);\n\n\n        }\n       table_data_list.push(table_data_dict)\n\n\n      this.setState({line_chart_source_data:line_chart_list})\n      this.setState({field_list:keys_list})\n      this.setState({chart_data:load_bar_chart_list})\n      this.setState({area_chart_series:area_chart_data})\n\n\n      this.setState({line_table_columns:table_column_list})\n      this.setState({line_table_data:table_data_list})\n\n       this.setState({Gbar_table_columns:table_column_list})\n      this.setState({Gbar_table_data:table_data_list})\n\n       this.setState({mix_table_columns:table_column_list})\n      this.setState({mix_table_data:table_data_list})\n\n       this.setState({area_table_columns:table_column_list})\n      this.setState({area_table_data:table_data_list})\n\n\n       this.setState({download_lineChart_table:table_dict})\n       this.setState({download_group_barChart_table:table_dict})\n       this.setState({download_areaChart_table:table_dict})\n }\n}\n\n\n//================================================ Group Bar Chart ====================================================================\nhandleSubmit = (e) => {\n     this.setState({value_x: e.target.value});\n };\n\nhandleSubmit1 = (e) => {\n    this.setState({value_y: e.target.value});\n  };\n\n\nhandleSubmit12 = (e) => {\n    e.preventDefault();\n     this.loadGroupBarData(\n         {A:this.state.value_x, B:this.state.value_y}\n  );\n  };\n\n\nasync loadGroupBarData(data){\n\n    const headers  = new Headers()\n    headers.append('Content-Type', 'application/json');\n    const options = {\n    method : 'POST',\n    headers,\n    body:JSON.stringify(data),\n    }\n    this.setState({chart_data : []})\n    this.setState({Gbar_table_columns:[]})\n      this.setState({Gbar_table_data:[]})\n\n      this.setState({download_group_barChart_table:[]})\n const promise = await axios.post(\"http://127.0.0.1:8070/api/v1/ope_all_data_api\", options);\n    const status = promise.status;\n    if(status===200)\n    {\n      const data = promise.data.data;\n      var table_dict = data;\n      this.setState(data);\n      var i;\n      var keys_list =[];\n      var value_list =[];\n      var chart_list = [];\n       var table_column_list = [];\n       var table_data_list = [];\n       var table_data_dict = {}\n\n\n      for (i = 0; i < Object.keys(data).length; i++) {\n            console.log(data[i])\n            var key = Object.keys(data)[i]\n//            keys_list.push(key)\n            var value = data[key]\n//            value_list.push(value)\n            var data_dict = {};\n            data_dict['name']=key;\n            data_dict['data']=[value];\n            chart_list.push(data_dict)\n\n            var column_dict = {}\n            column_dict['title'] =key;\n            column_dict['dataIndex'] =key;\n            column_dict['key'] =key;\n            table_data_dict[key] = value;\n            table_column_list.push(column_dict)\n        }\n\n      table_data_list.push(table_data_dict)\n      const g_data = [this.state.Actual, this.state.Budget]\n      this.setState({g:g_data})\n      this.setState({chart_data:chart_list})\n\n      this.setState({Gbar_table_columns:table_column_list})\n      this.setState({Gbar_table_data:table_data_list})\n\n      this.setState({download_group_barChart_table:[table_dict]})\n    }\n\n}\n\n\n\nrender() {\n  return (\n   <div id=\"chart\">\n        <select class=\"custom-select\"  value={this.state.value_x} onChange={this.handleSubmit}\n            style={{ width:\"110px\", marginLeft:\"20px\" }}>\n             <option>{this.state.select_group}</option>\n             {this.state.books.map((value,index)=>\n                      {return   <option class=\"btn btn-custom btn-block btn-detail\"\n                      style={{ cursor: \"pointer;\", fontSize: \"14px\"}} key={index}> {value} </option> }\n                      )}\n       </select>\n       <select class=\"custom-select\"  value={this.state.value_y} onChange={this.handleSubmit1}\n            style={{ width:\"110px\", marginLeft:\"20px\" }}>\n             <option>{this.state.select_amount}</option>\n             {this.state.intHeader.map((value,index)=>\n                      {return   <option class=\"btn btn-custom btn-block btn-detail\"\n                      style={{ cursor: \"pointer;\", fontSize: \"14px\"}} key={index}> {value} </option> }\n                      )}\n       </select>\n       <React.Fragment>\n            <button onClick={this.handleSubmit12} className='btn btn-info' style={{marginLeft:\"10px\"}}\n              type='button'>OK</button>\n        </React.Fragment>\n        <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#myModal_GroupBar\"\n        style={{marginLeft:\"3px\"}}>Table View</button>\n          <div class=\"modal fade\" id=\"myModal_GroupBar\" role=\"dialog\">\n            <div class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                 {/* <button type=\"button\" class=\"close\" data-dismiss=\"modal\" style={{marginLeft:\"1px\"}}>&times;</button> */}\n                  <h4 class=\"modal-title\">Group Bar TableData</h4>\n                </div>\n                <div class=\"modal-body\">\n                 <Table columns={this.state.Gbar_table_columns} dataSource={this.state.Gbar_table_data} style={{overflowY:\"scroll\"}}/>\n\n                </div>\n                <div class=\"modal-footer\">\n                  <button type=\"button\" class=\"btn btn-info\" data-dismiss=\"modal\">Close</button>\n                  <CSVLink data={this.state.download_group_barChart_table}>\n                  <button type=\"button\" class=\"btn btn-primary\" > Download </button>\n                  </CSVLink>;\n                </div>\n              </div>\n\n            </div>\n          </div>\n\n      <ReactApexChart options={this.state.group_bar_options} series={this.state.chart_data}\n      type=\"bar\" width=\"420\" height=\"350\"/>\n   </div>\n    );\n  }\n}\nexport default GroupBarChart;"]},"metadata":{},"sourceType":"module"}