{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js\";\nimport { Chart, Tooltip, Axis, Legend, Pie, Coord, Line, Bar, Point } from 'viser-react';\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress } from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts';\n\nclass AnalyticalTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '55%',\n            endingShape: 'rounded'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          show: true,\n          width: 2,\n          colors: ['transparent']\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct']\n        },\n        yaxis: [{\n          axisTicks: {\n            show: true\n          },\n          axisBorder: {\n            show: true,\n            color: '#008FFB'\n          },\n          labels: {\n            style: {\n              color: '#008FFB'\n            },\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          },\n          title: {\n            text: \"Income (thousand crores)\",\n            style: {\n              color: '#008FFB'\n            }\n          },\n          tooltip: {\n            enabled: true\n          }\n        }, {\n          seriesName: 'Income',\n          opposite: true,\n          axisTicks: {\n            show: true\n          },\n          axisBorder: {\n            show: true,\n            color: '#00E396'\n          },\n          labels: {\n            style: {\n              color: '#00E396'\n            },\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          },\n          title: {\n            text: \"Operating Cashflow (thousand crores)\",\n            style: {\n              color: '#00E396'\n            }\n          }\n        }, {\n          seriesName: 'Revenue',\n          opposite: true,\n          axisTicks: {\n            show: true\n          },\n          axisBorder: {\n            show: true,\n            color: '#FEB019'\n          },\n          labels: {\n            style: {\n              color: '#FEB019'\n            },\n            formatter: function (val) {\n              if (val < 100000) {\n                return Math.round(val / 1000 * 10) / 10 + 'k';\n              } else if (val >= 1000000) {\n                return val = val / 1000000 + \"M\";\n              } else {\n                return val;\n              }\n            }\n          },\n          title: {\n            text: \"Revenue (thousand crores)\",\n            style: {\n              color: '#FEB019'\n            }\n          }\n        }],\n        fill: {\n          opacity: 1\n        },\n        tooltip: {\n          y: {\n            formatter: function (val) {\n              return \"$ \" + val + \" thousands\";\n            }\n          }\n        }\n      },\n      series: [{\n        name: 'Net Profit',\n        type: \"column\",\n        data: [44]\n      }, {\n        name: 'Revenue',\n        type: \"column\",\n        data: [76]\n      }, {\n        name: 'Free Cash Flow',\n        type: \"line\",\n        data: [35]\n      }]\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(ReactApexChart, {\n      options: this.state.options,\n      series: this.state.series,\n      type: \"bar\",\n      width: \"600\",\n      height: \"350\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default AnalyticalTest;","map":{"version":3,"sources":["/home/user/Desktop/milonux-sq-dashboard-59aefe7abad7/src/Personal/TestRect/Reactjs.js"],"names":["Chart","Tooltip","Axis","Legend","Pie","Coord","Line","Bar","Point","React","Row","Col","Card","Button","Icon","Progress","axios","ReactApexChart","AnalyticalTest","Component","constructor","props","state","options","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","stroke","show","width","colors","xaxis","categories","yaxis","axisTicks","axisBorder","color","labels","style","formatter","val","Math","round","title","text","tooltip","seriesName","opposite","fill","opacity","y","series","name","type","data","render"],"mappings":"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","sourcesContent":["\n\nimport { Chart, Tooltip, Axis, Legend, Pie, Coord, Line, Bar, Point} from 'viser-react';\nimport * as React from 'react';\nimport { Row, Col, Card, Button, Icon, Progress } from \"antd\";\nimport axios from \"axios\";\nimport ReactApexChart from 'react-apexcharts'\n\nclass AnalyticalTest extends React.Component {\n\n      constructor(props) {\n        super(props);\n\n        this.state = {\n        options: {\n            plotOptions: {\n              bar: {\n                horizontal: false,\n                columnWidth: '55%',\n                endingShape: 'rounded'\n              },\n            },\n            dataLabels: {\n              enabled: false\n            },\n            stroke: {\n              show: true,\n              width: 2,\n              colors: ['transparent']\n            },\n            xaxis: {\n              categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],\n            },\n            yaxis: [\n              {\n                axisTicks: {\n                  show: true,\n                },\n                axisBorder: {\n                  show: true,\n                  color: '#008FFB'\n                },\n                 labels: {\n                   style: {\n                    color: '#008FFB',\n                  },\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                },\n                title: {\n                  text: \"Income (thousand crores)\",\n                  style: {\n                    color: '#008FFB',\n                  }\n                },\n                tooltip: {\n                  enabled: true\n                }\n              },\n\n              {\n                seriesName: 'Income',\n                opposite: true,\n                axisTicks: {\n                  show: true,\n                },\n                axisBorder: {\n                  show: true,\n                  color: '#00E396'\n                },\n                   labels: {\n                   style: {\n                    color: '#00E396',\n                  },\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                },\n                title: {\n                  text: \"Operating Cashflow (thousand crores)\",\n                  style: {\n                    color: '#00E396',\n                  }\n                },\n              },\n              {\n                seriesName: 'Revenue',\n                opposite: true,\n                axisTicks: {\n                  show: true,\n                },\n                axisBorder: {\n                  show: true,\n                  color: '#FEB019'\n                },\n                 labels: {\n                   style: {\n                    color: '#FEB019',\n                  },\n                    formatter: function(val) {\n                       if (val < 100000) {\n                                    return Math.round((val/1000) * 10)/10+'k';\n                                }\n                        else if (val >= 1000000){\n\n                        return val=(val/1000000)+\"M\";\n\n                        }\n                         else {\n                                    return val;\n                                }\n\n                    }\n                },\n                title: {\n                  text: \"Revenue (thousand crores)\",\n                  style: {\n                    color: '#FEB019',\n                  }\n                }\n              },\n            ],\n            fill: {\n              opacity: 1\n            },\n            tooltip: {\n              y: {\n                formatter: function (val) {\n                  return \"$ \" + val + \" thousands\"\n                }\n              }\n            }\n          },\n          series: [{\n            name: 'Net Profit',\n            type:\"column\",\n            data: [44]\n          }, {\n            name: 'Revenue',\n            type:\"column\",\n            data: [76]\n          }, {\n            name: 'Free Cash Flow',\n            type:\"line\",\n            data: [35]\n          }],\n        }\n      }\n\n      render() {\n        return (\n\n\n          <div id=\"chart\">\n            <ReactApexChart options={this.state.options} series={this.state.series} type=\"bar\" width=\"600\" height=\"350\" />\n          </div>\n\n\n        );\n      }\n    }\nexport default AnalyticalTest;"]},"metadata":{},"sourceType":"module"}