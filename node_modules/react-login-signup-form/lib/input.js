"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }

var wrapperStyle = {
  position: 'relative',
  marginTop: '1rem'
};
var inputStyle = {
  width: '15rem',
  padding: '0.25rem',
  transition: '.25s border ease-in-out',
  borderRadius: '0',
  outline: 'none',
  boxShadow: 'none',
  background: 'transparent',
  color: '#FFF',
  border: '0',
  borderBottom: '2px solid #CCC',
  fontSize: '1rem'
};
var inputFocusStyle = {
  borderBottom: '2px solid #CC2C21'
};
var hintStyle = {
  position: 'absolute',
  pointerEvents: 'none',
  left: '0.25rem',
  bottom: '0.25rem',
  fontSize: '1rem',
  color: '#CCC',
  transition: '.25s bottom ease-in-out, .25s font-size ease-in-out'
};
var hintFocusStyle = {
  position: 'absolute',
  left: '0',
  bottom: '1.5rem',
  color: '#FFF',
  fontSize: '0.875rem',
  fontWeight: 'lighter'
};

var Input =
/*#__PURE__*/
function (_React$Component) {
  function Input(props) {
    var _this;

    _classCallCheck(this, Input);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));
    _this.state = {
      isFocused: false,
      value: props.value
    };
    return _this;
  }

  _createClass(Input, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this._updateStyles();
    }
  }, {
    key: "_onFocus",
    value: function _onFocus() {
      this.setState({
        isFocused: true
      });
    }
  }, {
    key: "_onBlur",
    value: function _onBlur() {
      this.setState({
        isFocused: false
      });
    }
  }, {
    key: "_onChange",
    value: function _onChange(event) {
      var value = event.target.value;
      this.setState({
        value: value
      });
      this.props.onChange(value);
    }
  }, {
    key: "_updateStyles",
    value: function _updateStyles() {
      if (this.props.width !== null) {
        inputStyle = _objectSpread({}, inputStyle, {
          width: this.props.width
        });
      }

      if (this.props.borderColor !== null) {
        inputStyle = _objectSpread({}, inputStyle, {
          borderBottom: "2px solid ".concat(this.props.borderColor)
        });
      }

      if (this.props.borderFocusedColor !== null) {
        inputFocusStyle = _objectSpread({}, inputFocusStyle, {
          borderBottom: "2px solid ".concat(this.props.borderFocusedColor)
        });
      }

      if (this.props.fontColor !== null) {
        inputStyle = _objectSpread({}, inputStyle, {
          color: this.props.fontColor
        });
      }

      if (this.props.hintColor !== null) {
        hintStyle = _objectSpread({}, hintStyle, {
          color: this.props.hintColor
        });
      }

      if (this.props.hintFocusedColor !== null) {
        hintFocusStyle = _objectSpread({}, hintFocusStyle, {
          color: this.props.hintFocusedColor
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var inputFocusedStyle = _objectSpread({}, inputStyle, inputFocusStyle);

      var hintFocusedStyle = _objectSpread({}, hintStyle, hintFocusStyle);

      return _react.default.createElement("div", {
        style: wrapperStyle
      }, _react.default.createElement("input", {
        onFocus: function onFocus() {
          return _this2._onFocus();
        },
        onBlur: function onBlur() {
          return _this2._onBlur();
        },
        onChange: function onChange(event) {
          return _this2._onChange(event);
        },
        style: this.state.isFocused ? inputFocusedStyle : inputStyle,
        type: this.props.isPassword ? 'password' : 'text',
        value: this.state.value
      }), _react.default.createElement("div", {
        style: this.state.isFocused || this.state.value !== '' ? hintFocusedStyle : hintStyle
      }, this.props.hintText));
    }
  }]);

  _inherits(Input, _React$Component);

  return Input;
}(_react.default.Component);

Input.propTypes = {
  borderColor: _propTypes.default.string,
  borderFocusedColor: _propTypes.default.string,
  fontColor: _propTypes.default.string,
  hintColor: _propTypes.default.string,
  hintFocusedColor: _propTypes.default.string,
  hintText: _propTypes.default.string.isRequired,
  isPassword: _propTypes.default.bool,
  onChange: _propTypes.default.func.isRequired,
  value: _propTypes.default.string.isRequired,
  width: _propTypes.default.string
};
Input.defaultProps = {
  borderColor: null,
  borderFocusedColor: null,
  fontColor: null,
  hintColor: null,
  hintFocusedColor: null,
  isPassword: false,
  width: null
};
var _default = Input;
exports.default = _default;